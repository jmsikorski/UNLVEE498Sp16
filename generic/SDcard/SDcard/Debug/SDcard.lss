
SDcard.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000002e  00800200  00002a06  00002a9a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002a06  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000253  0080022e  0080022e  00002ac8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00002ac8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002af8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000158  00000000  00000000  00002b38  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002f44  00000000  00000000  00002c90  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000067d  00000000  00000000  00005bd4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001da4  00000000  00000000  00006251  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000758  00000000  00000000  00007ff8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000065a  00000000  00000000  00008750  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00004dff  00000000  00000000  00008daa  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000208  00000000  00000000  0000dba9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
       2:	00 00       	nop
       4:	90 c0       	rjmp	.+288    	; 0x126 <__bad_interrupt>
       6:	00 00       	nop
       8:	8e c0       	rjmp	.+284    	; 0x126 <__bad_interrupt>
       a:	00 00       	nop
       c:	8c c0       	rjmp	.+280    	; 0x126 <__bad_interrupt>
       e:	00 00       	nop
      10:	8a c0       	rjmp	.+276    	; 0x126 <__bad_interrupt>
      12:	00 00       	nop
      14:	88 c0       	rjmp	.+272    	; 0x126 <__bad_interrupt>
      16:	00 00       	nop
      18:	86 c0       	rjmp	.+268    	; 0x126 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	84 c0       	rjmp	.+264    	; 0x126 <__bad_interrupt>
      1e:	00 00       	nop
      20:	82 c0       	rjmp	.+260    	; 0x126 <__bad_interrupt>
      22:	00 00       	nop
      24:	80 c0       	rjmp	.+256    	; 0x126 <__bad_interrupt>
      26:	00 00       	nop
      28:	7e c0       	rjmp	.+252    	; 0x126 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	7c c0       	rjmp	.+248    	; 0x126 <__bad_interrupt>
      2e:	00 00       	nop
      30:	7a c0       	rjmp	.+244    	; 0x126 <__bad_interrupt>
      32:	00 00       	nop
      34:	78 c0       	rjmp	.+240    	; 0x126 <__bad_interrupt>
      36:	00 00       	nop
      38:	76 c0       	rjmp	.+236    	; 0x126 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	74 c0       	rjmp	.+232    	; 0x126 <__bad_interrupt>
      3e:	00 00       	nop
      40:	72 c0       	rjmp	.+228    	; 0x126 <__bad_interrupt>
      42:	00 00       	nop
      44:	70 c0       	rjmp	.+224    	; 0x126 <__bad_interrupt>
      46:	00 00       	nop
      48:	6e c0       	rjmp	.+220    	; 0x126 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	6c c0       	rjmp	.+216    	; 0x126 <__bad_interrupt>
      4e:	00 00       	nop
      50:	6a c0       	rjmp	.+212    	; 0x126 <__bad_interrupt>
      52:	00 00       	nop
      54:	68 c0       	rjmp	.+208    	; 0x126 <__bad_interrupt>
      56:	00 00       	nop
      58:	66 c0       	rjmp	.+204    	; 0x126 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	64 c0       	rjmp	.+200    	; 0x126 <__bad_interrupt>
      5e:	00 00       	nop
      60:	62 c0       	rjmp	.+196    	; 0x126 <__bad_interrupt>
      62:	00 00       	nop
      64:	60 c0       	rjmp	.+192    	; 0x126 <__bad_interrupt>
      66:	00 00       	nop
      68:	5e c0       	rjmp	.+188    	; 0x126 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	5c c0       	rjmp	.+184    	; 0x126 <__bad_interrupt>
      6e:	00 00       	nop
      70:	5a c0       	rjmp	.+180    	; 0x126 <__bad_interrupt>
      72:	00 00       	nop
      74:	58 c0       	rjmp	.+176    	; 0x126 <__bad_interrupt>
      76:	00 00       	nop
      78:	56 c0       	rjmp	.+172    	; 0x126 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	54 c0       	rjmp	.+168    	; 0x126 <__bad_interrupt>
      7e:	00 00       	nop
      80:	52 c0       	rjmp	.+164    	; 0x126 <__bad_interrupt>
      82:	00 00       	nop
      84:	50 c0       	rjmp	.+160    	; 0x126 <__bad_interrupt>
      86:	00 00       	nop
      88:	4e c0       	rjmp	.+156    	; 0x126 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	4c c0       	rjmp	.+152    	; 0x126 <__bad_interrupt>
      8e:	00 00       	nop
      90:	4a c0       	rjmp	.+148    	; 0x126 <__bad_interrupt>
      92:	00 00       	nop
      94:	48 c0       	rjmp	.+144    	; 0x126 <__bad_interrupt>
      96:	00 00       	nop
      98:	46 c0       	rjmp	.+140    	; 0x126 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	44 c0       	rjmp	.+136    	; 0x126 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	42 c0       	rjmp	.+132    	; 0x126 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	40 c0       	rjmp	.+128    	; 0x126 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	3e c0       	rjmp	.+124    	; 0x126 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	3c c0       	rjmp	.+120    	; 0x126 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	3a c0       	rjmp	.+116    	; 0x126 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	38 c0       	rjmp	.+112    	; 0x126 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	36 c0       	rjmp	.+108    	; 0x126 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	34 c0       	rjmp	.+104    	; 0x126 <__bad_interrupt>
      be:	00 00       	nop
      c0:	32 c0       	rjmp	.+100    	; 0x126 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	30 c0       	rjmp	.+96     	; 0x126 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	2e c0       	rjmp	.+92     	; 0x126 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	2c c0       	rjmp	.+88     	; 0x126 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	2a c0       	rjmp	.+84     	; 0x126 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	28 c0       	rjmp	.+80     	; 0x126 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	26 c0       	rjmp	.+76     	; 0x126 <__bad_interrupt>
      da:	00 00       	nop
      dc:	24 c0       	rjmp	.+72     	; 0x126 <__bad_interrupt>
      de:	00 00       	nop
      e0:	22 c0       	rjmp	.+68     	; 0x126 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
      e4:	11 24       	eor	r1, r1
      e6:	1f be       	out	0x3f, r1	; 63
      e8:	cf ef       	ldi	r28, 0xFF	; 255
      ea:	d1 e2       	ldi	r29, 0x21	; 33
      ec:	de bf       	out	0x3e, r29	; 62
      ee:	cd bf       	out	0x3d, r28	; 61
      f0:	00 e0       	ldi	r16, 0x00	; 0
      f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
      f4:	12 e0       	ldi	r17, 0x02	; 2
      f6:	a0 e0       	ldi	r26, 0x00	; 0
      f8:	b2 e0       	ldi	r27, 0x02	; 2
      fa:	e6 e0       	ldi	r30, 0x06	; 6
      fc:	fa e2       	ldi	r31, 0x2A	; 42
      fe:	00 e0       	ldi	r16, 0x00	; 0
     100:	0b bf       	out	0x3b, r16	; 59
     102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
     104:	07 90       	elpm	r0, Z+
     106:	0d 92       	st	X+, r0
     108:	ae 32       	cpi	r26, 0x2E	; 46
     10a:	b1 07       	cpc	r27, r17
     10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
     10e:	24 e0       	ldi	r18, 0x04	; 4
     110:	ae e2       	ldi	r26, 0x2E	; 46
     112:	b2 e0       	ldi	r27, 0x02	; 2
     114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
     116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
     118:	a1 38       	cpi	r26, 0x81	; 129
     11a:	b2 07       	cpc	r27, r18
     11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
     11e:	0e 94 75 10 	call	0x20ea	; 0x20ea <main>
     122:	0c 94 01 15 	jmp	0x2a02	; 0x2a02 <_exit>

00000126 <__bad_interrupt>:
     126:	6c cf       	rjmp	.-296    	; 0x0 <__vectors>

00000128 <mem_cpy>:
		mem_cpy(rbuff, &fp->buf[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
#endif
	}

	LEAVE_FF(fp->fs, FR_OK);
}
     128:	cf 93       	push	r28
     12a:	df 93       	push	r29
     12c:	42 30       	cpi	r20, 0x02	; 2
     12e:	51 05       	cpc	r21, r1
     130:	c0 f0       	brcs	.+48     	; 0x162 <mem_cpy+0x3a>
     132:	db 01       	movw	r26, r22
     134:	fc 01       	movw	r30, r24
     136:	9a 01       	movw	r18, r20
     138:	cd 91       	ld	r28, X+
     13a:	dd 91       	ld	r29, X+
     13c:	c1 93       	st	Z+, r28
     13e:	d1 93       	st	Z+, r29
     140:	22 50       	subi	r18, 0x02	; 2
     142:	31 09       	sbc	r19, r1
     144:	22 30       	cpi	r18, 0x02	; 2
     146:	31 05       	cpc	r19, r1
     148:	b8 f7       	brcc	.-18     	; 0x138 <mem_cpy+0x10>
     14a:	9a 01       	movw	r18, r20
     14c:	22 50       	subi	r18, 0x02	; 2
     14e:	31 09       	sbc	r19, r1
     150:	2e 7f       	andi	r18, 0xFE	; 254
     152:	2e 5f       	subi	r18, 0xFE	; 254
     154:	3f 4f       	sbci	r19, 0xFF	; 255
     156:	82 0f       	add	r24, r18
     158:	93 1f       	adc	r25, r19
     15a:	62 0f       	add	r22, r18
     15c:	73 1f       	adc	r23, r19
     15e:	41 70       	andi	r20, 0x01	; 1
     160:	55 27       	eor	r21, r21
     162:	41 15       	cp	r20, r1
     164:	51 05       	cpc	r21, r1
     166:	49 f0       	breq	.+18     	; 0x17a <mem_cpy+0x52>
     168:	db 01       	movw	r26, r22
     16a:	fc 01       	movw	r30, r24
     16c:	48 0f       	add	r20, r24
     16e:	59 1f       	adc	r21, r25
     170:	9d 91       	ld	r25, X+
     172:	91 93       	st	Z+, r25
     174:	e4 17       	cp	r30, r20
     176:	f5 07       	cpc	r31, r21
     178:	d9 f7       	brne	.-10     	; 0x170 <mem_cpy+0x48>
     17a:	df 91       	pop	r29
     17c:	cf 91       	pop	r28
     17e:	08 95       	ret

00000180 <get_ldnumber>:
     180:	cf 93       	push	r28
     182:	df 93       	push	r29
     184:	ec 01       	movw	r28, r24
     186:	a8 81       	ld	r26, Y
     188:	b9 81       	ldd	r27, Y+1	; 0x01
     18a:	10 97       	sbiw	r26, 0x00	; 0
     18c:	f9 f0       	breq	.+62     	; 0x1cc <get_ldnumber+0x4c>
     18e:	4c 91       	ld	r20, X
     190:	41 32       	cpi	r20, 0x21	; 33
     192:	58 f0       	brcs	.+22     	; 0x1aa <get_ldnumber+0x2a>
     194:	4a 33       	cpi	r20, 0x3A	; 58
     196:	31 f1       	breq	.+76     	; 0x1e4 <get_ldnumber+0x64>
     198:	fd 01       	movw	r30, r26
     19a:	31 96       	adiw	r30, 0x01	; 1
     19c:	9f 01       	movw	r18, r30
     19e:	91 91       	ld	r25, Z+
     1a0:	91 32       	cpi	r25, 0x21	; 33
     1a2:	28 f0       	brcs	.+10     	; 0x1ae <get_ldnumber+0x2e>
     1a4:	9a 33       	cpi	r25, 0x3A	; 58
     1a6:	d1 f7       	brne	.-12     	; 0x19c <get_ldnumber+0x1c>
     1a8:	04 c0       	rjmp	.+8      	; 0x1b2 <get_ldnumber+0x32>
     1aa:	94 2f       	mov	r25, r20
     1ac:	9d 01       	movw	r18, r26
     1ae:	9a 33       	cpi	r25, 0x3A	; 58
     1b0:	81 f4       	brne	.+32     	; 0x1d2 <get_ldnumber+0x52>
     1b2:	cd 01       	movw	r24, r26
     1b4:	01 96       	adiw	r24, 0x01	; 1
     1b6:	28 17       	cp	r18, r24
     1b8:	39 07       	cpc	r19, r25
     1ba:	71 f4       	brne	.+28     	; 0x1d8 <get_ldnumber+0x58>
     1bc:	40 33       	cpi	r20, 0x30	; 48
     1be:	79 f4       	brne	.+30     	; 0x1de <get_ldnumber+0x5e>
     1c0:	12 96       	adiw	r26, 0x02	; 2
     1c2:	b9 83       	std	Y+1, r27	; 0x01
     1c4:	a8 83       	st	Y, r26
     1c6:	80 e0       	ldi	r24, 0x00	; 0
     1c8:	90 e0       	ldi	r25, 0x00	; 0
     1ca:	0e c0       	rjmp	.+28     	; 0x1e8 <get_ldnumber+0x68>
     1cc:	8f ef       	ldi	r24, 0xFF	; 255
     1ce:	9f ef       	ldi	r25, 0xFF	; 255
     1d0:	0b c0       	rjmp	.+22     	; 0x1e8 <get_ldnumber+0x68>
     1d2:	80 e0       	ldi	r24, 0x00	; 0
     1d4:	90 e0       	ldi	r25, 0x00	; 0
     1d6:	08 c0       	rjmp	.+16     	; 0x1e8 <get_ldnumber+0x68>
     1d8:	8f ef       	ldi	r24, 0xFF	; 255
     1da:	9f ef       	ldi	r25, 0xFF	; 255
     1dc:	05 c0       	rjmp	.+10     	; 0x1e8 <get_ldnumber+0x68>
     1de:	8f ef       	ldi	r24, 0xFF	; 255
     1e0:	9f ef       	ldi	r25, 0xFF	; 255
     1e2:	02 c0       	rjmp	.+4      	; 0x1e8 <get_ldnumber+0x68>
     1e4:	9d 01       	movw	r18, r26
     1e6:	e5 cf       	rjmp	.-54     	; 0x1b2 <get_ldnumber+0x32>
     1e8:	df 91       	pop	r29
     1ea:	cf 91       	pop	r28
     1ec:	08 95       	ret

000001ee <sync_window>:
     1ee:	8f 92       	push	r8
     1f0:	9f 92       	push	r9
     1f2:	af 92       	push	r10
     1f4:	bf 92       	push	r11
     1f6:	cf 92       	push	r12
     1f8:	df 92       	push	r13
     1fa:	ef 92       	push	r14
     1fc:	ff 92       	push	r15
     1fe:	0f 93       	push	r16
     200:	1f 93       	push	r17
     202:	cf 93       	push	r28
     204:	df 93       	push	r29
     206:	fc 01       	movw	r30, r24
     208:	24 81       	ldd	r18, Z+4	; 0x04
     20a:	22 23       	and	r18, r18
     20c:	09 f4       	brne	.+2      	; 0x210 <sync_window+0x22>
     20e:	46 c0       	rjmp	.+140    	; 0x29c <sync_window+0xae>
     210:	ec 01       	movw	r28, r24
     212:	c2 a4       	ldd	r12, Z+42	; 0x2a
     214:	d3 a4       	ldd	r13, Z+43	; 0x2b
     216:	e4 a4       	ldd	r14, Z+44	; 0x2c
     218:	f5 a4       	ldd	r15, Z+45	; 0x2d
     21a:	5c 01       	movw	r10, r24
     21c:	fe e2       	ldi	r31, 0x2E	; 46
     21e:	af 0e       	add	r10, r31
     220:	b1 1c       	adc	r11, r1
     222:	01 e0       	ldi	r16, 0x01	; 1
     224:	10 e0       	ldi	r17, 0x00	; 0
     226:	a7 01       	movw	r20, r14
     228:	96 01       	movw	r18, r12
     22a:	b5 01       	movw	r22, r10
     22c:	89 81       	ldd	r24, Y+1	; 0x01
     22e:	0e 94 b0 13 	call	0x2760	; 0x2760 <disk_write>
     232:	81 11       	cpse	r24, r1
     234:	35 c0       	rjmp	.+106    	; 0x2a0 <sync_window+0xb2>
     236:	1c 82       	std	Y+4, r1	; 0x04
     238:	8e 8d       	ldd	r24, Y+30	; 0x1e
     23a:	9f 8d       	ldd	r25, Y+31	; 0x1f
     23c:	a8 a1       	ldd	r26, Y+32	; 0x20
     23e:	b9 a1       	ldd	r27, Y+33	; 0x21
     240:	b7 01       	movw	r22, r14
     242:	a6 01       	movw	r20, r12
     244:	48 1b       	sub	r20, r24
     246:	59 0b       	sbc	r21, r25
     248:	6a 0b       	sbc	r22, r26
     24a:	7b 0b       	sbc	r23, r27
     24c:	8e 89       	ldd	r24, Y+22	; 0x16
     24e:	9f 89       	ldd	r25, Y+23	; 0x17
     250:	a8 8d       	ldd	r26, Y+24	; 0x18
     252:	b9 8d       	ldd	r27, Y+25	; 0x19
     254:	48 17       	cp	r20, r24
     256:	59 07       	cpc	r21, r25
     258:	6a 07       	cpc	r22, r26
     25a:	7b 07       	cpc	r23, r27
     25c:	18 f5       	brcc	.+70     	; 0x2a4 <sync_window+0xb6>
     25e:	8b 80       	ldd	r8, Y+3	; 0x03
     260:	91 2c       	mov	r9, r1
     262:	82 e0       	ldi	r24, 0x02	; 2
     264:	88 16       	cp	r8, r24
     266:	91 04       	cpc	r9, r1
     268:	f8 f0       	brcs	.+62     	; 0x2a8 <sync_window+0xba>
     26a:	8e 89       	ldd	r24, Y+22	; 0x16
     26c:	9f 89       	ldd	r25, Y+23	; 0x17
     26e:	a8 8d       	ldd	r26, Y+24	; 0x18
     270:	b9 8d       	ldd	r27, Y+25	; 0x19
     272:	c8 0e       	add	r12, r24
     274:	d9 1e       	adc	r13, r25
     276:	ea 1e       	adc	r14, r26
     278:	fb 1e       	adc	r15, r27
     27a:	01 e0       	ldi	r16, 0x01	; 1
     27c:	10 e0       	ldi	r17, 0x00	; 0
     27e:	a7 01       	movw	r20, r14
     280:	96 01       	movw	r18, r12
     282:	b5 01       	movw	r22, r10
     284:	89 81       	ldd	r24, Y+1	; 0x01
     286:	0e 94 b0 13 	call	0x2760	; 0x2760 <disk_write>
     28a:	e1 e0       	ldi	r30, 0x01	; 1
     28c:	8e 1a       	sub	r8, r30
     28e:	91 08       	sbc	r9, r1
     290:	f1 e0       	ldi	r31, 0x01	; 1
     292:	8f 16       	cp	r8, r31
     294:	91 04       	cpc	r9, r1
     296:	49 f7       	brne	.-46     	; 0x26a <sync_window+0x7c>
     298:	80 e0       	ldi	r24, 0x00	; 0
     29a:	07 c0       	rjmp	.+14     	; 0x2aa <sync_window+0xbc>
     29c:	80 e0       	ldi	r24, 0x00	; 0
     29e:	05 c0       	rjmp	.+10     	; 0x2aa <sync_window+0xbc>
     2a0:	81 e0       	ldi	r24, 0x01	; 1
     2a2:	03 c0       	rjmp	.+6      	; 0x2aa <sync_window+0xbc>
     2a4:	80 e0       	ldi	r24, 0x00	; 0
     2a6:	01 c0       	rjmp	.+2      	; 0x2aa <sync_window+0xbc>
     2a8:	80 e0       	ldi	r24, 0x00	; 0
     2aa:	df 91       	pop	r29
     2ac:	cf 91       	pop	r28
     2ae:	1f 91       	pop	r17
     2b0:	0f 91       	pop	r16
     2b2:	ff 90       	pop	r15
     2b4:	ef 90       	pop	r14
     2b6:	df 90       	pop	r13
     2b8:	cf 90       	pop	r12
     2ba:	bf 90       	pop	r11
     2bc:	af 90       	pop	r10
     2be:	9f 90       	pop	r9
     2c0:	8f 90       	pop	r8
     2c2:	08 95       	ret

000002c4 <move_window>:
     2c4:	8f 92       	push	r8
     2c6:	9f 92       	push	r9
     2c8:	af 92       	push	r10
     2ca:	bf 92       	push	r11
     2cc:	ff 92       	push	r15
     2ce:	0f 93       	push	r16
     2d0:	1f 93       	push	r17
     2d2:	cf 93       	push	r28
     2d4:	df 93       	push	r29
     2d6:	ec 01       	movw	r28, r24
     2d8:	4a 01       	movw	r8, r20
     2da:	5b 01       	movw	r10, r22
     2dc:	8a a5       	ldd	r24, Y+42	; 0x2a
     2de:	9b a5       	ldd	r25, Y+43	; 0x2b
     2e0:	ac a5       	ldd	r26, Y+44	; 0x2c
     2e2:	bd a5       	ldd	r27, Y+45	; 0x2d
     2e4:	84 17       	cp	r24, r20
     2e6:	95 07       	cpc	r25, r21
     2e8:	a6 07       	cpc	r26, r22
     2ea:	b7 07       	cpc	r27, r23
     2ec:	e1 f0       	breq	.+56     	; 0x326 <move_window+0x62>
     2ee:	ce 01       	movw	r24, r28
     2f0:	7e df       	rcall	.-260    	; 0x1ee <sync_window>
     2f2:	f8 2e       	mov	r15, r24
     2f4:	81 11       	cpse	r24, r1
     2f6:	18 c0       	rjmp	.+48     	; 0x328 <move_window+0x64>
     2f8:	01 e0       	ldi	r16, 0x01	; 1
     2fa:	10 e0       	ldi	r17, 0x00	; 0
     2fc:	a5 01       	movw	r20, r10
     2fe:	94 01       	movw	r18, r8
     300:	be 01       	movw	r22, r28
     302:	62 5d       	subi	r22, 0xD2	; 210
     304:	7f 4f       	sbci	r23, 0xFF	; 255
     306:	89 81       	ldd	r24, Y+1	; 0x01
     308:	0e 94 64 13 	call	0x26c8	; 0x26c8 <disk_read>
     30c:	88 23       	and	r24, r24
     30e:	31 f0       	breq	.+12     	; 0x31c <move_window+0x58>
     310:	ff 24       	eor	r15, r15
     312:	f3 94       	inc	r15
     314:	88 24       	eor	r8, r8
     316:	8a 94       	dec	r8
     318:	98 2c       	mov	r9, r8
     31a:	54 01       	movw	r10, r8
     31c:	8a a6       	std	Y+42, r8	; 0x2a
     31e:	9b a6       	std	Y+43, r9	; 0x2b
     320:	ac a6       	std	Y+44, r10	; 0x2c
     322:	bd a6       	std	Y+45, r11	; 0x2d
     324:	01 c0       	rjmp	.+2      	; 0x328 <move_window+0x64>
     326:	f1 2c       	mov	r15, r1
     328:	8f 2d       	mov	r24, r15
     32a:	df 91       	pop	r29
     32c:	cf 91       	pop	r28
     32e:	1f 91       	pop	r17
     330:	0f 91       	pop	r16
     332:	ff 90       	pop	r15
     334:	bf 90       	pop	r11
     336:	af 90       	pop	r10
     338:	9f 90       	pop	r9
     33a:	8f 90       	pop	r8
     33c:	08 95       	ret

0000033e <check_fs>:
     33e:	cf 93       	push	r28
     340:	df 93       	push	r29
     342:	ec 01       	movw	r28, r24
     344:	1c 82       	std	Y+4, r1	; 0x04
     346:	8f ef       	ldi	r24, 0xFF	; 255
     348:	9f ef       	ldi	r25, 0xFF	; 255
     34a:	dc 01       	movw	r26, r24
     34c:	8a a7       	std	Y+42, r24	; 0x2a
     34e:	9b a7       	std	Y+43, r25	; 0x2b
     350:	ac a7       	std	Y+44, r26	; 0x2c
     352:	bd a7       	std	Y+45, r27	; 0x2d
     354:	ce 01       	movw	r24, r28
     356:	b6 df       	rcall	.-148    	; 0x2c4 <move_window>
     358:	81 11       	cpse	r24, r1
     35a:	23 c0       	rjmp	.+70     	; 0x3a2 <check_fs+0x64>
     35c:	fe 01       	movw	r30, r28
     35e:	e4 5d       	subi	r30, 0xD4	; 212
     360:	fd 4f       	sbci	r31, 0xFD	; 253
     362:	80 81       	ld	r24, Z
     364:	91 81       	ldd	r25, Z+1	; 0x01
     366:	85 35       	cpi	r24, 0x55	; 85
     368:	9a 4a       	sbci	r25, 0xAA	; 170
     36a:	e9 f4       	brne	.+58     	; 0x3a6 <check_fs+0x68>
     36c:	e8 5c       	subi	r30, 0xC8	; 200
     36e:	f1 40       	sbci	r31, 0x01	; 1
     370:	80 81       	ld	r24, Z
     372:	91 81       	ldd	r25, Z+1	; 0x01
     374:	a2 81       	ldd	r26, Z+2	; 0x02
     376:	b3 81       	ldd	r27, Z+3	; 0x03
     378:	bb 27       	eor	r27, r27
     37a:	86 34       	cpi	r24, 0x46	; 70
     37c:	91 44       	sbci	r25, 0x41	; 65
     37e:	a4 45       	sbci	r26, 0x54	; 84
     380:	b1 05       	cpc	r27, r1
     382:	99 f0       	breq	.+38     	; 0x3aa <check_fs+0x6c>
     384:	c0 58       	subi	r28, 0x80	; 128
     386:	df 4f       	sbci	r29, 0xFF	; 255
     388:	48 81       	ld	r20, Y
     38a:	59 81       	ldd	r21, Y+1	; 0x01
     38c:	6a 81       	ldd	r22, Y+2	; 0x02
     38e:	7b 81       	ldd	r23, Y+3	; 0x03
     390:	77 27       	eor	r23, r23
     392:	81 e0       	ldi	r24, 0x01	; 1
     394:	46 34       	cpi	r20, 0x46	; 70
     396:	51 44       	sbci	r21, 0x41	; 65
     398:	64 45       	sbci	r22, 0x54	; 84
     39a:	71 05       	cpc	r23, r1
     39c:	39 f4       	brne	.+14     	; 0x3ac <check_fs+0x6e>
     39e:	80 e0       	ldi	r24, 0x00	; 0
     3a0:	05 c0       	rjmp	.+10     	; 0x3ac <check_fs+0x6e>
     3a2:	83 e0       	ldi	r24, 0x03	; 3
     3a4:	03 c0       	rjmp	.+6      	; 0x3ac <check_fs+0x6e>
     3a6:	82 e0       	ldi	r24, 0x02	; 2
     3a8:	01 c0       	rjmp	.+2      	; 0x3ac <check_fs+0x6e>
     3aa:	80 e0       	ldi	r24, 0x00	; 0
     3ac:	df 91       	pop	r29
     3ae:	cf 91       	pop	r28
     3b0:	08 95       	ret

000003b2 <validate>:
     3b2:	00 97       	sbiw	r24, 0x00	; 0
     3b4:	c9 f0       	breq	.+50     	; 0x3e8 <validate+0x36>
     3b6:	dc 01       	movw	r26, r24
     3b8:	ed 91       	ld	r30, X+
     3ba:	fc 91       	ld	r31, X
     3bc:	11 97       	sbiw	r26, 0x01	; 1
     3be:	30 97       	sbiw	r30, 0x00	; 0
     3c0:	a9 f0       	breq	.+42     	; 0x3ec <validate+0x3a>
     3c2:	20 81       	ld	r18, Z
     3c4:	22 23       	and	r18, r18
     3c6:	a1 f0       	breq	.+40     	; 0x3f0 <validate+0x3e>
     3c8:	26 81       	ldd	r18, Z+6	; 0x06
     3ca:	37 81       	ldd	r19, Z+7	; 0x07
     3cc:	12 96       	adiw	r26, 0x02	; 2
     3ce:	8d 91       	ld	r24, X+
     3d0:	9c 91       	ld	r25, X
     3d2:	13 97       	sbiw	r26, 0x03	; 3
     3d4:	28 17       	cp	r18, r24
     3d6:	39 07       	cpc	r19, r25
     3d8:	69 f4       	brne	.+26     	; 0x3f4 <validate+0x42>
     3da:	81 81       	ldd	r24, Z+1	; 0x01
     3dc:	0e 94 a1 12 	call	0x2542	; 0x2542 <disk_status>
     3e0:	80 ff       	sbrs	r24, 0
     3e2:	0a c0       	rjmp	.+20     	; 0x3f8 <validate+0x46>
     3e4:	89 e0       	ldi	r24, 0x09	; 9
     3e6:	08 95       	ret
     3e8:	89 e0       	ldi	r24, 0x09	; 9
     3ea:	08 95       	ret
     3ec:	89 e0       	ldi	r24, 0x09	; 9
     3ee:	08 95       	ret
     3f0:	89 e0       	ldi	r24, 0x09	; 9
     3f2:	08 95       	ret
     3f4:	89 e0       	ldi	r24, 0x09	; 9
     3f6:	08 95       	ret
     3f8:	80 e0       	ldi	r24, 0x00	; 0
     3fa:	08 95       	ret

000003fc <find_volume>:
     3fc:	2f 92       	push	r2
     3fe:	3f 92       	push	r3
     400:	4f 92       	push	r4
     402:	5f 92       	push	r5
     404:	6f 92       	push	r6
     406:	7f 92       	push	r7
     408:	8f 92       	push	r8
     40a:	9f 92       	push	r9
     40c:	af 92       	push	r10
     40e:	bf 92       	push	r11
     410:	cf 92       	push	r12
     412:	df 92       	push	r13
     414:	ef 92       	push	r14
     416:	ff 92       	push	r15
     418:	0f 93       	push	r16
     41a:	1f 93       	push	r17
     41c:	cf 93       	push	r28
     41e:	df 93       	push	r29
     420:	cd b7       	in	r28, 0x3d	; 61
     422:	de b7       	in	r29, 0x3e	; 62
     424:	6d 97       	sbiw	r28, 0x1d	; 29
     426:	0f b6       	in	r0, 0x3f	; 63
     428:	f8 94       	cli
     42a:	de bf       	out	0x3e, r29	; 62
     42c:	0f be       	out	0x3f, r0	; 63
     42e:	cd bf       	out	0x3d, r28	; 61
     430:	6c 01       	movw	r12, r24
     432:	cb 01       	movw	r24, r22
     434:	b4 2e       	mov	r11, r20
     436:	d6 01       	movw	r26, r12
     438:	1d 92       	st	X+, r1
     43a:	1c 92       	st	X, r1
     43c:	a1 de       	rcall	.-702    	; 0x180 <get_ldnumber>
     43e:	7c 01       	movw	r14, r24
     440:	99 23       	and	r25, r25
     442:	0c f4       	brge	.+2      	; 0x446 <find_volume+0x4a>
     444:	02 c2       	rjmp	.+1028   	; 0x84a <find_volume+0x44e>
     446:	fc 01       	movw	r30, r24
     448:	ee 0f       	add	r30, r30
     44a:	ff 1f       	adc	r31, r31
     44c:	e0 5d       	subi	r30, 0xD0	; 208
     44e:	fd 4f       	sbci	r31, 0xFD	; 253
     450:	00 81       	ld	r16, Z
     452:	11 81       	ldd	r17, Z+1	; 0x01
     454:	01 15       	cp	r16, r1
     456:	11 05       	cpc	r17, r1
     458:	09 f4       	brne	.+2      	; 0x45c <find_volume+0x60>
     45a:	f9 c1       	rjmp	.+1010   	; 0x84e <find_volume+0x452>
     45c:	f6 01       	movw	r30, r12
     45e:	11 83       	std	Z+1, r17	; 0x01
     460:	00 83       	st	Z, r16
     462:	d8 01       	movw	r26, r16
     464:	8c 91       	ld	r24, X
     466:	88 23       	and	r24, r24
     468:	69 f0       	breq	.+26     	; 0x484 <find_volume+0x88>
     46a:	11 96       	adiw	r26, 0x01	; 1
     46c:	8c 91       	ld	r24, X
     46e:	0e 94 a1 12 	call	0x2542	; 0x2542 <disk_status>
     472:	80 fd       	sbrc	r24, 0
     474:	07 c0       	rjmp	.+14     	; 0x484 <find_volume+0x88>
     476:	bb 20       	and	r11, r11
     478:	09 f4       	brne	.+2      	; 0x47c <find_volume+0x80>
     47a:	eb c1       	rjmp	.+982    	; 0x852 <find_volume+0x456>
     47c:	82 ff       	sbrs	r24, 2
     47e:	eb c1       	rjmp	.+982    	; 0x856 <find_volume+0x45a>
     480:	8a e0       	ldi	r24, 0x0A	; 10
     482:	8b c2       	rjmp	.+1302   	; 0x99a <find_volume+0x59e>
     484:	f8 01       	movw	r30, r16
     486:	10 82       	st	Z, r1
     488:	e1 82       	std	Z+1, r14	; 0x01
     48a:	8e 2d       	mov	r24, r14
     48c:	0e 94 a8 12 	call	0x2550	; 0x2550 <disk_initialize>
     490:	80 fd       	sbrc	r24, 0
     492:	e3 c1       	rjmp	.+966    	; 0x85a <find_volume+0x45e>
     494:	bb 20       	and	r11, r11
     496:	09 f4       	brne	.+2      	; 0x49a <find_volume+0x9e>
     498:	00 c2       	rjmp	.+1024   	; 0x89a <find_volume+0x49e>
     49a:	82 fd       	sbrc	r24, 2
     49c:	e0 c1       	rjmp	.+960    	; 0x85e <find_volume+0x462>
     49e:	fd c1       	rjmp	.+1018   	; 0x89a <find_volume+0x49e>
     4a0:	80 81       	ld	r24, Z
     4a2:	88 23       	and	r24, r24
     4a4:	29 f0       	breq	.+10     	; 0x4b0 <find_volume+0xb4>
     4a6:	44 80       	ldd	r4, Z+4	; 0x04
     4a8:	55 80       	ldd	r5, Z+5	; 0x05
     4aa:	66 80       	ldd	r6, Z+6	; 0x06
     4ac:	77 80       	ldd	r7, Z+7	; 0x07
     4ae:	04 c0       	rjmp	.+8      	; 0x4b8 <find_volume+0xbc>
     4b0:	4e 2c       	mov	r4, r14
     4b2:	5f 2c       	mov	r5, r15
     4b4:	67 2e       	mov	r6, r23
     4b6:	76 2e       	mov	r7, r22
     4b8:	d9 01       	movw	r26, r18
     4ba:	4d 92       	st	X+, r4
     4bc:	5d 92       	st	X+, r5
     4be:	6d 92       	st	X+, r6
     4c0:	7d 92       	st	X+, r7
     4c2:	9d 01       	movw	r18, r26
     4c4:	70 96       	adiw	r30, 0x10	; 16
     4c6:	e4 17       	cp	r30, r20
     4c8:	f5 07       	cpc	r31, r21
     4ca:	51 f7       	brne	.-44     	; 0x4a0 <find_volume+0xa4>
     4cc:	4e 01       	movw	r8, r28
     4ce:	b1 e1       	ldi	r27, 0x11	; 17
     4d0:	8b 0e       	add	r8, r27
     4d2:	91 1c       	adc	r9, r1
     4d4:	68 94       	set
     4d6:	77 24       	eor	r7, r7
     4d8:	71 f8       	bld	r7, 1
     4da:	f5 01       	movw	r30, r10
     4dc:	c1 90       	ld	r12, Z+
     4de:	d1 90       	ld	r13, Z+
     4e0:	e1 90       	ld	r14, Z+
     4e2:	f1 90       	ld	r15, Z+
     4e4:	5f 01       	movw	r10, r30
     4e6:	c1 14       	cp	r12, r1
     4e8:	d1 04       	cpc	r13, r1
     4ea:	e1 04       	cpc	r14, r1
     4ec:	f1 04       	cpc	r15, r1
     4ee:	39 f0       	breq	.+14     	; 0x4fe <find_volume+0x102>
     4f0:	b7 01       	movw	r22, r14
     4f2:	a6 01       	movw	r20, r12
     4f4:	c8 01       	movw	r24, r16
     4f6:	23 df       	rcall	.-442    	; 0x33e <check_fs>
     4f8:	81 11       	cpse	r24, r1
     4fa:	02 c0       	rjmp	.+4      	; 0x500 <find_volume+0x104>
     4fc:	0d c0       	rjmp	.+26     	; 0x518 <find_volume+0x11c>
     4fe:	87 2d       	mov	r24, r7
     500:	a8 14       	cp	r10, r8
     502:	b9 04       	cpc	r11, r9
     504:	51 f7       	brne	.-44     	; 0x4da <find_volume+0xde>
     506:	03 c0       	rjmp	.+6      	; 0x50e <find_volume+0x112>
     508:	c1 2c       	mov	r12, r1
     50a:	d1 2c       	mov	r13, r1
     50c:	76 01       	movw	r14, r12
     50e:	83 30       	cpi	r24, 0x03	; 3
     510:	09 f4       	brne	.+2      	; 0x514 <find_volume+0x118>
     512:	a7 c1       	rjmp	.+846    	; 0x862 <find_volume+0x466>
     514:	81 11       	cpse	r24, r1
     516:	a7 c1       	rjmp	.+846    	; 0x866 <find_volume+0x46a>
     518:	d8 01       	movw	r26, r16
     51a:	d9 96       	adiw	r26, 0x39	; 57
     51c:	8d 91       	ld	r24, X+
     51e:	9c 91       	ld	r25, X
     520:	da 97       	sbiw	r26, 0x3a	; 58
     522:	81 15       	cp	r24, r1
     524:	92 40       	sbci	r25, 0x02	; 2
     526:	09 f0       	breq	.+2      	; 0x52a <find_volume+0x12e>
     528:	a0 c1       	rjmp	.+832    	; 0x86a <find_volume+0x46e>
     52a:	f8 01       	movw	r30, r16
     52c:	ec 5b       	subi	r30, 0xBC	; 188
     52e:	ff 4f       	sbci	r31, 0xFF	; 255
     530:	40 80       	ld	r4, Z
     532:	51 80       	ldd	r5, Z+1	; 0x01
     534:	61 2c       	mov	r6, r1
     536:	71 2c       	mov	r7, r1
     538:	41 14       	cp	r4, r1
     53a:	51 04       	cpc	r5, r1
     53c:	61 04       	cpc	r6, r1
     53e:	71 04       	cpc	r7, r1
     540:	29 f4       	brne	.+10     	; 0x54c <find_volume+0x150>
     542:	3e 96       	adiw	r30, 0x0e	; 14
     544:	40 80       	ld	r4, Z
     546:	51 80       	ldd	r5, Z+1	; 0x01
     548:	62 80       	ldd	r6, Z+2	; 0x02
     54a:	73 80       	ldd	r7, Z+3	; 0x03
     54c:	f8 01       	movw	r30, r16
     54e:	46 8a       	std	Z+22, r4	; 0x16
     550:	57 8a       	std	Z+23, r5	; 0x17
     552:	60 8e       	std	Z+24, r6	; 0x18
     554:	71 8e       	std	Z+25, r7	; 0x19
     556:	a6 ad       	ldd	r26, Z+62	; 0x3e
     558:	a3 83       	std	Z+3, r26	; 0x03
     55a:	8f ef       	ldi	r24, 0xFF	; 255
     55c:	8a 0f       	add	r24, r26
     55e:	82 30       	cpi	r24, 0x02	; 2
     560:	08 f0       	brcs	.+2      	; 0x564 <find_volume+0x168>
     562:	85 c1       	rjmp	.+778    	; 0x86e <find_volume+0x472>
     564:	f3 ad       	ldd	r31, Z+59	; 0x3b
     566:	f9 8b       	std	Y+17, r31	; 0x11
     568:	2f 2f       	mov	r18, r31
     56a:	f8 01       	movw	r30, r16
     56c:	22 83       	std	Z+2, r18	; 0x02
     56e:	22 23       	and	r18, r18
     570:	09 f4       	brne	.+2      	; 0x574 <find_volume+0x178>
     572:	7f c1       	rjmp	.+766    	; 0x872 <find_volume+0x476>
     574:	82 2f       	mov	r24, r18
     576:	90 e0       	ldi	r25, 0x00	; 0
     578:	9c 01       	movw	r18, r24
     57a:	21 50       	subi	r18, 0x01	; 1
     57c:	31 09       	sbc	r19, r1
     57e:	82 23       	and	r24, r18
     580:	93 23       	and	r25, r19
     582:	89 2b       	or	r24, r25
     584:	09 f0       	breq	.+2      	; 0x588 <find_volume+0x18c>
     586:	77 c1       	rjmp	.+750    	; 0x876 <find_volume+0x47a>
     588:	ff 96       	adiw	r30, 0x3f	; 63
     58a:	20 80       	ld	r2, Z
     58c:	31 80       	ldd	r3, Z+1	; 0x01
     58e:	f8 01       	movw	r30, r16
     590:	31 86       	std	Z+9, r3	; 0x09
     592:	20 86       	std	Z+8, r2	; 0x08
     594:	c1 01       	movw	r24, r2
     596:	8f 70       	andi	r24, 0x0F	; 15
     598:	99 27       	eor	r25, r25
     59a:	89 2b       	or	r24, r25
     59c:	09 f0       	breq	.+2      	; 0x5a0 <find_volume+0x1a4>
     59e:	6d c1       	rjmp	.+730    	; 0x87a <find_volume+0x47e>
     5a0:	ef 5b       	subi	r30, 0xBF	; 191
     5a2:	ff 4f       	sbci	r31, 0xFF	; 255
     5a4:	80 80       	ld	r8, Z
     5a6:	91 80       	ldd	r9, Z+1	; 0x01
     5a8:	a1 2c       	mov	r10, r1
     5aa:	b1 2c       	mov	r11, r1
     5ac:	81 14       	cp	r8, r1
     5ae:	91 04       	cpc	r9, r1
     5b0:	a1 04       	cpc	r10, r1
     5b2:	b1 04       	cpc	r11, r1
     5b4:	29 f4       	brne	.+10     	; 0x5c0 <find_volume+0x1c4>
     5b6:	3d 96       	adiw	r30, 0x0d	; 13
     5b8:	80 80       	ld	r8, Z
     5ba:	91 80       	ldd	r9, Z+1	; 0x01
     5bc:	a2 80       	ldd	r10, Z+2	; 0x02
     5be:	b3 80       	ldd	r11, Z+3	; 0x03
     5c0:	f8 01       	movw	r30, r16
     5c2:	04 ac       	ldd	r0, Z+60	; 0x3c
     5c4:	f5 ad       	ldd	r31, Z+61	; 0x3d
     5c6:	e0 2d       	mov	r30, r0
     5c8:	30 97       	sbiw	r30, 0x00	; 0
     5ca:	09 f4       	brne	.+2      	; 0x5ce <find_volume+0x1d2>
     5cc:	58 c1       	rjmp	.+688    	; 0x87e <find_volume+0x482>
     5ce:	b0 e0       	ldi	r27, 0x00	; 0
     5d0:	a3 01       	movw	r20, r6
     5d2:	92 01       	movw	r18, r4
     5d4:	0e 94 e8 14 	call	0x29d0	; 0x29d0 <__muluhisi3>
     5d8:	6a 8f       	std	Y+26, r22	; 0x1a
     5da:	7b 8f       	std	Y+27, r23	; 0x1b
     5dc:	8c 8f       	std	Y+28, r24	; 0x1c
     5de:	9d 8f       	std	Y+29, r25	; 0x1d
     5e0:	9f 01       	movw	r18, r30
     5e2:	40 e0       	ldi	r20, 0x00	; 0
     5e4:	50 e0       	ldi	r21, 0x00	; 0
     5e6:	2e 8b       	std	Y+22, r18	; 0x16
     5e8:	3f 8b       	std	Y+23, r19	; 0x17
     5ea:	48 8f       	std	Y+24, r20	; 0x18
     5ec:	59 8f       	std	Y+25, r21	; 0x19
     5ee:	c1 01       	movw	r24, r2
     5f0:	92 95       	swap	r25
     5f2:	82 95       	swap	r24
     5f4:	8f 70       	andi	r24, 0x0F	; 15
     5f6:	89 27       	eor	r24, r25
     5f8:	9f 70       	andi	r25, 0x0F	; 15
     5fa:	89 27       	eor	r24, r25
     5fc:	28 0f       	add	r18, r24
     5fe:	39 1f       	adc	r19, r25
     600:	41 1d       	adc	r20, r1
     602:	51 1d       	adc	r21, r1
     604:	da 01       	movw	r26, r20
     606:	c9 01       	movw	r24, r18
     608:	2a 8d       	ldd	r18, Y+26	; 0x1a
     60a:	3b 8d       	ldd	r19, Y+27	; 0x1b
     60c:	4c 8d       	ldd	r20, Y+28	; 0x1c
     60e:	5d 8d       	ldd	r21, Y+29	; 0x1d
     610:	28 0f       	add	r18, r24
     612:	39 1f       	adc	r19, r25
     614:	4a 1f       	adc	r20, r26
     616:	5b 1f       	adc	r21, r27
     618:	2a 8b       	std	Y+18, r18	; 0x12
     61a:	3b 8b       	std	Y+19, r19	; 0x13
     61c:	4c 8b       	std	Y+20, r20	; 0x14
     61e:	5d 8b       	std	Y+21, r21	; 0x15
     620:	82 16       	cp	r8, r18
     622:	93 06       	cpc	r9, r19
     624:	a4 06       	cpc	r10, r20
     626:	b5 06       	cpc	r11, r21
     628:	08 f4       	brcc	.+2      	; 0x62c <find_volume+0x230>
     62a:	2b c1       	rjmp	.+598    	; 0x882 <find_volume+0x486>
     62c:	c5 01       	movw	r24, r10
     62e:	b4 01       	movw	r22, r8
     630:	62 1b       	sub	r22, r18
     632:	73 0b       	sbc	r23, r19
     634:	84 0b       	sbc	r24, r20
     636:	95 0b       	sbc	r25, r21
     638:	e9 89       	ldd	r30, Y+17	; 0x11
     63a:	2e 2f       	mov	r18, r30
     63c:	30 e0       	ldi	r19, 0x00	; 0
     63e:	40 e0       	ldi	r20, 0x00	; 0
     640:	50 e0       	ldi	r21, 0x00	; 0
     642:	0e 94 c6 14 	call	0x298c	; 0x298c <__udivmodsi4>
     646:	da 01       	movw	r26, r20
     648:	c9 01       	movw	r24, r18
     64a:	21 15       	cp	r18, r1
     64c:	31 05       	cpc	r19, r1
     64e:	41 05       	cpc	r20, r1
     650:	51 05       	cpc	r21, r1
     652:	09 f4       	brne	.+2      	; 0x656 <find_volume+0x25a>
     654:	18 c1       	rjmp	.+560    	; 0x886 <find_volume+0x48a>
     656:	26 3f       	cpi	r18, 0xF6	; 246
     658:	ff e0       	ldi	r31, 0x0F	; 15
     65a:	3f 07       	cpc	r19, r31
     65c:	41 05       	cpc	r20, r1
     65e:	51 05       	cpc	r21, r1
     660:	18 f0       	brcs	.+6      	; 0x668 <find_volume+0x26c>
     662:	e2 e0       	ldi	r30, 0x02	; 2
     664:	e9 8b       	std	Y+17, r30	; 0x11
     666:	02 c0       	rjmp	.+4      	; 0x66c <find_volume+0x270>
     668:	f1 e0       	ldi	r31, 0x01	; 1
     66a:	f9 8b       	std	Y+17, r31	; 0x11
     66c:	86 3f       	cpi	r24, 0xF6	; 246
     66e:	9f 4f       	sbci	r25, 0xFF	; 255
     670:	a1 05       	cpc	r26, r1
     672:	b1 05       	cpc	r27, r1
     674:	08 f0       	brcs	.+2      	; 0x678 <find_volume+0x27c>
     676:	28 c1       	rjmp	.+592    	; 0x8c8 <find_volume+0x4cc>
     678:	49 01       	movw	r8, r18
     67a:	5a 01       	movw	r10, r20
     67c:	82 e0       	ldi	r24, 0x02	; 2
     67e:	88 0e       	add	r8, r24
     680:	91 1c       	adc	r9, r1
     682:	a1 1c       	adc	r10, r1
     684:	b1 1c       	adc	r11, r1
     686:	d8 01       	movw	r26, r16
     688:	52 96       	adiw	r26, 0x12	; 18
     68a:	8d 92       	st	X+, r8
     68c:	9d 92       	st	X+, r9
     68e:	ad 92       	st	X+, r10
     690:	bc 92       	st	X, r11
     692:	55 97       	sbiw	r26, 0x15	; 21
     694:	f8 01       	movw	r30, r16
     696:	c2 8e       	std	Z+26, r12	; 0x1a
     698:	d3 8e       	std	Z+27, r13	; 0x1b
     69a:	e4 8e       	std	Z+28, r14	; 0x1c
     69c:	f5 8e       	std	Z+29, r15	; 0x1d
     69e:	8e 89       	ldd	r24, Y+22	; 0x16
     6a0:	9f 89       	ldd	r25, Y+23	; 0x17
     6a2:	a8 8d       	ldd	r26, Y+24	; 0x18
     6a4:	b9 8d       	ldd	r27, Y+25	; 0x19
     6a6:	8c 0d       	add	r24, r12
     6a8:	9d 1d       	adc	r25, r13
     6aa:	ae 1d       	adc	r26, r14
     6ac:	bf 1d       	adc	r27, r15
     6ae:	86 8f       	std	Z+30, r24	; 0x1e
     6b0:	97 8f       	std	Z+31, r25	; 0x1f
     6b2:	a0 a3       	std	Z+32, r26	; 0x20
     6b4:	b1 a3       	std	Z+33, r27	; 0x21
     6b6:	4a 89       	ldd	r20, Y+18	; 0x12
     6b8:	5b 89       	ldd	r21, Y+19	; 0x13
     6ba:	6c 89       	ldd	r22, Y+20	; 0x14
     6bc:	7d 89       	ldd	r23, Y+21	; 0x15
     6be:	4c 0d       	add	r20, r12
     6c0:	5d 1d       	adc	r21, r13
     6c2:	6e 1d       	adc	r22, r14
     6c4:	7f 1d       	adc	r23, r15
     6c6:	46 a3       	std	Z+38, r20	; 0x26
     6c8:	57 a3       	std	Z+39, r21	; 0x27
     6ca:	60 a7       	std	Z+40, r22	; 0x28
     6cc:	71 a7       	std	Z+41, r23	; 0x29
     6ce:	f9 89       	ldd	r31, Y+17	; 0x11
     6d0:	f3 30       	cpi	r31, 0x03	; 3
     6d2:	69 f5       	brne	.+90     	; 0x72e <find_volume+0x332>
     6d4:	23 28       	or	r2, r3
     6d6:	09 f0       	breq	.+2      	; 0x6da <find_volume+0x2de>
     6d8:	d8 c0       	rjmp	.+432    	; 0x88a <find_volume+0x48e>
     6da:	f8 01       	movw	r30, r16
     6dc:	e6 5a       	subi	r30, 0xA6	; 166
     6de:	ff 4f       	sbci	r31, 0xFF	; 255
     6e0:	80 81       	ld	r24, Z
     6e2:	91 81       	ldd	r25, Z+1	; 0x01
     6e4:	a2 81       	ldd	r26, Z+2	; 0x02
     6e6:	b3 81       	ldd	r27, Z+3	; 0x03
     6e8:	f8 01       	movw	r30, r16
     6ea:	82 a3       	std	Z+34, r24	; 0x22
     6ec:	93 a3       	std	Z+35, r25	; 0x23
     6ee:	a4 a3       	std	Z+36, r26	; 0x24
     6f0:	b5 a3       	std	Z+37, r27	; 0x25
     6f2:	88 0c       	add	r8, r8
     6f4:	99 1c       	adc	r9, r9
     6f6:	aa 1c       	adc	r10, r10
     6f8:	bb 1c       	adc	r11, r11
     6fa:	88 0c       	add	r8, r8
     6fc:	99 1c       	adc	r9, r9
     6fe:	aa 1c       	adc	r10, r10
     700:	bb 1c       	adc	r11, r11
     702:	ff ef       	ldi	r31, 0xFF	; 255
     704:	8f 0e       	add	r8, r31
     706:	f1 e0       	ldi	r31, 0x01	; 1
     708:	9f 1e       	adc	r9, r31
     70a:	a1 1c       	adc	r10, r1
     70c:	b1 1c       	adc	r11, r1
     70e:	07 2e       	mov	r0, r23
     710:	79 e0       	ldi	r23, 0x09	; 9
     712:	b6 94       	lsr	r11
     714:	a7 94       	ror	r10
     716:	97 94       	ror	r9
     718:	87 94       	ror	r8
     71a:	7a 95       	dec	r23
     71c:	d1 f7       	brne	.-12     	; 0x712 <find_volume+0x316>
     71e:	70 2d       	mov	r23, r0
     720:	48 14       	cp	r4, r8
     722:	59 04       	cpc	r5, r9
     724:	6a 04       	cpc	r6, r10
     726:	7b 04       	cpc	r7, r11
     728:	08 f4       	brcc	.+2      	; 0x72c <find_volume+0x330>
     72a:	b1 c0       	rjmp	.+354    	; 0x88e <find_volume+0x492>
     72c:	f9 c0       	rjmp	.+498    	; 0x920 <find_volume+0x524>
     72e:	23 28       	or	r2, r3
     730:	09 f4       	brne	.+2      	; 0x734 <find_volume+0x338>
     732:	af c0       	rjmp	.+350    	; 0x892 <find_volume+0x496>
     734:	2a 8d       	ldd	r18, Y+26	; 0x1a
     736:	3b 8d       	ldd	r19, Y+27	; 0x1b
     738:	4c 8d       	ldd	r20, Y+28	; 0x1c
     73a:	5d 8d       	ldd	r21, Y+29	; 0x1d
     73c:	82 0f       	add	r24, r18
     73e:	93 1f       	adc	r25, r19
     740:	a4 1f       	adc	r26, r20
     742:	b5 1f       	adc	r27, r21
     744:	f8 01       	movw	r30, r16
     746:	82 a3       	std	Z+34, r24	; 0x22
     748:	93 a3       	std	Z+35, r25	; 0x23
     74a:	a4 a3       	std	Z+36, r26	; 0x24
     74c:	b5 a3       	std	Z+37, r27	; 0x25
     74e:	f9 89       	ldd	r31, Y+17	; 0x11
     750:	f2 30       	cpi	r31, 0x02	; 2
     752:	29 f4       	brne	.+10     	; 0x75e <find_volume+0x362>
     754:	88 0c       	add	r8, r8
     756:	99 1c       	adc	r9, r9
     758:	aa 1c       	adc	r10, r10
     75a:	bb 1c       	adc	r11, r11
     75c:	08 c1       	rjmp	.+528    	; 0x96e <find_volume+0x572>
     75e:	a3 e0       	ldi	r26, 0x03	; 3
     760:	b0 e0       	ldi	r27, 0x00	; 0
     762:	a5 01       	movw	r20, r10
     764:	94 01       	movw	r18, r8
     766:	0e 94 e8 14 	call	0x29d0	; 0x29d0 <__muluhisi3>
     76a:	dc 01       	movw	r26, r24
     76c:	cb 01       	movw	r24, r22
     76e:	b6 95       	lsr	r27
     770:	a7 95       	ror	r26
     772:	97 95       	ror	r25
     774:	87 95       	ror	r24
     776:	21 e0       	ldi	r18, 0x01	; 1
     778:	82 22       	and	r8, r18
     77a:	99 24       	eor	r9, r9
     77c:	aa 24       	eor	r10, r10
     77e:	bb 24       	eor	r11, r11
     780:	88 0e       	add	r8, r24
     782:	99 1e       	adc	r9, r25
     784:	aa 1e       	adc	r10, r26
     786:	bb 1e       	adc	r11, r27
     788:	f2 c0       	rjmp	.+484    	; 0x96e <find_volume+0x572>
     78a:	b7 01       	movw	r22, r14
     78c:	a6 01       	movw	r20, r12
     78e:	4f 5f       	subi	r20, 0xFF	; 255
     790:	5f 4f       	sbci	r21, 0xFF	; 255
     792:	6f 4f       	sbci	r22, 0xFF	; 255
     794:	7f 4f       	sbci	r23, 0xFF	; 255
     796:	c8 01       	movw	r24, r16
     798:	95 dd       	rcall	.-1238   	; 0x2c4 <move_window>
     79a:	81 11       	cpse	r24, r1
     79c:	39 c0       	rjmp	.+114    	; 0x810 <find_volume+0x414>
     79e:	d8 01       	movw	r26, r16
     7a0:	15 96       	adiw	r26, 0x05	; 5
     7a2:	1c 92       	st	X, r1
     7a4:	f8 01       	movw	r30, r16
     7a6:	e4 5d       	subi	r30, 0xD4	; 212
     7a8:	fd 4f       	sbci	r31, 0xFD	; 253
     7aa:	80 81       	ld	r24, Z
     7ac:	91 81       	ldd	r25, Z+1	; 0x01
     7ae:	85 35       	cpi	r24, 0x55	; 85
     7b0:	9a 4a       	sbci	r25, 0xAA	; 170
     7b2:	89 f5       	brne	.+98     	; 0x816 <find_volume+0x41a>
     7b4:	f8 01       	movw	r30, r16
     7b6:	86 a5       	ldd	r24, Z+46	; 0x2e
     7b8:	97 a5       	ldd	r25, Z+47	; 0x2f
     7ba:	a0 a9       	ldd	r26, Z+48	; 0x30
     7bc:	b1 a9       	ldd	r27, Z+49	; 0x31
     7be:	82 35       	cpi	r24, 0x52	; 82
     7c0:	92 45       	sbci	r25, 0x52	; 82
     7c2:	a1 46       	sbci	r26, 0x61	; 97
     7c4:	b1 44       	sbci	r27, 0x41	; 65
     7c6:	51 f5       	brne	.+84     	; 0x81c <find_volume+0x420>
     7c8:	f8 01       	movw	r30, r16
     7ca:	ee 5e       	subi	r30, 0xEE	; 238
     7cc:	fd 4f       	sbci	r31, 0xFD	; 253
     7ce:	80 81       	ld	r24, Z
     7d0:	91 81       	ldd	r25, Z+1	; 0x01
     7d2:	a2 81       	ldd	r26, Z+2	; 0x02
     7d4:	b3 81       	ldd	r27, Z+3	; 0x03
     7d6:	82 37       	cpi	r24, 0x72	; 114
     7d8:	92 47       	sbci	r25, 0x72	; 114
     7da:	a1 44       	sbci	r26, 0x41	; 65
     7dc:	b1 46       	sbci	r27, 0x61	; 97
     7de:	09 f5       	brne	.+66     	; 0x822 <find_volume+0x426>
     7e0:	34 96       	adiw	r30, 0x04	; 4
     7e2:	80 81       	ld	r24, Z
     7e4:	91 81       	ldd	r25, Z+1	; 0x01
     7e6:	a2 81       	ldd	r26, Z+2	; 0x02
     7e8:	b3 81       	ldd	r27, Z+3	; 0x03
     7ea:	f8 01       	movw	r30, r16
     7ec:	86 87       	std	Z+14, r24	; 0x0e
     7ee:	97 87       	std	Z+15, r25	; 0x0f
     7f0:	a0 8b       	std	Z+16, r26	; 0x10
     7f2:	b1 8b       	std	Z+17, r27	; 0x11
     7f4:	e6 5e       	subi	r30, 0xE6	; 230
     7f6:	fd 4f       	sbci	r31, 0xFD	; 253
     7f8:	80 81       	ld	r24, Z
     7fa:	91 81       	ldd	r25, Z+1	; 0x01
     7fc:	a2 81       	ldd	r26, Z+2	; 0x02
     7fe:	b3 81       	ldd	r27, Z+3	; 0x03
     800:	f8 01       	movw	r30, r16
     802:	82 87       	std	Z+10, r24	; 0x0a
     804:	93 87       	std	Z+11, r25	; 0x0b
     806:	a4 87       	std	Z+12, r26	; 0x0c
     808:	b5 87       	std	Z+13, r27	; 0x0d
     80a:	f3 e0       	ldi	r31, 0x03	; 3
     80c:	f9 8b       	std	Y+17, r31	; 0x11
     80e:	0b c0       	rjmp	.+22     	; 0x826 <find_volume+0x42a>
     810:	e3 e0       	ldi	r30, 0x03	; 3
     812:	e9 8b       	std	Y+17, r30	; 0x11
     814:	08 c0       	rjmp	.+16     	; 0x826 <find_volume+0x42a>
     816:	f3 e0       	ldi	r31, 0x03	; 3
     818:	f9 8b       	std	Y+17, r31	; 0x11
     81a:	05 c0       	rjmp	.+10     	; 0x826 <find_volume+0x42a>
     81c:	e3 e0       	ldi	r30, 0x03	; 3
     81e:	e9 8b       	std	Y+17, r30	; 0x11
     820:	02 c0       	rjmp	.+4      	; 0x826 <find_volume+0x42a>
     822:	f3 e0       	ldi	r31, 0x03	; 3
     824:	f9 8b       	std	Y+17, r31	; 0x11
     826:	e9 89       	ldd	r30, Y+17	; 0x11
     828:	d8 01       	movw	r26, r16
     82a:	ec 93       	st	X, r30
     82c:	80 91 2e 02 	lds	r24, 0x022E
     830:	90 91 2f 02 	lds	r25, 0x022F
     834:	01 96       	adiw	r24, 0x01	; 1
     836:	90 93 2f 02 	sts	0x022F, r25
     83a:	80 93 2e 02 	sts	0x022E, r24
     83e:	17 96       	adiw	r26, 0x07	; 7
     840:	9c 93       	st	X, r25
     842:	8e 93       	st	-X, r24
     844:	16 97       	sbiw	r26, 0x06	; 6
     846:	80 e0       	ldi	r24, 0x00	; 0
     848:	a8 c0       	rjmp	.+336    	; 0x99a <find_volume+0x59e>
     84a:	8b e0       	ldi	r24, 0x0B	; 11
     84c:	a6 c0       	rjmp	.+332    	; 0x99a <find_volume+0x59e>
     84e:	8c e0       	ldi	r24, 0x0C	; 12
     850:	a4 c0       	rjmp	.+328    	; 0x99a <find_volume+0x59e>
     852:	80 e0       	ldi	r24, 0x00	; 0
     854:	a2 c0       	rjmp	.+324    	; 0x99a <find_volume+0x59e>
     856:	80 e0       	ldi	r24, 0x00	; 0
     858:	a0 c0       	rjmp	.+320    	; 0x99a <find_volume+0x59e>
     85a:	83 e0       	ldi	r24, 0x03	; 3
     85c:	9e c0       	rjmp	.+316    	; 0x99a <find_volume+0x59e>
     85e:	8a e0       	ldi	r24, 0x0A	; 10
     860:	9c c0       	rjmp	.+312    	; 0x99a <find_volume+0x59e>
     862:	81 e0       	ldi	r24, 0x01	; 1
     864:	9a c0       	rjmp	.+308    	; 0x99a <find_volume+0x59e>
     866:	8d e0       	ldi	r24, 0x0D	; 13
     868:	98 c0       	rjmp	.+304    	; 0x99a <find_volume+0x59e>
     86a:	8d e0       	ldi	r24, 0x0D	; 13
     86c:	96 c0       	rjmp	.+300    	; 0x99a <find_volume+0x59e>
     86e:	8d e0       	ldi	r24, 0x0D	; 13
     870:	94 c0       	rjmp	.+296    	; 0x99a <find_volume+0x59e>
     872:	8d e0       	ldi	r24, 0x0D	; 13
     874:	92 c0       	rjmp	.+292    	; 0x99a <find_volume+0x59e>
     876:	8d e0       	ldi	r24, 0x0D	; 13
     878:	90 c0       	rjmp	.+288    	; 0x99a <find_volume+0x59e>
     87a:	8d e0       	ldi	r24, 0x0D	; 13
     87c:	8e c0       	rjmp	.+284    	; 0x99a <find_volume+0x59e>
     87e:	8d e0       	ldi	r24, 0x0D	; 13
     880:	8c c0       	rjmp	.+280    	; 0x99a <find_volume+0x59e>
     882:	8d e0       	ldi	r24, 0x0D	; 13
     884:	8a c0       	rjmp	.+276    	; 0x99a <find_volume+0x59e>
     886:	8d e0       	ldi	r24, 0x0D	; 13
     888:	88 c0       	rjmp	.+272    	; 0x99a <find_volume+0x59e>
     88a:	8d e0       	ldi	r24, 0x0D	; 13
     88c:	86 c0       	rjmp	.+268    	; 0x99a <find_volume+0x59e>
     88e:	8d e0       	ldi	r24, 0x0D	; 13
     890:	84 c0       	rjmp	.+264    	; 0x99a <find_volume+0x59e>
     892:	8d e0       	ldi	r24, 0x0D	; 13
     894:	82 c0       	rjmp	.+260    	; 0x99a <find_volume+0x59e>
     896:	8d e0       	ldi	r24, 0x0D	; 13
     898:	80 c0       	rjmp	.+256    	; 0x99a <find_volume+0x59e>
     89a:	40 e0       	ldi	r20, 0x00	; 0
     89c:	50 e0       	ldi	r21, 0x00	; 0
     89e:	ba 01       	movw	r22, r20
     8a0:	c8 01       	movw	r24, r16
     8a2:	4d dd       	rcall	.-1382   	; 0x33e <check_fs>
     8a4:	81 30       	cpi	r24, 0x01	; 1
     8a6:	09 f0       	breq	.+2      	; 0x8aa <find_volume+0x4ae>
     8a8:	2f ce       	rjmp	.-930    	; 0x508 <find_volume+0x10c>
     8aa:	f8 01       	movw	r30, r16
     8ac:	e0 51       	subi	r30, 0x10	; 16
     8ae:	fe 4f       	sbci	r31, 0xFE	; 254
     8b0:	9e 01       	movw	r18, r28
     8b2:	2f 5f       	subi	r18, 0xFF	; 255
     8b4:	3f 4f       	sbci	r19, 0xFF	; 255
     8b6:	59 01       	movw	r10, r18
     8b8:	a8 01       	movw	r20, r16
     8ba:	40 5d       	subi	r20, 0xD0	; 208
     8bc:	5d 4f       	sbci	r21, 0xFD	; 253
     8be:	e1 2c       	mov	r14, r1
     8c0:	f1 2c       	mov	r15, r1
     8c2:	70 e0       	ldi	r23, 0x00	; 0
     8c4:	60 e0       	ldi	r22, 0x00	; 0
     8c6:	ec cd       	rjmp	.-1064   	; 0x4a0 <find_volume+0xa4>
     8c8:	49 01       	movw	r8, r18
     8ca:	5a 01       	movw	r10, r20
     8cc:	62 e0       	ldi	r22, 0x02	; 2
     8ce:	86 0e       	add	r8, r22
     8d0:	91 1c       	adc	r9, r1
     8d2:	a1 1c       	adc	r10, r1
     8d4:	b1 1c       	adc	r11, r1
     8d6:	d8 01       	movw	r26, r16
     8d8:	52 96       	adiw	r26, 0x12	; 18
     8da:	8d 92       	st	X+, r8
     8dc:	9d 92       	st	X+, r9
     8de:	ad 92       	st	X+, r10
     8e0:	bc 92       	st	X, r11
     8e2:	55 97       	sbiw	r26, 0x15	; 21
     8e4:	f8 01       	movw	r30, r16
     8e6:	c2 8e       	std	Z+26, r12	; 0x1a
     8e8:	d3 8e       	std	Z+27, r13	; 0x1b
     8ea:	e4 8e       	std	Z+28, r14	; 0x1c
     8ec:	f5 8e       	std	Z+29, r15	; 0x1d
     8ee:	8e 89       	ldd	r24, Y+22	; 0x16
     8f0:	9f 89       	ldd	r25, Y+23	; 0x17
     8f2:	a8 8d       	ldd	r26, Y+24	; 0x18
     8f4:	b9 8d       	ldd	r27, Y+25	; 0x19
     8f6:	8c 0d       	add	r24, r12
     8f8:	9d 1d       	adc	r25, r13
     8fa:	ae 1d       	adc	r26, r14
     8fc:	bf 1d       	adc	r27, r15
     8fe:	86 8f       	std	Z+30, r24	; 0x1e
     900:	97 8f       	std	Z+31, r25	; 0x1f
     902:	a0 a3       	std	Z+32, r26	; 0x20
     904:	b1 a3       	std	Z+33, r27	; 0x21
     906:	8a 89       	ldd	r24, Y+18	; 0x12
     908:	9b 89       	ldd	r25, Y+19	; 0x13
     90a:	ac 89       	ldd	r26, Y+20	; 0x14
     90c:	bd 89       	ldd	r27, Y+21	; 0x15
     90e:	8c 0d       	add	r24, r12
     910:	9d 1d       	adc	r25, r13
     912:	ae 1d       	adc	r26, r14
     914:	bf 1d       	adc	r27, r15
     916:	86 a3       	std	Z+38, r24	; 0x26
     918:	97 a3       	std	Z+39, r25	; 0x27
     91a:	a0 a7       	std	Z+40, r26	; 0x28
     91c:	b1 a7       	std	Z+41, r27	; 0x29
     91e:	da ce       	rjmp	.-588    	; 0x6d4 <find_volume+0x2d8>
     920:	8f ef       	ldi	r24, 0xFF	; 255
     922:	9f ef       	ldi	r25, 0xFF	; 255
     924:	dc 01       	movw	r26, r24
     926:	f8 01       	movw	r30, r16
     928:	86 87       	std	Z+14, r24	; 0x0e
     92a:	97 87       	std	Z+15, r25	; 0x0f
     92c:	a0 8b       	std	Z+16, r26	; 0x10
     92e:	b1 8b       	std	Z+17, r27	; 0x11
     930:	82 87       	std	Z+10, r24	; 0x0a
     932:	93 87       	std	Z+11, r25	; 0x0b
     934:	a4 87       	std	Z+12, r26	; 0x0c
     936:	b5 87       	std	Z+13, r27	; 0x0d
     938:	80 e8       	ldi	r24, 0x80	; 128
     93a:	85 83       	std	Z+5, r24	; 0x05
     93c:	e2 5a       	subi	r30, 0xA2	; 162
     93e:	ff 4f       	sbci	r31, 0xFF	; 255
     940:	80 81       	ld	r24, Z
     942:	91 81       	ldd	r25, Z+1	; 0x01
     944:	01 97       	sbiw	r24, 0x01	; 1
     946:	09 f4       	brne	.+2      	; 0x94a <find_volume+0x54e>
     948:	20 cf       	rjmp	.-448    	; 0x78a <find_volume+0x38e>
     94a:	f3 e0       	ldi	r31, 0x03	; 3
     94c:	f9 8b       	std	Y+17, r31	; 0x11
     94e:	6b cf       	rjmp	.-298    	; 0x826 <find_volume+0x42a>
     950:	8f ef       	ldi	r24, 0xFF	; 255
     952:	9f ef       	ldi	r25, 0xFF	; 255
     954:	dc 01       	movw	r26, r24
     956:	f8 01       	movw	r30, r16
     958:	86 87       	std	Z+14, r24	; 0x0e
     95a:	97 87       	std	Z+15, r25	; 0x0f
     95c:	a0 8b       	std	Z+16, r26	; 0x10
     95e:	b1 8b       	std	Z+17, r27	; 0x11
     960:	82 87       	std	Z+10, r24	; 0x0a
     962:	93 87       	std	Z+11, r25	; 0x0b
     964:	a4 87       	std	Z+12, r26	; 0x0c
     966:	b5 87       	std	Z+13, r27	; 0x0d
     968:	80 e8       	ldi	r24, 0x80	; 128
     96a:	85 83       	std	Z+5, r24	; 0x05
     96c:	5c cf       	rjmp	.-328    	; 0x826 <find_volume+0x42a>
     96e:	ff ef       	ldi	r31, 0xFF	; 255
     970:	8f 0e       	add	r8, r31
     972:	f1 e0       	ldi	r31, 0x01	; 1
     974:	9f 1e       	adc	r9, r31
     976:	a1 1c       	adc	r10, r1
     978:	b1 1c       	adc	r11, r1
     97a:	07 2e       	mov	r0, r23
     97c:	79 e0       	ldi	r23, 0x09	; 9
     97e:	b6 94       	lsr	r11
     980:	a7 94       	ror	r10
     982:	97 94       	ror	r9
     984:	87 94       	ror	r8
     986:	7a 95       	dec	r23
     988:	d1 f7       	brne	.-12     	; 0x97e <find_volume+0x582>
     98a:	70 2d       	mov	r23, r0
     98c:	48 14       	cp	r4, r8
     98e:	59 04       	cpc	r5, r9
     990:	6a 04       	cpc	r6, r10
     992:	7b 04       	cpc	r7, r11
     994:	08 f4       	brcc	.+2      	; 0x998 <find_volume+0x59c>
     996:	7f cf       	rjmp	.-258    	; 0x896 <find_volume+0x49a>
     998:	db cf       	rjmp	.-74     	; 0x950 <find_volume+0x554>
     99a:	6d 96       	adiw	r28, 0x1d	; 29
     99c:	0f b6       	in	r0, 0x3f	; 63
     99e:	f8 94       	cli
     9a0:	de bf       	out	0x3e, r29	; 62
     9a2:	0f be       	out	0x3f, r0	; 63
     9a4:	cd bf       	out	0x3d, r28	; 61
     9a6:	df 91       	pop	r29
     9a8:	cf 91       	pop	r28
     9aa:	1f 91       	pop	r17
     9ac:	0f 91       	pop	r16
     9ae:	ff 90       	pop	r15
     9b0:	ef 90       	pop	r14
     9b2:	df 90       	pop	r13
     9b4:	cf 90       	pop	r12
     9b6:	bf 90       	pop	r11
     9b8:	af 90       	pop	r10
     9ba:	9f 90       	pop	r9
     9bc:	8f 90       	pop	r8
     9be:	7f 90       	pop	r7
     9c0:	6f 90       	pop	r6
     9c2:	5f 90       	pop	r5
     9c4:	4f 90       	pop	r4
     9c6:	3f 90       	pop	r3
     9c8:	2f 90       	pop	r2
     9ca:	08 95       	ret

000009cc <clust2sect>:
     9cc:	cf 92       	push	r12
     9ce:	df 92       	push	r13
     9d0:	ef 92       	push	r14
     9d2:	ff 92       	push	r15
     9d4:	fc 01       	movw	r30, r24
     9d6:	9a 01       	movw	r18, r20
     9d8:	ab 01       	movw	r20, r22
     9da:	22 50       	subi	r18, 0x02	; 2
     9dc:	31 09       	sbc	r19, r1
     9de:	41 09       	sbc	r20, r1
     9e0:	51 09       	sbc	r21, r1
     9e2:	c2 88       	ldd	r12, Z+18	; 0x12
     9e4:	d3 88       	ldd	r13, Z+19	; 0x13
     9e6:	e4 88       	ldd	r14, Z+20	; 0x14
     9e8:	f5 88       	ldd	r15, Z+21	; 0x15
     9ea:	82 e0       	ldi	r24, 0x02	; 2
     9ec:	c8 1a       	sub	r12, r24
     9ee:	d1 08       	sbc	r13, r1
     9f0:	e1 08       	sbc	r14, r1
     9f2:	f1 08       	sbc	r15, r1
     9f4:	2c 15       	cp	r18, r12
     9f6:	3d 05       	cpc	r19, r13
     9f8:	4e 05       	cpc	r20, r14
     9fa:	5f 05       	cpc	r21, r15
     9fc:	68 f4       	brcc	.+26     	; 0xa18 <clust2sect+0x4c>
     9fe:	a2 81       	ldd	r26, Z+2	; 0x02
     a00:	b0 e0       	ldi	r27, 0x00	; 0
     a02:	0e 94 e8 14 	call	0x29d0	; 0x29d0 <__muluhisi3>
     a06:	c6 a0       	ldd	r12, Z+38	; 0x26
     a08:	d7 a0       	ldd	r13, Z+39	; 0x27
     a0a:	e0 a4       	ldd	r14, Z+40	; 0x28
     a0c:	f1 a4       	ldd	r15, Z+41	; 0x29
     a0e:	6c 0d       	add	r22, r12
     a10:	7d 1d       	adc	r23, r13
     a12:	8e 1d       	adc	r24, r14
     a14:	9f 1d       	adc	r25, r15
     a16:	03 c0       	rjmp	.+6      	; 0xa1e <clust2sect+0x52>
     a18:	60 e0       	ldi	r22, 0x00	; 0
     a1a:	70 e0       	ldi	r23, 0x00	; 0
     a1c:	cb 01       	movw	r24, r22
     a1e:	ff 90       	pop	r15
     a20:	ef 90       	pop	r14
     a22:	df 90       	pop	r13
     a24:	cf 90       	pop	r12
     a26:	08 95       	ret

00000a28 <get_fat>:
     a28:	af 92       	push	r10
     a2a:	bf 92       	push	r11
     a2c:	cf 92       	push	r12
     a2e:	df 92       	push	r13
     a30:	ef 92       	push	r14
     a32:	ff 92       	push	r15
     a34:	0f 93       	push	r16
     a36:	1f 93       	push	r17
     a38:	cf 93       	push	r28
     a3a:	df 93       	push	r29
     a3c:	ec 01       	movw	r28, r24
     a3e:	6a 01       	movw	r12, r20
     a40:	7b 01       	movw	r14, r22
     a42:	42 30       	cpi	r20, 0x02	; 2
     a44:	51 05       	cpc	r21, r1
     a46:	61 05       	cpc	r22, r1
     a48:	71 05       	cpc	r23, r1
     a4a:	08 f4       	brcc	.+2      	; 0xa4e <get_fat+0x26>
     a4c:	a7 c0       	rjmp	.+334    	; 0xb9c <get_fat+0x174>
     a4e:	8a 89       	ldd	r24, Y+18	; 0x12
     a50:	9b 89       	ldd	r25, Y+19	; 0x13
     a52:	ac 89       	ldd	r26, Y+20	; 0x14
     a54:	bd 89       	ldd	r27, Y+21	; 0x15
     a56:	48 17       	cp	r20, r24
     a58:	59 07       	cpc	r21, r25
     a5a:	6a 07       	cpc	r22, r26
     a5c:	7b 07       	cpc	r23, r27
     a5e:	08 f0       	brcs	.+2      	; 0xa62 <get_fat+0x3a>
     a60:	a2 c0       	rjmp	.+324    	; 0xba6 <get_fat+0x17e>
     a62:	88 81       	ld	r24, Y
     a64:	82 30       	cpi	r24, 0x02	; 2
     a66:	09 f4       	brne	.+2      	; 0xa6a <get_fat+0x42>
     a68:	4b c0       	rjmp	.+150    	; 0xb00 <get_fat+0xd8>
     a6a:	83 30       	cpi	r24, 0x03	; 3
     a6c:	09 f4       	brne	.+2      	; 0xa70 <get_fat+0x48>
     a6e:	69 c0       	rjmp	.+210    	; 0xb42 <get_fat+0x11a>
     a70:	81 30       	cpi	r24, 0x01	; 1
     a72:	09 f0       	breq	.+2      	; 0xa76 <get_fat+0x4e>
     a74:	9d c0       	rjmp	.+314    	; 0xbb0 <get_fat+0x188>
     a76:	8a 01       	movw	r16, r20
     a78:	16 95       	lsr	r17
     a7a:	07 95       	ror	r16
     a7c:	04 0f       	add	r16, r20
     a7e:	15 1f       	adc	r17, r21
     a80:	c8 01       	movw	r24, r16
     a82:	89 2f       	mov	r24, r25
     a84:	99 27       	eor	r25, r25
     a86:	86 95       	lsr	r24
     a88:	4e 8d       	ldd	r20, Y+30	; 0x1e
     a8a:	5f 8d       	ldd	r21, Y+31	; 0x1f
     a8c:	68 a1       	ldd	r22, Y+32	; 0x20
     a8e:	79 a1       	ldd	r23, Y+33	; 0x21
     a90:	48 0f       	add	r20, r24
     a92:	59 1f       	adc	r21, r25
     a94:	61 1d       	adc	r22, r1
     a96:	71 1d       	adc	r23, r1
     a98:	ce 01       	movw	r24, r28
     a9a:	14 dc       	rcall	.-2008   	; 0x2c4 <move_window>
     a9c:	81 11       	cpse	r24, r1
     a9e:	8d c0       	rjmp	.+282    	; 0xbba <get_fat+0x192>
     aa0:	58 01       	movw	r10, r16
     aa2:	8f ef       	ldi	r24, 0xFF	; 255
     aa4:	a8 1a       	sub	r10, r24
     aa6:	b8 0a       	sbc	r11, r24
     aa8:	11 70       	andi	r17, 0x01	; 1
     aaa:	fe 01       	movw	r30, r28
     aac:	e0 0f       	add	r30, r16
     aae:	f1 1f       	adc	r31, r17
     ab0:	16 a5       	ldd	r17, Z+46	; 0x2e
     ab2:	c5 01       	movw	r24, r10
     ab4:	89 2f       	mov	r24, r25
     ab6:	99 27       	eor	r25, r25
     ab8:	86 95       	lsr	r24
     aba:	4e 8d       	ldd	r20, Y+30	; 0x1e
     abc:	5f 8d       	ldd	r21, Y+31	; 0x1f
     abe:	68 a1       	ldd	r22, Y+32	; 0x20
     ac0:	79 a1       	ldd	r23, Y+33	; 0x21
     ac2:	48 0f       	add	r20, r24
     ac4:	59 1f       	adc	r21, r25
     ac6:	61 1d       	adc	r22, r1
     ac8:	71 1d       	adc	r23, r1
     aca:	ce 01       	movw	r24, r28
     acc:	fb db       	rcall	.-2058   	; 0x2c4 <move_window>
     ace:	81 11       	cpse	r24, r1
     ad0:	78 c0       	rjmp	.+240    	; 0xbc2 <get_fat+0x19a>
     ad2:	81 e0       	ldi	r24, 0x01	; 1
     ad4:	b8 22       	and	r11, r24
     ad6:	ca 0d       	add	r28, r10
     ad8:	db 1d       	adc	r29, r11
     ada:	8e a5       	ldd	r24, Y+46	; 0x2e
     adc:	61 2f       	mov	r22, r17
     ade:	70 e0       	ldi	r23, 0x00	; 0
     ae0:	78 2b       	or	r23, r24
     ae2:	c0 fe       	sbrs	r12, 0
     ae4:	09 c0       	rjmp	.+18     	; 0xaf8 <get_fat+0xd0>
     ae6:	72 95       	swap	r23
     ae8:	62 95       	swap	r22
     aea:	6f 70       	andi	r22, 0x0F	; 15
     aec:	67 27       	eor	r22, r23
     aee:	7f 70       	andi	r23, 0x0F	; 15
     af0:	67 27       	eor	r22, r23
     af2:	80 e0       	ldi	r24, 0x00	; 0
     af4:	90 e0       	ldi	r25, 0x00	; 0
     af6:	70 c0       	rjmp	.+224    	; 0xbd8 <get_fat+0x1b0>
     af8:	7f 70       	andi	r23, 0x0F	; 15
     afa:	80 e0       	ldi	r24, 0x00	; 0
     afc:	90 e0       	ldi	r25, 0x00	; 0
     afe:	6c c0       	rjmp	.+216    	; 0xbd8 <get_fat+0x1b0>
     b00:	45 2f       	mov	r20, r21
     b02:	56 2f       	mov	r21, r22
     b04:	67 2f       	mov	r22, r23
     b06:	77 27       	eor	r23, r23
     b08:	8e 8d       	ldd	r24, Y+30	; 0x1e
     b0a:	9f 8d       	ldd	r25, Y+31	; 0x1f
     b0c:	a8 a1       	ldd	r26, Y+32	; 0x20
     b0e:	b9 a1       	ldd	r27, Y+33	; 0x21
     b10:	48 0f       	add	r20, r24
     b12:	59 1f       	adc	r21, r25
     b14:	6a 1f       	adc	r22, r26
     b16:	7b 1f       	adc	r23, r27
     b18:	ce 01       	movw	r24, r28
     b1a:	d4 db       	rcall	.-2136   	; 0x2c4 <move_window>
     b1c:	81 11       	cpse	r24, r1
     b1e:	55 c0       	rjmp	.+170    	; 0xbca <get_fat+0x1a2>
     b20:	cc 0c       	add	r12, r12
     b22:	dd 1c       	adc	r13, r13
     b24:	ee 1c       	adc	r14, r14
     b26:	ff 1c       	adc	r15, r15
     b28:	e8 94       	clt
     b2a:	c0 f8       	bld	r12, 0
     b2c:	81 e0       	ldi	r24, 0x01	; 1
     b2e:	d8 22       	and	r13, r24
     b30:	ee 24       	eor	r14, r14
     b32:	ff 24       	eor	r15, r15
     b34:	cc 0d       	add	r28, r12
     b36:	dd 1d       	adc	r29, r13
     b38:	6e a5       	ldd	r22, Y+46	; 0x2e
     b3a:	7f a5       	ldd	r23, Y+47	; 0x2f
     b3c:	80 e0       	ldi	r24, 0x00	; 0
     b3e:	90 e0       	ldi	r25, 0x00	; 0
     b40:	4b c0       	rjmp	.+150    	; 0xbd8 <get_fat+0x1b0>
     b42:	8e 8d       	ldd	r24, Y+30	; 0x1e
     b44:	9f 8d       	ldd	r25, Y+31	; 0x1f
     b46:	a8 a1       	ldd	r26, Y+32	; 0x20
     b48:	b9 a1       	ldd	r27, Y+33	; 0x21
     b4a:	68 94       	set
     b4c:	16 f8       	bld	r1, 6
     b4e:	76 95       	lsr	r23
     b50:	67 95       	ror	r22
     b52:	57 95       	ror	r21
     b54:	47 95       	ror	r20
     b56:	16 94       	lsr	r1
     b58:	d1 f7       	brne	.-12     	; 0xb4e <get_fat+0x126>
     b5a:	48 0f       	add	r20, r24
     b5c:	59 1f       	adc	r21, r25
     b5e:	6a 1f       	adc	r22, r26
     b60:	7b 1f       	adc	r23, r27
     b62:	ce 01       	movw	r24, r28
     b64:	af db       	rcall	.-2210   	; 0x2c4 <move_window>
     b66:	81 11       	cpse	r24, r1
     b68:	34 c0       	rjmp	.+104    	; 0xbd2 <get_fat+0x1aa>
     b6a:	cc 0c       	add	r12, r12
     b6c:	dd 1c       	adc	r13, r13
     b6e:	ee 1c       	adc	r14, r14
     b70:	ff 1c       	adc	r15, r15
     b72:	cc 0c       	add	r12, r12
     b74:	dd 1c       	adc	r13, r13
     b76:	ee 1c       	adc	r14, r14
     b78:	ff 1c       	adc	r15, r15
     b7a:	8c ef       	ldi	r24, 0xFC	; 252
     b7c:	c8 22       	and	r12, r24
     b7e:	81 e0       	ldi	r24, 0x01	; 1
     b80:	d8 22       	and	r13, r24
     b82:	ee 24       	eor	r14, r14
     b84:	ff 24       	eor	r15, r15
     b86:	fe 01       	movw	r30, r28
     b88:	ec 0d       	add	r30, r12
     b8a:	fd 1d       	adc	r31, r13
     b8c:	86 a5       	ldd	r24, Z+46	; 0x2e
     b8e:	97 a5       	ldd	r25, Z+47	; 0x2f
     b90:	a0 a9       	ldd	r26, Z+48	; 0x30
     b92:	b1 a9       	ldd	r27, Z+49	; 0x31
     b94:	bc 01       	movw	r22, r24
     b96:	cd 01       	movw	r24, r26
     b98:	9f 70       	andi	r25, 0x0F	; 15
     b9a:	1e c0       	rjmp	.+60     	; 0xbd8 <get_fat+0x1b0>
     b9c:	61 e0       	ldi	r22, 0x01	; 1
     b9e:	70 e0       	ldi	r23, 0x00	; 0
     ba0:	80 e0       	ldi	r24, 0x00	; 0
     ba2:	90 e0       	ldi	r25, 0x00	; 0
     ba4:	19 c0       	rjmp	.+50     	; 0xbd8 <get_fat+0x1b0>
     ba6:	61 e0       	ldi	r22, 0x01	; 1
     ba8:	70 e0       	ldi	r23, 0x00	; 0
     baa:	80 e0       	ldi	r24, 0x00	; 0
     bac:	90 e0       	ldi	r25, 0x00	; 0
     bae:	14 c0       	rjmp	.+40     	; 0xbd8 <get_fat+0x1b0>
     bb0:	61 e0       	ldi	r22, 0x01	; 1
     bb2:	70 e0       	ldi	r23, 0x00	; 0
     bb4:	80 e0       	ldi	r24, 0x00	; 0
     bb6:	90 e0       	ldi	r25, 0x00	; 0
     bb8:	0f c0       	rjmp	.+30     	; 0xbd8 <get_fat+0x1b0>
     bba:	6f ef       	ldi	r22, 0xFF	; 255
     bbc:	7f ef       	ldi	r23, 0xFF	; 255
     bbe:	cb 01       	movw	r24, r22
     bc0:	0b c0       	rjmp	.+22     	; 0xbd8 <get_fat+0x1b0>
     bc2:	6f ef       	ldi	r22, 0xFF	; 255
     bc4:	7f ef       	ldi	r23, 0xFF	; 255
     bc6:	cb 01       	movw	r24, r22
     bc8:	07 c0       	rjmp	.+14     	; 0xbd8 <get_fat+0x1b0>
     bca:	6f ef       	ldi	r22, 0xFF	; 255
     bcc:	7f ef       	ldi	r23, 0xFF	; 255
     bce:	cb 01       	movw	r24, r22
     bd0:	03 c0       	rjmp	.+6      	; 0xbd8 <get_fat+0x1b0>
     bd2:	6f ef       	ldi	r22, 0xFF	; 255
     bd4:	7f ef       	ldi	r23, 0xFF	; 255
     bd6:	cb 01       	movw	r24, r22
     bd8:	df 91       	pop	r29
     bda:	cf 91       	pop	r28
     bdc:	1f 91       	pop	r17
     bde:	0f 91       	pop	r16
     be0:	ff 90       	pop	r15
     be2:	ef 90       	pop	r14
     be4:	df 90       	pop	r13
     be6:	cf 90       	pop	r12
     be8:	bf 90       	pop	r11
     bea:	af 90       	pop	r10
     bec:	08 95       	ret

00000bee <dir_sdi>:
     bee:	af 92       	push	r10
     bf0:	bf 92       	push	r11
     bf2:	cf 92       	push	r12
     bf4:	df 92       	push	r13
     bf6:	ef 92       	push	r14
     bf8:	ff 92       	push	r15
     bfa:	0f 93       	push	r16
     bfc:	1f 93       	push	r17
     bfe:	cf 93       	push	r28
     c00:	df 93       	push	r29
     c02:	ec 01       	movw	r28, r24
     c04:	8b 01       	movw	r16, r22
     c06:	7d 83       	std	Y+5, r23	; 0x05
     c08:	6c 83       	std	Y+4, r22	; 0x04
     c0a:	ce 80       	ldd	r12, Y+6	; 0x06
     c0c:	df 80       	ldd	r13, Y+7	; 0x07
     c0e:	e8 84       	ldd	r14, Y+8	; 0x08
     c10:	f9 84       	ldd	r15, Y+9	; 0x09
     c12:	81 e0       	ldi	r24, 0x01	; 1
     c14:	c8 16       	cp	r12, r24
     c16:	d1 04       	cpc	r13, r1
     c18:	e1 04       	cpc	r14, r1
     c1a:	f1 04       	cpc	r15, r1
     c1c:	09 f4       	brne	.+2      	; 0xc20 <dir_sdi+0x32>
     c1e:	8a c0       	rjmp	.+276    	; 0xd34 <dir_sdi+0x146>
     c20:	e8 81       	ld	r30, Y
     c22:	f9 81       	ldd	r31, Y+1	; 0x01
     c24:	82 89       	ldd	r24, Z+18	; 0x12
     c26:	93 89       	ldd	r25, Z+19	; 0x13
     c28:	a4 89       	ldd	r26, Z+20	; 0x14
     c2a:	b5 89       	ldd	r27, Z+21	; 0x15
     c2c:	c8 16       	cp	r12, r24
     c2e:	d9 06       	cpc	r13, r25
     c30:	ea 06       	cpc	r14, r26
     c32:	fb 06       	cpc	r15, r27
     c34:	08 f0       	brcs	.+2      	; 0xc38 <dir_sdi+0x4a>
     c36:	80 c0       	rjmp	.+256    	; 0xd38 <dir_sdi+0x14a>
     c38:	c1 14       	cp	r12, r1
     c3a:	d1 04       	cpc	r13, r1
     c3c:	e1 04       	cpc	r14, r1
     c3e:	f1 04       	cpc	r15, r1
     c40:	c1 f4       	brne	.+48     	; 0xc72 <dir_sdi+0x84>
     c42:	80 81       	ld	r24, Z
     c44:	83 30       	cpi	r24, 0x03	; 3
     c46:	41 f4       	brne	.+16     	; 0xc58 <dir_sdi+0x6a>
     c48:	82 a1       	ldd	r24, Z+34	; 0x22
     c4a:	93 a1       	ldd	r25, Z+35	; 0x23
     c4c:	a4 a1       	ldd	r26, Z+36	; 0x24
     c4e:	b5 a1       	ldd	r27, Z+37	; 0x25
     c50:	00 97       	sbiw	r24, 0x00	; 0
     c52:	a1 05       	cpc	r26, r1
     c54:	b1 05       	cpc	r27, r1
     c56:	59 f4       	brne	.+22     	; 0xc6e <dir_sdi+0x80>
     c58:	80 85       	ldd	r24, Z+8	; 0x08
     c5a:	91 85       	ldd	r25, Z+9	; 0x09
     c5c:	08 17       	cp	r16, r24
     c5e:	19 07       	cpc	r17, r25
     c60:	08 f0       	brcs	.+2      	; 0xc64 <dir_sdi+0x76>
     c62:	6c c0       	rjmp	.+216    	; 0xd3c <dir_sdi+0x14e>
     c64:	62 a1       	ldd	r22, Z+34	; 0x22
     c66:	73 a1       	ldd	r23, Z+35	; 0x23
     c68:	84 a1       	ldd	r24, Z+36	; 0x24
     c6a:	95 a1       	ldd	r25, Z+37	; 0x25
     c6c:	35 c0       	rjmp	.+106    	; 0xcd8 <dir_sdi+0xea>
     c6e:	6c 01       	movw	r12, r24
     c70:	7d 01       	movw	r14, r26
     c72:	a2 80       	ldd	r10, Z+2	; 0x02
     c74:	80 e1       	ldi	r24, 0x10	; 16
     c76:	a8 9e       	mul	r10, r24
     c78:	50 01       	movw	r10, r0
     c7a:	11 24       	eor	r1, r1
     c7c:	0a 15       	cp	r16, r10
     c7e:	1b 05       	cpc	r17, r11
     c80:	30 f1       	brcs	.+76     	; 0xcce <dir_sdi+0xe0>
     c82:	b7 01       	movw	r22, r14
     c84:	a6 01       	movw	r20, r12
     c86:	88 81       	ld	r24, Y
     c88:	99 81       	ldd	r25, Y+1	; 0x01
     c8a:	ce de       	rcall	.-612    	; 0xa28 <get_fat>
     c8c:	6b 01       	movw	r12, r22
     c8e:	7c 01       	movw	r14, r24
     c90:	8f ef       	ldi	r24, 0xFF	; 255
     c92:	c8 16       	cp	r12, r24
     c94:	d8 06       	cpc	r13, r24
     c96:	e8 06       	cpc	r14, r24
     c98:	f8 06       	cpc	r15, r24
     c9a:	09 f4       	brne	.+2      	; 0xc9e <dir_sdi+0xb0>
     c9c:	51 c0       	rjmp	.+162    	; 0xd40 <dir_sdi+0x152>
     c9e:	82 e0       	ldi	r24, 0x02	; 2
     ca0:	c8 16       	cp	r12, r24
     ca2:	d1 04       	cpc	r13, r1
     ca4:	e1 04       	cpc	r14, r1
     ca6:	f1 04       	cpc	r15, r1
     ca8:	08 f4       	brcc	.+2      	; 0xcac <dir_sdi+0xbe>
     caa:	4c c0       	rjmp	.+152    	; 0xd44 <dir_sdi+0x156>
     cac:	e8 81       	ld	r30, Y
     cae:	f9 81       	ldd	r31, Y+1	; 0x01
     cb0:	82 89       	ldd	r24, Z+18	; 0x12
     cb2:	93 89       	ldd	r25, Z+19	; 0x13
     cb4:	a4 89       	ldd	r26, Z+20	; 0x14
     cb6:	b5 89       	ldd	r27, Z+21	; 0x15
     cb8:	c8 16       	cp	r12, r24
     cba:	d9 06       	cpc	r13, r25
     cbc:	ea 06       	cpc	r14, r26
     cbe:	fb 06       	cpc	r15, r27
     cc0:	08 f0       	brcs	.+2      	; 0xcc4 <dir_sdi+0xd6>
     cc2:	42 c0       	rjmp	.+132    	; 0xd48 <dir_sdi+0x15a>
     cc4:	0a 19       	sub	r16, r10
     cc6:	1b 09       	sbc	r17, r11
     cc8:	0a 15       	cp	r16, r10
     cca:	1b 05       	cpc	r17, r11
     ccc:	d0 f6       	brcc	.-76     	; 0xc82 <dir_sdi+0x94>
     cce:	b7 01       	movw	r22, r14
     cd0:	a6 01       	movw	r20, r12
     cd2:	88 81       	ld	r24, Y
     cd4:	99 81       	ldd	r25, Y+1	; 0x01
     cd6:	7a de       	rcall	.-780    	; 0x9cc <clust2sect>
     cd8:	ca 86       	std	Y+10, r12	; 0x0a
     cda:	db 86       	std	Y+11, r13	; 0x0b
     cdc:	ec 86       	std	Y+12, r14	; 0x0c
     cde:	fd 86       	std	Y+13, r15	; 0x0d
     ce0:	61 15       	cp	r22, r1
     ce2:	71 05       	cpc	r23, r1
     ce4:	81 05       	cpc	r24, r1
     ce6:	91 05       	cpc	r25, r1
     ce8:	89 f1       	breq	.+98     	; 0xd4c <dir_sdi+0x15e>
     cea:	98 01       	movw	r18, r16
     cec:	32 95       	swap	r19
     cee:	22 95       	swap	r18
     cf0:	2f 70       	andi	r18, 0x0F	; 15
     cf2:	23 27       	eor	r18, r19
     cf4:	3f 70       	andi	r19, 0x0F	; 15
     cf6:	23 27       	eor	r18, r19
     cf8:	dc 01       	movw	r26, r24
     cfa:	cb 01       	movw	r24, r22
     cfc:	82 0f       	add	r24, r18
     cfe:	93 1f       	adc	r25, r19
     d00:	a1 1d       	adc	r26, r1
     d02:	b1 1d       	adc	r27, r1
     d04:	8e 87       	std	Y+14, r24	; 0x0e
     d06:	9f 87       	std	Y+15, r25	; 0x0f
     d08:	a8 8b       	std	Y+16, r26	; 0x10
     d0a:	b9 8b       	std	Y+17, r27	; 0x11
     d0c:	0f 70       	andi	r16, 0x0F	; 15
     d0e:	11 27       	eor	r17, r17
     d10:	00 0f       	add	r16, r16
     d12:	11 1f       	adc	r17, r17
     d14:	02 95       	swap	r16
     d16:	12 95       	swap	r17
     d18:	10 7f       	andi	r17, 0xF0	; 240
     d1a:	10 27       	eor	r17, r16
     d1c:	00 7f       	andi	r16, 0xF0	; 240
     d1e:	10 27       	eor	r17, r16
     d20:	02 5d       	subi	r16, 0xD2	; 210
     d22:	1f 4f       	sbci	r17, 0xFF	; 255
     d24:	88 81       	ld	r24, Y
     d26:	99 81       	ldd	r25, Y+1	; 0x01
     d28:	80 0f       	add	r24, r16
     d2a:	91 1f       	adc	r25, r17
     d2c:	9b 8b       	std	Y+19, r25	; 0x13
     d2e:	8a 8b       	std	Y+18, r24	; 0x12
     d30:	80 e0       	ldi	r24, 0x00	; 0
     d32:	0d c0       	rjmp	.+26     	; 0xd4e <dir_sdi+0x160>
     d34:	82 e0       	ldi	r24, 0x02	; 2
     d36:	0b c0       	rjmp	.+22     	; 0xd4e <dir_sdi+0x160>
     d38:	82 e0       	ldi	r24, 0x02	; 2
     d3a:	09 c0       	rjmp	.+18     	; 0xd4e <dir_sdi+0x160>
     d3c:	82 e0       	ldi	r24, 0x02	; 2
     d3e:	07 c0       	rjmp	.+14     	; 0xd4e <dir_sdi+0x160>
     d40:	81 e0       	ldi	r24, 0x01	; 1
     d42:	05 c0       	rjmp	.+10     	; 0xd4e <dir_sdi+0x160>
     d44:	82 e0       	ldi	r24, 0x02	; 2
     d46:	03 c0       	rjmp	.+6      	; 0xd4e <dir_sdi+0x160>
     d48:	82 e0       	ldi	r24, 0x02	; 2
     d4a:	01 c0       	rjmp	.+2      	; 0xd4e <dir_sdi+0x160>
     d4c:	82 e0       	ldi	r24, 0x02	; 2
     d4e:	df 91       	pop	r29
     d50:	cf 91       	pop	r28
     d52:	1f 91       	pop	r17
     d54:	0f 91       	pop	r16
     d56:	ff 90       	pop	r15
     d58:	ef 90       	pop	r14
     d5a:	df 90       	pop	r13
     d5c:	cf 90       	pop	r12
     d5e:	bf 90       	pop	r11
     d60:	af 90       	pop	r10
     d62:	08 95       	ret

00000d64 <put_fat>:
     d64:	4f 92       	push	r4
     d66:	5f 92       	push	r5
     d68:	6f 92       	push	r6
     d6a:	7f 92       	push	r7
     d6c:	8f 92       	push	r8
     d6e:	9f 92       	push	r9
     d70:	af 92       	push	r10
     d72:	bf 92       	push	r11
     d74:	cf 92       	push	r12
     d76:	df 92       	push	r13
     d78:	ef 92       	push	r14
     d7a:	ff 92       	push	r15
     d7c:	0f 93       	push	r16
     d7e:	1f 93       	push	r17
     d80:	cf 93       	push	r28
     d82:	df 93       	push	r29
     d84:	ec 01       	movw	r28, r24
     d86:	6a 01       	movw	r12, r20
     d88:	7b 01       	movw	r14, r22
     d8a:	28 01       	movw	r4, r16
     d8c:	39 01       	movw	r6, r18
     d8e:	42 30       	cpi	r20, 0x02	; 2
     d90:	51 05       	cpc	r21, r1
     d92:	61 05       	cpc	r22, r1
     d94:	71 05       	cpc	r23, r1
     d96:	08 f4       	brcc	.+2      	; 0xd9a <put_fat+0x36>
     d98:	d2 c0       	rjmp	.+420    	; 0xf3e <put_fat+0x1da>
     d9a:	8a 89       	ldd	r24, Y+18	; 0x12
     d9c:	9b 89       	ldd	r25, Y+19	; 0x13
     d9e:	ac 89       	ldd	r26, Y+20	; 0x14
     da0:	bd 89       	ldd	r27, Y+21	; 0x15
     da2:	48 17       	cp	r20, r24
     da4:	59 07       	cpc	r21, r25
     da6:	6a 07       	cpc	r22, r26
     da8:	7b 07       	cpc	r23, r27
     daa:	08 f0       	brcs	.+2      	; 0xdae <put_fat+0x4a>
     dac:	ca c0       	rjmp	.+404    	; 0xf42 <put_fat+0x1de>
     dae:	88 81       	ld	r24, Y
     db0:	82 30       	cpi	r24, 0x02	; 2
     db2:	09 f4       	brne	.+2      	; 0xdb6 <put_fat+0x52>
     db4:	62 c0       	rjmp	.+196    	; 0xe7a <put_fat+0x116>
     db6:	83 30       	cpi	r24, 0x03	; 3
     db8:	09 f4       	brne	.+2      	; 0xdbc <put_fat+0x58>
     dba:	85 c0       	rjmp	.+266    	; 0xec6 <put_fat+0x162>
     dbc:	81 30       	cpi	r24, 0x01	; 1
     dbe:	09 f0       	breq	.+2      	; 0xdc2 <put_fat+0x5e>
     dc0:	c2 c0       	rjmp	.+388    	; 0xf46 <put_fat+0x1e2>
     dc2:	5a 01       	movw	r10, r20
     dc4:	b6 94       	lsr	r11
     dc6:	a7 94       	ror	r10
     dc8:	a4 0e       	add	r10, r20
     dca:	b5 1e       	adc	r11, r21
     dcc:	c5 01       	movw	r24, r10
     dce:	89 2f       	mov	r24, r25
     dd0:	99 27       	eor	r25, r25
     dd2:	86 95       	lsr	r24
     dd4:	4e 8d       	ldd	r20, Y+30	; 0x1e
     dd6:	5f 8d       	ldd	r21, Y+31	; 0x1f
     dd8:	68 a1       	ldd	r22, Y+32	; 0x20
     dda:	79 a1       	ldd	r23, Y+33	; 0x21
     ddc:	48 0f       	add	r20, r24
     dde:	59 1f       	adc	r21, r25
     de0:	61 1d       	adc	r22, r1
     de2:	71 1d       	adc	r23, r1
     de4:	ce 01       	movw	r24, r28
     de6:	6e da       	rcall	.-2852   	; 0x2c4 <move_window>
     de8:	18 2f       	mov	r17, r24
     dea:	81 11       	cpse	r24, r1
     dec:	ca c0       	rjmp	.+404    	; 0xf82 <put_fat+0x21e>
     dee:	45 01       	movw	r8, r10
     df0:	8f ef       	ldi	r24, 0xFF	; 255
     df2:	88 1a       	sub	r8, r24
     df4:	98 0a       	sbc	r9, r24
     df6:	31 e0       	ldi	r19, 0x01	; 1
     df8:	b3 22       	and	r11, r19
     dfa:	c0 fe       	sbrs	r12, 0
     dfc:	20 c0       	rjmp	.+64     	; 0xe3e <put_fat+0xda>
     dfe:	fe 01       	movw	r30, r28
     e00:	ea 0d       	add	r30, r10
     e02:	fb 1d       	adc	r31, r11
     e04:	86 a5       	ldd	r24, Z+46	; 0x2e
     e06:	28 2f       	mov	r18, r24
     e08:	2f 70       	andi	r18, 0x0F	; 15
     e0a:	30 e1       	ldi	r19, 0x10	; 16
     e0c:	43 9e       	mul	r4, r19
     e0e:	c0 01       	movw	r24, r0
     e10:	11 24       	eor	r1, r1
     e12:	82 2b       	or	r24, r18
     e14:	86 a7       	std	Z+46, r24	; 0x2e
     e16:	81 e0       	ldi	r24, 0x01	; 1
     e18:	8c 83       	std	Y+4, r24	; 0x04
     e1a:	4e 8d       	ldd	r20, Y+30	; 0x1e
     e1c:	5f 8d       	ldd	r21, Y+31	; 0x1f
     e1e:	68 a1       	ldd	r22, Y+32	; 0x20
     e20:	79 a1       	ldd	r23, Y+33	; 0x21
     e22:	c4 01       	movw	r24, r8
     e24:	89 2f       	mov	r24, r25
     e26:	99 27       	eor	r25, r25
     e28:	86 95       	lsr	r24
     e2a:	48 0f       	add	r20, r24
     e2c:	59 1f       	adc	r21, r25
     e2e:	61 1d       	adc	r22, r1
     e30:	71 1d       	adc	r23, r1
     e32:	ce 01       	movw	r24, r28
     e34:	47 da       	rcall	.-2930   	; 0x2c4 <move_window>
     e36:	88 23       	and	r24, r24
     e38:	09 f4       	brne	.+2      	; 0xe3c <put_fat+0xd8>
     e3a:	8b c0       	rjmp	.+278    	; 0xf52 <put_fat+0x1ee>
     e3c:	86 c0       	rjmp	.+268    	; 0xf4a <put_fat+0x1e6>
     e3e:	fe 01       	movw	r30, r28
     e40:	ea 0d       	add	r30, r10
     e42:	fb 1d       	adc	r31, r11
     e44:	46 a6       	std	Z+46, r4	; 0x2e
     e46:	81 e0       	ldi	r24, 0x01	; 1
     e48:	8c 83       	std	Y+4, r24	; 0x04
     e4a:	4e 8d       	ldd	r20, Y+30	; 0x1e
     e4c:	5f 8d       	ldd	r21, Y+31	; 0x1f
     e4e:	68 a1       	ldd	r22, Y+32	; 0x20
     e50:	79 a1       	ldd	r23, Y+33	; 0x21
     e52:	c4 01       	movw	r24, r8
     e54:	89 2f       	mov	r24, r25
     e56:	99 27       	eor	r25, r25
     e58:	86 95       	lsr	r24
     e5a:	48 0f       	add	r20, r24
     e5c:	59 1f       	adc	r21, r25
     e5e:	61 1d       	adc	r22, r1
     e60:	71 1d       	adc	r23, r1
     e62:	ce 01       	movw	r24, r28
     e64:	2f da       	rcall	.-2978   	; 0x2c4 <move_window>
     e66:	88 23       	and	r24, r24
     e68:	09 f4       	brne	.+2      	; 0xe6c <put_fat+0x108>
     e6a:	7e c0       	rjmp	.+252    	; 0xf68 <put_fat+0x204>
     e6c:	70 c0       	rjmp	.+224    	; 0xf4e <put_fat+0x1ea>
     e6e:	ec 0f       	add	r30, r28
     e70:	fd 1f       	adc	r31, r29
     e72:	46 a6       	std	Z+46, r4	; 0x2e
     e74:	81 e0       	ldi	r24, 0x01	; 1
     e76:	8c 83       	std	Y+4, r24	; 0x04
     e78:	84 c0       	rjmp	.+264    	; 0xf82 <put_fat+0x21e>
     e7a:	45 2f       	mov	r20, r21
     e7c:	56 2f       	mov	r21, r22
     e7e:	67 2f       	mov	r22, r23
     e80:	77 27       	eor	r23, r23
     e82:	8e 8d       	ldd	r24, Y+30	; 0x1e
     e84:	9f 8d       	ldd	r25, Y+31	; 0x1f
     e86:	a8 a1       	ldd	r26, Y+32	; 0x20
     e88:	b9 a1       	ldd	r27, Y+33	; 0x21
     e8a:	48 0f       	add	r20, r24
     e8c:	59 1f       	adc	r21, r25
     e8e:	6a 1f       	adc	r22, r26
     e90:	7b 1f       	adc	r23, r27
     e92:	ce 01       	movw	r24, r28
     e94:	17 da       	rcall	.-3026   	; 0x2c4 <move_window>
     e96:	18 2f       	mov	r17, r24
     e98:	81 11       	cpse	r24, r1
     e9a:	73 c0       	rjmp	.+230    	; 0xf82 <put_fat+0x21e>
     e9c:	cc 0c       	add	r12, r12
     e9e:	dd 1c       	adc	r13, r13
     ea0:	ee 1c       	adc	r14, r14
     ea2:	ff 1c       	adc	r15, r15
     ea4:	e8 94       	clt
     ea6:	c0 f8       	bld	r12, 0
     ea8:	81 e0       	ldi	r24, 0x01	; 1
     eaa:	d8 22       	and	r13, r24
     eac:	ee 24       	eor	r14, r14
     eae:	ff 24       	eor	r15, r15
     eb0:	3e e2       	ldi	r19, 0x2E	; 46
     eb2:	c3 0e       	add	r12, r19
     eb4:	d1 1c       	adc	r13, r1
     eb6:	fe 01       	movw	r30, r28
     eb8:	ec 0d       	add	r30, r12
     eba:	fd 1d       	adc	r31, r13
     ebc:	51 82       	std	Z+1, r5	; 0x01
     ebe:	40 82       	st	Z, r4
     ec0:	81 e0       	ldi	r24, 0x01	; 1
     ec2:	8c 83       	std	Y+4, r24	; 0x04
     ec4:	5e c0       	rjmp	.+188    	; 0xf82 <put_fat+0x21e>
     ec6:	8e 8d       	ldd	r24, Y+30	; 0x1e
     ec8:	9f 8d       	ldd	r25, Y+31	; 0x1f
     eca:	a8 a1       	ldd	r26, Y+32	; 0x20
     ecc:	b9 a1       	ldd	r27, Y+33	; 0x21
     ece:	68 94       	set
     ed0:	16 f8       	bld	r1, 6
     ed2:	76 95       	lsr	r23
     ed4:	67 95       	ror	r22
     ed6:	57 95       	ror	r21
     ed8:	47 95       	ror	r20
     eda:	16 94       	lsr	r1
     edc:	d1 f7       	brne	.-12     	; 0xed2 <put_fat+0x16e>
     ede:	48 0f       	add	r20, r24
     ee0:	59 1f       	adc	r21, r25
     ee2:	6a 1f       	adc	r22, r26
     ee4:	7b 1f       	adc	r23, r27
     ee6:	ce 01       	movw	r24, r28
     ee8:	ed d9       	rcall	.-3110   	; 0x2c4 <move_window>
     eea:	18 2f       	mov	r17, r24
     eec:	81 11       	cpse	r24, r1
     eee:	49 c0       	rjmp	.+146    	; 0xf82 <put_fat+0x21e>
     ef0:	cc 0c       	add	r12, r12
     ef2:	dd 1c       	adc	r13, r13
     ef4:	ee 1c       	adc	r14, r14
     ef6:	ff 1c       	adc	r15, r15
     ef8:	cc 0c       	add	r12, r12
     efa:	dd 1c       	adc	r13, r13
     efc:	ee 1c       	adc	r14, r14
     efe:	ff 1c       	adc	r15, r15
     f00:	8c ef       	ldi	r24, 0xFC	; 252
     f02:	c8 22       	and	r12, r24
     f04:	81 e0       	ldi	r24, 0x01	; 1
     f06:	d8 22       	and	r13, r24
     f08:	ee 24       	eor	r14, r14
     f0a:	ff 24       	eor	r15, r15
     f0c:	3e e2       	ldi	r19, 0x2E	; 46
     f0e:	c3 0e       	add	r12, r19
     f10:	d1 1c       	adc	r13, r1
     f12:	fe 01       	movw	r30, r28
     f14:	ec 0d       	add	r30, r12
     f16:	fd 1d       	adc	r31, r13
     f18:	80 81       	ld	r24, Z
     f1a:	91 81       	ldd	r25, Z+1	; 0x01
     f1c:	a2 81       	ldd	r26, Z+2	; 0x02
     f1e:	b3 81       	ldd	r27, Z+3	; 0x03
     f20:	88 27       	eor	r24, r24
     f22:	99 27       	eor	r25, r25
     f24:	aa 27       	eor	r26, r26
     f26:	b0 7f       	andi	r27, 0xF0	; 240
     f28:	48 2a       	or	r4, r24
     f2a:	59 2a       	or	r5, r25
     f2c:	6a 2a       	or	r6, r26
     f2e:	7b 2a       	or	r7, r27
     f30:	40 82       	st	Z, r4
     f32:	51 82       	std	Z+1, r5	; 0x01
     f34:	62 82       	std	Z+2, r6	; 0x02
     f36:	73 82       	std	Z+3, r7	; 0x03
     f38:	81 e0       	ldi	r24, 0x01	; 1
     f3a:	8c 83       	std	Y+4, r24	; 0x04
     f3c:	22 c0       	rjmp	.+68     	; 0xf82 <put_fat+0x21e>
     f3e:	12 e0       	ldi	r17, 0x02	; 2
     f40:	20 c0       	rjmp	.+64     	; 0xf82 <put_fat+0x21e>
     f42:	12 e0       	ldi	r17, 0x02	; 2
     f44:	1e c0       	rjmp	.+60     	; 0xf82 <put_fat+0x21e>
     f46:	12 e0       	ldi	r17, 0x02	; 2
     f48:	1c c0       	rjmp	.+56     	; 0xf82 <put_fat+0x21e>
     f4a:	18 2f       	mov	r17, r24
     f4c:	1a c0       	rjmp	.+52     	; 0xf82 <put_fat+0x21e>
     f4e:	18 2f       	mov	r17, r24
     f50:	18 c0       	rjmp	.+48     	; 0xf82 <put_fat+0x21e>
     f52:	f4 01       	movw	r30, r8
     f54:	f1 70       	andi	r31, 0x01	; 1
     f56:	68 94       	set
     f58:	13 f8       	bld	r1, 3
     f5a:	76 94       	lsr	r7
     f5c:	67 94       	ror	r6
     f5e:	57 94       	ror	r5
     f60:	47 94       	ror	r4
     f62:	16 94       	lsr	r1
     f64:	d1 f7       	brne	.-12     	; 0xf5a <put_fat+0x1f6>
     f66:	83 cf       	rjmp	.-250    	; 0xe6e <put_fat+0x10a>
     f68:	f4 01       	movw	r30, r8
     f6a:	f1 70       	andi	r31, 0x01	; 1
     f6c:	de 01       	movw	r26, r28
     f6e:	ae 0f       	add	r26, r30
     f70:	bf 1f       	adc	r27, r31
     f72:	9e 96       	adiw	r26, 0x2e	; 46
     f74:	9c 91       	ld	r25, X
     f76:	90 7f       	andi	r25, 0xF0	; 240
     f78:	85 2d       	mov	r24, r5
     f7a:	8f 70       	andi	r24, 0x0F	; 15
     f7c:	49 2e       	mov	r4, r25
     f7e:	48 2a       	or	r4, r24
     f80:	76 cf       	rjmp	.-276    	; 0xe6e <put_fat+0x10a>
     f82:	81 2f       	mov	r24, r17
     f84:	df 91       	pop	r29
     f86:	cf 91       	pop	r28
     f88:	1f 91       	pop	r17
     f8a:	0f 91       	pop	r16
     f8c:	ff 90       	pop	r15
     f8e:	ef 90       	pop	r14
     f90:	df 90       	pop	r13
     f92:	cf 90       	pop	r12
     f94:	bf 90       	pop	r11
     f96:	af 90       	pop	r10
     f98:	9f 90       	pop	r9
     f9a:	8f 90       	pop	r8
     f9c:	7f 90       	pop	r7
     f9e:	6f 90       	pop	r6
     fa0:	5f 90       	pop	r5
     fa2:	4f 90       	pop	r4
     fa4:	08 95       	ret

00000fa6 <create_chain>:
     fa6:	2f 92       	push	r2
     fa8:	3f 92       	push	r3
     faa:	4f 92       	push	r4
     fac:	5f 92       	push	r5
     fae:	6f 92       	push	r6
     fb0:	7f 92       	push	r7
     fb2:	8f 92       	push	r8
     fb4:	9f 92       	push	r9
     fb6:	af 92       	push	r10
     fb8:	bf 92       	push	r11
     fba:	cf 92       	push	r12
     fbc:	df 92       	push	r13
     fbe:	ef 92       	push	r14
     fc0:	ff 92       	push	r15
     fc2:	0f 93       	push	r16
     fc4:	1f 93       	push	r17
     fc6:	cf 93       	push	r28
     fc8:	df 93       	push	r29
     fca:	ec 01       	movw	r28, r24
     fcc:	2a 01       	movw	r4, r20
     fce:	3b 01       	movw	r6, r22
     fd0:	41 15       	cp	r20, r1
     fd2:	51 05       	cpc	r21, r1
     fd4:	61 05       	cpc	r22, r1
     fd6:	71 05       	cpc	r23, r1
     fd8:	b9 f4       	brne	.+46     	; 0x1008 <create_chain+0x62>
     fda:	8a 84       	ldd	r8, Y+10	; 0x0a
     fdc:	9b 84       	ldd	r9, Y+11	; 0x0b
     fde:	ac 84       	ldd	r10, Y+12	; 0x0c
     fe0:	bd 84       	ldd	r11, Y+13	; 0x0d
     fe2:	81 14       	cp	r8, r1
     fe4:	91 04       	cpc	r9, r1
     fe6:	a1 04       	cpc	r10, r1
     fe8:	b1 04       	cpc	r11, r1
     fea:	59 f1       	breq	.+86     	; 0x1042 <create_chain+0x9c>
     fec:	8a 89       	ldd	r24, Y+18	; 0x12
     fee:	9b 89       	ldd	r25, Y+19	; 0x13
     ff0:	ac 89       	ldd	r26, Y+20	; 0x14
     ff2:	bd 89       	ldd	r27, Y+21	; 0x15
     ff4:	88 16       	cp	r8, r24
     ff6:	99 06       	cpc	r9, r25
     ff8:	aa 06       	cpc	r10, r26
     ffa:	bb 06       	cpc	r11, r27
     ffc:	30 f1       	brcs	.+76     	; 0x104a <create_chain+0xa4>
     ffe:	81 2c       	mov	r8, r1
    1000:	91 2c       	mov	r9, r1
    1002:	54 01       	movw	r10, r8
    1004:	83 94       	inc	r8
    1006:	21 c0       	rjmp	.+66     	; 0x104a <create_chain+0xa4>
    1008:	0f dd       	rcall	.-1506   	; 0xa28 <get_fat>
    100a:	6b 01       	movw	r12, r22
    100c:	7c 01       	movw	r14, r24
    100e:	62 30       	cpi	r22, 0x02	; 2
    1010:	71 05       	cpc	r23, r1
    1012:	81 05       	cpc	r24, r1
    1014:	91 05       	cpc	r25, r1
    1016:	08 f4       	brcc	.+2      	; 0x101a <create_chain+0x74>
    1018:	96 c0       	rjmp	.+300    	; 0x1146 <create_chain+0x1a0>
    101a:	8f ef       	ldi	r24, 0xFF	; 255
    101c:	c8 16       	cp	r12, r24
    101e:	d8 06       	cpc	r13, r24
    1020:	e8 06       	cpc	r14, r24
    1022:	f8 06       	cpc	r15, r24
    1024:	09 f4       	brne	.+2      	; 0x1028 <create_chain+0x82>
    1026:	94 c0       	rjmp	.+296    	; 0x1150 <create_chain+0x1aa>
    1028:	8a 89       	ldd	r24, Y+18	; 0x12
    102a:	9b 89       	ldd	r25, Y+19	; 0x13
    102c:	ac 89       	ldd	r26, Y+20	; 0x14
    102e:	bd 89       	ldd	r27, Y+21	; 0x15
    1030:	c8 16       	cp	r12, r24
    1032:	d9 06       	cpc	r13, r25
    1034:	ea 06       	cpc	r14, r26
    1036:	fb 06       	cpc	r15, r27
    1038:	08 f4       	brcc	.+2      	; 0x103c <create_chain+0x96>
    103a:	8f c0       	rjmp	.+286    	; 0x115a <create_chain+0x1b4>
    103c:	53 01       	movw	r10, r6
    103e:	42 01       	movw	r8, r4
    1040:	04 c0       	rjmp	.+8      	; 0x104a <create_chain+0xa4>
    1042:	81 2c       	mov	r8, r1
    1044:	91 2c       	mov	r9, r1
    1046:	54 01       	movw	r10, r8
    1048:	83 94       	inc	r8
    104a:	75 01       	movw	r14, r10
    104c:	64 01       	movw	r12, r8
    104e:	68 94       	set
    1050:	22 24       	eor	r2, r2
    1052:	21 f8       	bld	r2, 1
    1054:	31 2c       	mov	r3, r1
    1056:	00 e0       	ldi	r16, 0x00	; 0
    1058:	10 e0       	ldi	r17, 0x00	; 0
    105a:	2f ef       	ldi	r18, 0xFF	; 255
    105c:	c2 1a       	sub	r12, r18
    105e:	d2 0a       	sbc	r13, r18
    1060:	e2 0a       	sbc	r14, r18
    1062:	f2 0a       	sbc	r15, r18
    1064:	8a 89       	ldd	r24, Y+18	; 0x12
    1066:	9b 89       	ldd	r25, Y+19	; 0x13
    1068:	ac 89       	ldd	r26, Y+20	; 0x14
    106a:	bd 89       	ldd	r27, Y+21	; 0x15
    106c:	c8 16       	cp	r12, r24
    106e:	d9 06       	cpc	r13, r25
    1070:	ea 06       	cpc	r14, r26
    1072:	fb 06       	cpc	r15, r27
    1074:	58 f0       	brcs	.+22     	; 0x108c <create_chain+0xe6>
    1076:	82 e0       	ldi	r24, 0x02	; 2
    1078:	88 16       	cp	r8, r24
    107a:	91 04       	cpc	r9, r1
    107c:	a1 04       	cpc	r10, r1
    107e:	b1 04       	cpc	r11, r1
    1080:	08 f4       	brcc	.+2      	; 0x1084 <create_chain+0xde>
    1082:	70 c0       	rjmp	.+224    	; 0x1164 <create_chain+0x1be>
    1084:	c2 2c       	mov	r12, r2
    1086:	d3 2c       	mov	r13, r3
    1088:	e0 2e       	mov	r14, r16
    108a:	f1 2e       	mov	r15, r17
    108c:	b7 01       	movw	r22, r14
    108e:	a6 01       	movw	r20, r12
    1090:	ce 01       	movw	r24, r28
    1092:	ca dc       	rcall	.-1644   	; 0xa28 <get_fat>
    1094:	61 15       	cp	r22, r1
    1096:	71 05       	cpc	r23, r1
    1098:	81 05       	cpc	r24, r1
    109a:	91 05       	cpc	r25, r1
    109c:	99 f0       	breq	.+38     	; 0x10c4 <create_chain+0x11e>
    109e:	6f 3f       	cpi	r22, 0xFF	; 255
    10a0:	2f ef       	ldi	r18, 0xFF	; 255
    10a2:	72 07       	cpc	r23, r18
    10a4:	82 07       	cpc	r24, r18
    10a6:	92 07       	cpc	r25, r18
    10a8:	09 f4       	brne	.+2      	; 0x10ac <create_chain+0x106>
    10aa:	61 c0       	rjmp	.+194    	; 0x116e <create_chain+0x1c8>
    10ac:	61 30       	cpi	r22, 0x01	; 1
    10ae:	71 05       	cpc	r23, r1
    10b0:	81 05       	cpc	r24, r1
    10b2:	91 05       	cpc	r25, r1
    10b4:	09 f4       	brne	.+2      	; 0x10b8 <create_chain+0x112>
    10b6:	60 c0       	rjmp	.+192    	; 0x1178 <create_chain+0x1d2>
    10b8:	c8 14       	cp	r12, r8
    10ba:	d9 04       	cpc	r13, r9
    10bc:	ea 04       	cpc	r14, r10
    10be:	fb 04       	cpc	r15, r11
    10c0:	61 f6       	brne	.-104    	; 0x105a <create_chain+0xb4>
    10c2:	5f c0       	rjmp	.+190    	; 0x1182 <create_chain+0x1dc>
    10c4:	8c 2c       	mov	r8, r12
    10c6:	9d 2c       	mov	r9, r13
    10c8:	ae 2c       	mov	r10, r14
    10ca:	bf 2c       	mov	r11, r15
    10cc:	0f ef       	ldi	r16, 0xFF	; 255
    10ce:	1f ef       	ldi	r17, 0xFF	; 255
    10d0:	2f ef       	ldi	r18, 0xFF	; 255
    10d2:	3f e0       	ldi	r19, 0x0F	; 15
    10d4:	b7 01       	movw	r22, r14
    10d6:	a6 01       	movw	r20, r12
    10d8:	ce 01       	movw	r24, r28
    10da:	44 de       	rcall	.-888    	; 0xd64 <put_fat>
    10dc:	81 11       	cpse	r24, r1
    10de:	2c c0       	rjmp	.+88     	; 0x1138 <create_chain+0x192>
    10e0:	41 14       	cp	r4, r1
    10e2:	51 04       	cpc	r5, r1
    10e4:	61 04       	cpc	r6, r1
    10e6:	71 04       	cpc	r7, r1
    10e8:	51 f0       	breq	.+20     	; 0x10fe <create_chain+0x158>
    10ea:	0c 2d       	mov	r16, r12
    10ec:	1d 2d       	mov	r17, r13
    10ee:	2e 2d       	mov	r18, r14
    10f0:	3f 2d       	mov	r19, r15
    10f2:	b3 01       	movw	r22, r6
    10f4:	a2 01       	movw	r20, r4
    10f6:	ce 01       	movw	r24, r28
    10f8:	35 de       	rcall	.-918    	; 0xd64 <put_fat>
    10fa:	81 11       	cpse	r24, r1
    10fc:	1d c0       	rjmp	.+58     	; 0x1138 <create_chain+0x192>
    10fe:	8a 86       	std	Y+10, r8	; 0x0a
    1100:	9b 86       	std	Y+11, r9	; 0x0b
    1102:	ac 86       	std	Y+12, r10	; 0x0c
    1104:	bd 86       	std	Y+13, r11	; 0x0d
    1106:	8e 85       	ldd	r24, Y+14	; 0x0e
    1108:	9f 85       	ldd	r25, Y+15	; 0x0f
    110a:	a8 89       	ldd	r26, Y+16	; 0x10
    110c:	b9 89       	ldd	r27, Y+17	; 0x11
    110e:	8f 3f       	cpi	r24, 0xFF	; 255
    1110:	2f ef       	ldi	r18, 0xFF	; 255
    1112:	92 07       	cpc	r25, r18
    1114:	a2 07       	cpc	r26, r18
    1116:	b2 07       	cpc	r27, r18
    1118:	c9 f1       	breq	.+114    	; 0x118c <create_chain+0x1e6>
    111a:	01 97       	sbiw	r24, 0x01	; 1
    111c:	a1 09       	sbc	r26, r1
    111e:	b1 09       	sbc	r27, r1
    1120:	8e 87       	std	Y+14, r24	; 0x0e
    1122:	9f 87       	std	Y+15, r25	; 0x0f
    1124:	a8 8b       	std	Y+16, r26	; 0x10
    1126:	b9 8b       	std	Y+17, r27	; 0x11
    1128:	8d 81       	ldd	r24, Y+5	; 0x05
    112a:	81 60       	ori	r24, 0x01	; 1
    112c:	8d 83       	std	Y+5, r24	; 0x05
    112e:	6c 2d       	mov	r22, r12
    1130:	7d 2d       	mov	r23, r13
    1132:	8e 2d       	mov	r24, r14
    1134:	9f 2d       	mov	r25, r15
    1136:	33 c0       	rjmp	.+102    	; 0x119e <create_chain+0x1f8>
    1138:	81 30       	cpi	r24, 0x01	; 1
    113a:	69 f1       	breq	.+90     	; 0x1196 <create_chain+0x1f0>
    113c:	61 e0       	ldi	r22, 0x01	; 1
    113e:	70 e0       	ldi	r23, 0x00	; 0
    1140:	80 e0       	ldi	r24, 0x00	; 0
    1142:	90 e0       	ldi	r25, 0x00	; 0
    1144:	2c c0       	rjmp	.+88     	; 0x119e <create_chain+0x1f8>
    1146:	61 e0       	ldi	r22, 0x01	; 1
    1148:	70 e0       	ldi	r23, 0x00	; 0
    114a:	80 e0       	ldi	r24, 0x00	; 0
    114c:	90 e0       	ldi	r25, 0x00	; 0
    114e:	27 c0       	rjmp	.+78     	; 0x119e <create_chain+0x1f8>
    1150:	6f ef       	ldi	r22, 0xFF	; 255
    1152:	7f ef       	ldi	r23, 0xFF	; 255
    1154:	8f ef       	ldi	r24, 0xFF	; 255
    1156:	9f ef       	ldi	r25, 0xFF	; 255
    1158:	22 c0       	rjmp	.+68     	; 0x119e <create_chain+0x1f8>
    115a:	6c 2d       	mov	r22, r12
    115c:	7d 2d       	mov	r23, r13
    115e:	8e 2d       	mov	r24, r14
    1160:	9f 2d       	mov	r25, r15
    1162:	1d c0       	rjmp	.+58     	; 0x119e <create_chain+0x1f8>
    1164:	60 e0       	ldi	r22, 0x00	; 0
    1166:	70 e0       	ldi	r23, 0x00	; 0
    1168:	80 e0       	ldi	r24, 0x00	; 0
    116a:	90 e0       	ldi	r25, 0x00	; 0
    116c:	18 c0       	rjmp	.+48     	; 0x119e <create_chain+0x1f8>
    116e:	6f ef       	ldi	r22, 0xFF	; 255
    1170:	7f ef       	ldi	r23, 0xFF	; 255
    1172:	8f ef       	ldi	r24, 0xFF	; 255
    1174:	9f ef       	ldi	r25, 0xFF	; 255
    1176:	13 c0       	rjmp	.+38     	; 0x119e <create_chain+0x1f8>
    1178:	61 e0       	ldi	r22, 0x01	; 1
    117a:	70 e0       	ldi	r23, 0x00	; 0
    117c:	80 e0       	ldi	r24, 0x00	; 0
    117e:	90 e0       	ldi	r25, 0x00	; 0
    1180:	0e c0       	rjmp	.+28     	; 0x119e <create_chain+0x1f8>
    1182:	60 e0       	ldi	r22, 0x00	; 0
    1184:	70 e0       	ldi	r23, 0x00	; 0
    1186:	80 e0       	ldi	r24, 0x00	; 0
    1188:	90 e0       	ldi	r25, 0x00	; 0
    118a:	09 c0       	rjmp	.+18     	; 0x119e <create_chain+0x1f8>
    118c:	6c 2d       	mov	r22, r12
    118e:	7d 2d       	mov	r23, r13
    1190:	8e 2d       	mov	r24, r14
    1192:	9f 2d       	mov	r25, r15
    1194:	04 c0       	rjmp	.+8      	; 0x119e <create_chain+0x1f8>
    1196:	6f ef       	ldi	r22, 0xFF	; 255
    1198:	7f ef       	ldi	r23, 0xFF	; 255
    119a:	8f ef       	ldi	r24, 0xFF	; 255
    119c:	9f ef       	ldi	r25, 0xFF	; 255
    119e:	df 91       	pop	r29
    11a0:	cf 91       	pop	r28
    11a2:	1f 91       	pop	r17
    11a4:	0f 91       	pop	r16
    11a6:	ff 90       	pop	r15
    11a8:	ef 90       	pop	r14
    11aa:	df 90       	pop	r13
    11ac:	cf 90       	pop	r12
    11ae:	bf 90       	pop	r11
    11b0:	af 90       	pop	r10
    11b2:	9f 90       	pop	r9
    11b4:	8f 90       	pop	r8
    11b6:	7f 90       	pop	r7
    11b8:	6f 90       	pop	r6
    11ba:	5f 90       	pop	r5
    11bc:	4f 90       	pop	r4
    11be:	3f 90       	pop	r3
    11c0:	2f 90       	pop	r2
    11c2:	08 95       	ret

000011c4 <dir_next>:
    11c4:	7f 92       	push	r7
    11c6:	8f 92       	push	r8
    11c8:	9f 92       	push	r9
    11ca:	af 92       	push	r10
    11cc:	bf 92       	push	r11
    11ce:	cf 92       	push	r12
    11d0:	df 92       	push	r13
    11d2:	ef 92       	push	r14
    11d4:	ff 92       	push	r15
    11d6:	0f 93       	push	r16
    11d8:	1f 93       	push	r17
    11da:	cf 93       	push	r28
    11dc:	df 93       	push	r29
    11de:	dc 01       	movw	r26, r24
    11e0:	14 96       	adiw	r26, 0x04	; 4
    11e2:	cd 91       	ld	r28, X+
    11e4:	dc 91       	ld	r29, X
    11e6:	15 97       	sbiw	r26, 0x05	; 5
    11e8:	21 96       	adiw	r28, 0x01	; 1
    11ea:	09 f4       	brne	.+2      	; 0x11ee <dir_next+0x2a>
    11ec:	03 c1       	rjmp	.+518    	; 0x13f4 <dir_next+0x230>
    11ee:	1e 96       	adiw	r26, 0x0e	; 14
    11f0:	8d 90       	ld	r8, X+
    11f2:	9d 90       	ld	r9, X+
    11f4:	ad 90       	ld	r10, X+
    11f6:	bc 90       	ld	r11, X
    11f8:	51 97       	sbiw	r26, 0x11	; 17
    11fa:	81 14       	cp	r8, r1
    11fc:	91 04       	cpc	r9, r1
    11fe:	a1 04       	cpc	r10, r1
    1200:	b1 04       	cpc	r11, r1
    1202:	09 f4       	brne	.+2      	; 0x1206 <dir_next+0x42>
    1204:	f9 c0       	rjmp	.+498    	; 0x13f8 <dir_next+0x234>
    1206:	7b 01       	movw	r14, r22
    1208:	8c 01       	movw	r16, r24
    120a:	6e 01       	movw	r12, r28
    120c:	bf e0       	ldi	r27, 0x0F	; 15
    120e:	cb 22       	and	r12, r27
    1210:	dd 24       	eor	r13, r13
    1212:	c1 14       	cp	r12, r1
    1214:	d1 04       	cpc	r13, r1
    1216:	09 f0       	breq	.+2      	; 0x121a <dir_next+0x56>
    1218:	d1 c0       	rjmp	.+418    	; 0x13bc <dir_next+0x1f8>
    121a:	ef ef       	ldi	r30, 0xFF	; 255
    121c:	8e 1a       	sub	r8, r30
    121e:	9e 0a       	sbc	r9, r30
    1220:	ae 0a       	sbc	r10, r30
    1222:	be 0a       	sbc	r11, r30
    1224:	dc 01       	movw	r26, r24
    1226:	1e 96       	adiw	r26, 0x0e	; 14
    1228:	8d 92       	st	X+, r8
    122a:	9d 92       	st	X+, r9
    122c:	ad 92       	st	X+, r10
    122e:	bc 92       	st	X, r11
    1230:	51 97       	sbiw	r26, 0x11	; 17
    1232:	1a 96       	adiw	r26, 0x0a	; 10
    1234:	4d 91       	ld	r20, X+
    1236:	5d 91       	ld	r21, X+
    1238:	6d 91       	ld	r22, X+
    123a:	7c 91       	ld	r23, X
    123c:	1d 97       	sbiw	r26, 0x0d	; 13
    123e:	41 15       	cp	r20, r1
    1240:	51 05       	cpc	r21, r1
    1242:	61 05       	cpc	r22, r1
    1244:	71 05       	cpc	r23, r1
    1246:	49 f4       	brne	.+18     	; 0x125a <dir_next+0x96>
    1248:	ed 91       	ld	r30, X+
    124a:	fc 91       	ld	r31, X
    124c:	80 85       	ldd	r24, Z+8	; 0x08
    124e:	91 85       	ldd	r25, Z+9	; 0x09
    1250:	c8 17       	cp	r28, r24
    1252:	d9 07       	cpc	r29, r25
    1254:	08 f0       	brcs	.+2      	; 0x1258 <dir_next+0x94>
    1256:	d2 c0       	rjmp	.+420    	; 0x13fc <dir_next+0x238>
    1258:	b1 c0       	rjmp	.+354    	; 0x13bc <dir_next+0x1f8>
    125a:	dc 01       	movw	r26, r24
    125c:	ed 91       	ld	r30, X+
    125e:	fc 91       	ld	r31, X
    1260:	22 81       	ldd	r18, Z+2	; 0x02
    1262:	30 e0       	ldi	r19, 0x00	; 0
    1264:	21 50       	subi	r18, 0x01	; 1
    1266:	31 09       	sbc	r19, r1
    1268:	ce 01       	movw	r24, r28
    126a:	92 95       	swap	r25
    126c:	82 95       	swap	r24
    126e:	8f 70       	andi	r24, 0x0F	; 15
    1270:	89 27       	eor	r24, r25
    1272:	9f 70       	andi	r25, 0x0F	; 15
    1274:	89 27       	eor	r24, r25
    1276:	28 23       	and	r18, r24
    1278:	39 23       	and	r19, r25
    127a:	23 2b       	or	r18, r19
    127c:	09 f0       	breq	.+2      	; 0x1280 <dir_next+0xbc>
    127e:	9e c0       	rjmp	.+316    	; 0x13bc <dir_next+0x1f8>
    1280:	cf 01       	movw	r24, r30
    1282:	d2 db       	rcall	.-2140   	; 0xa28 <get_fat>
    1284:	4b 01       	movw	r8, r22
    1286:	5c 01       	movw	r10, r24
    1288:	62 30       	cpi	r22, 0x02	; 2
    128a:	71 05       	cpc	r23, r1
    128c:	81 05       	cpc	r24, r1
    128e:	91 05       	cpc	r25, r1
    1290:	08 f4       	brcc	.+2      	; 0x1294 <dir_next+0xd0>
    1292:	b6 c0       	rjmp	.+364    	; 0x1400 <dir_next+0x23c>
    1294:	6f 3f       	cpi	r22, 0xFF	; 255
    1296:	7f 4f       	sbci	r23, 0xFF	; 255
    1298:	8f 4f       	sbci	r24, 0xFF	; 255
    129a:	9f 4f       	sbci	r25, 0xFF	; 255
    129c:	09 f4       	brne	.+2      	; 0x12a0 <dir_next+0xdc>
    129e:	b2 c0       	rjmp	.+356    	; 0x1404 <dir_next+0x240>
    12a0:	d8 01       	movw	r26, r16
    12a2:	ed 91       	ld	r30, X+
    12a4:	fc 91       	ld	r31, X
    12a6:	82 89       	ldd	r24, Z+18	; 0x12
    12a8:	93 89       	ldd	r25, Z+19	; 0x13
    12aa:	a4 89       	ldd	r26, Z+20	; 0x14
    12ac:	b5 89       	ldd	r27, Z+21	; 0x15
    12ae:	88 16       	cp	r8, r24
    12b0:	99 06       	cpc	r9, r25
    12b2:	aa 06       	cpc	r10, r26
    12b4:	bb 06       	cpc	r11, r27
    12b6:	08 f4       	brcc	.+2      	; 0x12ba <dir_next+0xf6>
    12b8:	70 c0       	rjmp	.+224    	; 0x139a <dir_next+0x1d6>
    12ba:	ef 28       	or	r14, r15
    12bc:	09 f4       	brne	.+2      	; 0x12c0 <dir_next+0xfc>
    12be:	a4 c0       	rjmp	.+328    	; 0x1408 <dir_next+0x244>
    12c0:	d8 01       	movw	r26, r16
    12c2:	1a 96       	adiw	r26, 0x0a	; 10
    12c4:	4d 91       	ld	r20, X+
    12c6:	5d 91       	ld	r21, X+
    12c8:	6d 91       	ld	r22, X+
    12ca:	7c 91       	ld	r23, X
    12cc:	1d 97       	sbiw	r26, 0x0d	; 13
    12ce:	cf 01       	movw	r24, r30
    12d0:	6a de       	rcall	.-812    	; 0xfa6 <create_chain>
    12d2:	4b 01       	movw	r8, r22
    12d4:	5c 01       	movw	r10, r24
    12d6:	61 15       	cp	r22, r1
    12d8:	71 05       	cpc	r23, r1
    12da:	81 05       	cpc	r24, r1
    12dc:	91 05       	cpc	r25, r1
    12de:	09 f4       	brne	.+2      	; 0x12e2 <dir_next+0x11e>
    12e0:	95 c0       	rjmp	.+298    	; 0x140c <dir_next+0x248>
    12e2:	61 30       	cpi	r22, 0x01	; 1
    12e4:	71 05       	cpc	r23, r1
    12e6:	81 05       	cpc	r24, r1
    12e8:	91 05       	cpc	r25, r1
    12ea:	09 f4       	brne	.+2      	; 0x12ee <dir_next+0x12a>
    12ec:	91 c0       	rjmp	.+290    	; 0x1410 <dir_next+0x24c>
    12ee:	6f 3f       	cpi	r22, 0xFF	; 255
    12f0:	7f 4f       	sbci	r23, 0xFF	; 255
    12f2:	8f 4f       	sbci	r24, 0xFF	; 255
    12f4:	9f 4f       	sbci	r25, 0xFF	; 255
    12f6:	09 f4       	brne	.+2      	; 0x12fa <dir_next+0x136>
    12f8:	8d c0       	rjmp	.+282    	; 0x1414 <dir_next+0x250>
    12fa:	d8 01       	movw	r26, r16
    12fc:	8d 91       	ld	r24, X+
    12fe:	9c 91       	ld	r25, X
    1300:	0e 94 f7 00 	call	0x1ee	; 0x1ee <sync_window>
    1304:	81 11       	cpse	r24, r1
    1306:	88 c0       	rjmp	.+272    	; 0x1418 <dir_next+0x254>
    1308:	f8 01       	movw	r30, r16
    130a:	80 81       	ld	r24, Z
    130c:	91 81       	ldd	r25, Z+1	; 0x01
    130e:	fc 01       	movw	r30, r24
    1310:	be 96       	adiw	r30, 0x2e	; 46
    1312:	82 5d       	subi	r24, 0xD2	; 210
    1314:	9d 4f       	sbci	r25, 0xFD	; 253
    1316:	11 92       	st	Z+, r1
    1318:	e8 17       	cp	r30, r24
    131a:	f9 07       	cpc	r31, r25
    131c:	e1 f7       	brne	.-8      	; 0x1316 <dir_next+0x152>
    131e:	d8 01       	movw	r26, r16
    1320:	ed 90       	ld	r14, X+
    1322:	fc 90       	ld	r15, X
    1324:	b5 01       	movw	r22, r10
    1326:	a4 01       	movw	r20, r8
    1328:	c7 01       	movw	r24, r14
    132a:	50 db       	rcall	.-2400   	; 0x9cc <clust2sect>
    132c:	f7 01       	movw	r30, r14
    132e:	62 a7       	std	Z+42, r22	; 0x2a
    1330:	73 a7       	std	Z+43, r23	; 0x2b
    1332:	84 a7       	std	Z+44, r24	; 0x2c
    1334:	95 a7       	std	Z+45, r25	; 0x2d
    1336:	e1 2c       	mov	r14, r1
    1338:	f1 2c       	mov	r15, r1
    133a:	77 24       	eor	r7, r7
    133c:	73 94       	inc	r7
    133e:	19 c0       	rjmp	.+50     	; 0x1372 <dir_next+0x1ae>
    1340:	74 82       	std	Z+4, r7	; 0x04
    1342:	d8 01       	movw	r26, r16
    1344:	8d 91       	ld	r24, X+
    1346:	9c 91       	ld	r25, X
    1348:	0e 94 f7 00 	call	0x1ee	; 0x1ee <sync_window>
    134c:	81 11       	cpse	r24, r1
    134e:	66 c0       	rjmp	.+204    	; 0x141c <dir_next+0x258>
    1350:	d8 01       	movw	r26, r16
    1352:	ed 91       	ld	r30, X+
    1354:	fc 91       	ld	r31, X
    1356:	82 a5       	ldd	r24, Z+42	; 0x2a
    1358:	93 a5       	ldd	r25, Z+43	; 0x2b
    135a:	a4 a5       	ldd	r26, Z+44	; 0x2c
    135c:	b5 a5       	ldd	r27, Z+45	; 0x2d
    135e:	01 96       	adiw	r24, 0x01	; 1
    1360:	a1 1d       	adc	r26, r1
    1362:	b1 1d       	adc	r27, r1
    1364:	82 a7       	std	Z+42, r24	; 0x2a
    1366:	93 a7       	std	Z+43, r25	; 0x2b
    1368:	a4 a7       	std	Z+44, r26	; 0x2c
    136a:	b5 a7       	std	Z+45, r27	; 0x2d
    136c:	bf ef       	ldi	r27, 0xFF	; 255
    136e:	eb 1a       	sub	r14, r27
    1370:	fb 0a       	sbc	r15, r27
    1372:	d8 01       	movw	r26, r16
    1374:	ed 91       	ld	r30, X+
    1376:	fc 91       	ld	r31, X
    1378:	82 81       	ldd	r24, Z+2	; 0x02
    137a:	90 e0       	ldi	r25, 0x00	; 0
    137c:	e8 16       	cp	r14, r24
    137e:	f9 06       	cpc	r15, r25
    1380:	f8 f2       	brcs	.-66     	; 0x1340 <dir_next+0x17c>
    1382:	82 a5       	ldd	r24, Z+42	; 0x2a
    1384:	93 a5       	ldd	r25, Z+43	; 0x2b
    1386:	a4 a5       	ldd	r26, Z+44	; 0x2c
    1388:	b5 a5       	ldd	r27, Z+45	; 0x2d
    138a:	8e 19       	sub	r24, r14
    138c:	9f 09       	sbc	r25, r15
    138e:	a1 09       	sbc	r26, r1
    1390:	b1 09       	sbc	r27, r1
    1392:	82 a7       	std	Z+42, r24	; 0x2a
    1394:	93 a7       	std	Z+43, r25	; 0x2b
    1396:	a4 a7       	std	Z+44, r26	; 0x2c
    1398:	b5 a7       	std	Z+45, r27	; 0x2d
    139a:	f8 01       	movw	r30, r16
    139c:	82 86       	std	Z+10, r8	; 0x0a
    139e:	93 86       	std	Z+11, r9	; 0x0b
    13a0:	a4 86       	std	Z+12, r10	; 0x0c
    13a2:	b5 86       	std	Z+13, r11	; 0x0d
    13a4:	b5 01       	movw	r22, r10
    13a6:	a4 01       	movw	r20, r8
    13a8:	80 81       	ld	r24, Z
    13aa:	91 81       	ldd	r25, Z+1	; 0x01
    13ac:	0f db       	rcall	.-2530   	; 0x9cc <clust2sect>
    13ae:	d8 01       	movw	r26, r16
    13b0:	1e 96       	adiw	r26, 0x0e	; 14
    13b2:	6d 93       	st	X+, r22
    13b4:	7d 93       	st	X+, r23
    13b6:	8d 93       	st	X+, r24
    13b8:	9c 93       	st	X, r25
    13ba:	51 97       	sbiw	r26, 0x11	; 17
    13bc:	f8 01       	movw	r30, r16
    13be:	d5 83       	std	Z+5, r29	; 0x05
    13c0:	c4 83       	std	Z+4, r28	; 0x04
    13c2:	cc 0c       	add	r12, r12
    13c4:	dd 1c       	adc	r13, r13
    13c6:	cc 0c       	add	r12, r12
    13c8:	dd 1c       	adc	r13, r13
    13ca:	cc 0c       	add	r12, r12
    13cc:	dd 1c       	adc	r13, r13
    13ce:	cc 0c       	add	r12, r12
    13d0:	dd 1c       	adc	r13, r13
    13d2:	cc 0c       	add	r12, r12
    13d4:	dd 1c       	adc	r13, r13
    13d6:	fe e2       	ldi	r31, 0x2E	; 46
    13d8:	cf 0e       	add	r12, r31
    13da:	d1 1c       	adc	r13, r1
    13dc:	d8 01       	movw	r26, r16
    13de:	8d 91       	ld	r24, X+
    13e0:	9c 91       	ld	r25, X
    13e2:	11 97       	sbiw	r26, 0x01	; 1
    13e4:	c8 0e       	add	r12, r24
    13e6:	d9 1e       	adc	r13, r25
    13e8:	53 96       	adiw	r26, 0x13	; 19
    13ea:	dc 92       	st	X, r13
    13ec:	ce 92       	st	-X, r12
    13ee:	52 97       	sbiw	r26, 0x12	; 18
    13f0:	80 e0       	ldi	r24, 0x00	; 0
    13f2:	15 c0       	rjmp	.+42     	; 0x141e <dir_next+0x25a>
    13f4:	84 e0       	ldi	r24, 0x04	; 4
    13f6:	13 c0       	rjmp	.+38     	; 0x141e <dir_next+0x25a>
    13f8:	84 e0       	ldi	r24, 0x04	; 4
    13fa:	11 c0       	rjmp	.+34     	; 0x141e <dir_next+0x25a>
    13fc:	84 e0       	ldi	r24, 0x04	; 4
    13fe:	0f c0       	rjmp	.+30     	; 0x141e <dir_next+0x25a>
    1400:	82 e0       	ldi	r24, 0x02	; 2
    1402:	0d c0       	rjmp	.+26     	; 0x141e <dir_next+0x25a>
    1404:	81 e0       	ldi	r24, 0x01	; 1
    1406:	0b c0       	rjmp	.+22     	; 0x141e <dir_next+0x25a>
    1408:	84 e0       	ldi	r24, 0x04	; 4
    140a:	09 c0       	rjmp	.+18     	; 0x141e <dir_next+0x25a>
    140c:	87 e0       	ldi	r24, 0x07	; 7
    140e:	07 c0       	rjmp	.+14     	; 0x141e <dir_next+0x25a>
    1410:	82 e0       	ldi	r24, 0x02	; 2
    1412:	05 c0       	rjmp	.+10     	; 0x141e <dir_next+0x25a>
    1414:	81 e0       	ldi	r24, 0x01	; 1
    1416:	03 c0       	rjmp	.+6      	; 0x141e <dir_next+0x25a>
    1418:	81 e0       	ldi	r24, 0x01	; 1
    141a:	01 c0       	rjmp	.+2      	; 0x141e <dir_next+0x25a>
    141c:	81 e0       	ldi	r24, 0x01	; 1
    141e:	df 91       	pop	r29
    1420:	cf 91       	pop	r28
    1422:	1f 91       	pop	r17
    1424:	0f 91       	pop	r16
    1426:	ff 90       	pop	r15
    1428:	ef 90       	pop	r14
    142a:	df 90       	pop	r13
    142c:	cf 90       	pop	r12
    142e:	bf 90       	pop	r11
    1430:	af 90       	pop	r10
    1432:	9f 90       	pop	r9
    1434:	8f 90       	pop	r8
    1436:	7f 90       	pop	r7
    1438:	08 95       	ret

0000143a <f_mount>:
    143a:	1f 93       	push	r17
    143c:	cf 93       	push	r28
    143e:	df 93       	push	r29
    1440:	00 d0       	rcall	.+0      	; 0x1442 <f_mount+0x8>
    1442:	00 d0       	rcall	.+0      	; 0x1444 <f_mount+0xa>
    1444:	cd b7       	in	r28, 0x3d	; 61
    1446:	de b7       	in	r29, 0x3e	; 62
    1448:	9c 83       	std	Y+4, r25	; 0x04
    144a:	8b 83       	std	Y+3, r24	; 0x03
    144c:	7e 83       	std	Y+6, r23	; 0x06
    144e:	6d 83       	std	Y+5, r22	; 0x05
    1450:	14 2f       	mov	r17, r20
    1452:	7a 83       	std	Y+2, r23	; 0x02
    1454:	69 83       	std	Y+1, r22	; 0x01
    1456:	ce 01       	movw	r24, r28
    1458:	01 96       	adiw	r24, 0x01	; 1
    145a:	0e 94 c0 00 	call	0x180	; 0x180 <get_ldnumber>
    145e:	99 23       	and	r25, r25
    1460:	34 f1       	brlt	.+76     	; 0x14ae <f_mount+0x74>
    1462:	fc 01       	movw	r30, r24
    1464:	ee 0f       	add	r30, r30
    1466:	ff 1f       	adc	r31, r31
    1468:	e0 5d       	subi	r30, 0xD0	; 208
    146a:	fd 4f       	sbci	r31, 0xFD	; 253
    146c:	01 90       	ld	r0, Z+
    146e:	f0 81       	ld	r31, Z
    1470:	e0 2d       	mov	r30, r0
    1472:	30 97       	sbiw	r30, 0x00	; 0
    1474:	09 f0       	breq	.+2      	; 0x1478 <f_mount+0x3e>
    1476:	10 82       	st	Z, r1
    1478:	eb 81       	ldd	r30, Y+3	; 0x03
    147a:	fc 81       	ldd	r31, Y+4	; 0x04
    147c:	30 97       	sbiw	r30, 0x00	; 0
    147e:	e9 f0       	breq	.+58     	; 0x14ba <f_mount+0x80>
    1480:	10 82       	st	Z, r1
    1482:	2b 81       	ldd	r18, Y+3	; 0x03
    1484:	3c 81       	ldd	r19, Y+4	; 0x04
    1486:	88 0f       	add	r24, r24
    1488:	99 1f       	adc	r25, r25
    148a:	fc 01       	movw	r30, r24
    148c:	e0 5d       	subi	r30, 0xD0	; 208
    148e:	fd 4f       	sbci	r31, 0xFD	; 253
    1490:	31 83       	std	Z+1, r19	; 0x01
    1492:	20 83       	st	Z, r18
    1494:	23 2b       	or	r18, r19
    1496:	69 f0       	breq	.+26     	; 0x14b2 <f_mount+0x78>
    1498:	11 30       	cpi	r17, 0x01	; 1
    149a:	69 f4       	brne	.+26     	; 0x14b6 <f_mount+0x7c>
    149c:	40 e0       	ldi	r20, 0x00	; 0
    149e:	be 01       	movw	r22, r28
    14a0:	6b 5f       	subi	r22, 0xFB	; 251
    14a2:	7f 4f       	sbci	r23, 0xFF	; 255
    14a4:	ce 01       	movw	r24, r28
    14a6:	03 96       	adiw	r24, 0x03	; 3
    14a8:	0e 94 fe 01 	call	0x3fc	; 0x3fc <find_volume>
    14ac:	0e c0       	rjmp	.+28     	; 0x14ca <f_mount+0x90>
    14ae:	8b e0       	ldi	r24, 0x0B	; 11
    14b0:	0c c0       	rjmp	.+24     	; 0x14ca <f_mount+0x90>
    14b2:	80 e0       	ldi	r24, 0x00	; 0
    14b4:	0a c0       	rjmp	.+20     	; 0x14ca <f_mount+0x90>
    14b6:	80 e0       	ldi	r24, 0x00	; 0
    14b8:	08 c0       	rjmp	.+16     	; 0x14ca <f_mount+0x90>
    14ba:	88 0f       	add	r24, r24
    14bc:	99 1f       	adc	r25, r25
    14be:	fc 01       	movw	r30, r24
    14c0:	e0 5d       	subi	r30, 0xD0	; 208
    14c2:	fd 4f       	sbci	r31, 0xFD	; 253
    14c4:	11 82       	std	Z+1, r1	; 0x01
    14c6:	10 82       	st	Z, r1
    14c8:	80 e0       	ldi	r24, 0x00	; 0
    14ca:	26 96       	adiw	r28, 0x06	; 6
    14cc:	0f b6       	in	r0, 0x3f	; 63
    14ce:	f8 94       	cli
    14d0:	de bf       	out	0x3e, r29	; 62
    14d2:	0f be       	out	0x3f, r0	; 63
    14d4:	cd bf       	out	0x3d, r28	; 61
    14d6:	df 91       	pop	r29
    14d8:	cf 91       	pop	r28
    14da:	1f 91       	pop	r17
    14dc:	08 95       	ret

000014de <f_open>:
    14de:	2f 92       	push	r2
    14e0:	3f 92       	push	r3
    14e2:	4f 92       	push	r4
    14e4:	5f 92       	push	r5
    14e6:	6f 92       	push	r6
    14e8:	7f 92       	push	r7
    14ea:	8f 92       	push	r8
    14ec:	9f 92       	push	r9
    14ee:	af 92       	push	r10
    14f0:	bf 92       	push	r11
    14f2:	cf 92       	push	r12
    14f4:	df 92       	push	r13
    14f6:	ef 92       	push	r14
    14f8:	ff 92       	push	r15
    14fa:	0f 93       	push	r16
    14fc:	1f 93       	push	r17
    14fe:	cf 93       	push	r28
    1500:	df 93       	push	r29
    1502:	cd b7       	in	r28, 0x3d	; 61
    1504:	de b7       	in	r29, 0x3e	; 62
    1506:	af 97       	sbiw	r28, 0x2f	; 47
    1508:	0f b6       	in	r0, 0x3f	; 63
    150a:	f8 94       	cli
    150c:	de bf       	out	0x3e, r29	; 62
    150e:	0f be       	out	0x3f, r0	; 63
    1510:	cd bf       	out	0x3d, r28	; 61
    1512:	7c a3       	std	Y+36, r23	; 0x24
    1514:	6b a3       	std	Y+35, r22	; 0x23
    1516:	00 97       	sbiw	r24, 0x00	; 0
    1518:	09 f4       	brne	.+2      	; 0x151c <f_open+0x3e>
    151a:	b9 c2       	rjmp	.+1394   	; 0x1a8e <f_open+0x5b0>
    151c:	84 2e       	mov	r8, r20
    151e:	1c 01       	movw	r2, r24
    1520:	dc 01       	movw	r26, r24
    1522:	1d 92       	st	X+, r1
    1524:	1c 92       	st	X, r1
    1526:	4e 71       	andi	r20, 0x1E	; 30
    1528:	be 01       	movw	r22, r28
    152a:	6d 5d       	subi	r22, 0xDD	; 221
    152c:	7f 4f       	sbci	r23, 0xFF	; 255
    152e:	ce 01       	movw	r24, r28
    1530:	01 96       	adiw	r24, 0x01	; 1
    1532:	0e 94 fe 01 	call	0x3fc	; 0x3fc <find_volume>
    1536:	81 11       	cpse	r24, r1
    1538:	31 c3       	rjmp	.+1634   	; 0x1b9c <f_open+0x6be>
    153a:	ce 01       	movw	r24, r28
    153c:	47 96       	adiw	r24, 0x17	; 23
    153e:	9e 8b       	std	Y+22, r25	; 0x16
    1540:	8d 8b       	std	Y+21, r24	; 0x15
    1542:	cb a0       	ldd	r12, Y+35	; 0x23
    1544:	dc a0       	ldd	r13, Y+36	; 0x24
    1546:	f6 01       	movw	r30, r12
    1548:	80 81       	ld	r24, Z
    154a:	8f 32       	cpi	r24, 0x2F	; 47
    154c:	11 f0       	breq	.+4      	; 0x1552 <f_open+0x74>
    154e:	8c 35       	cpi	r24, 0x5C	; 92
    1550:	19 f4       	brne	.+6      	; 0x1558 <f_open+0x7a>
    1552:	ff ef       	ldi	r31, 0xFF	; 255
    1554:	cf 1a       	sub	r12, r31
    1556:	df 0a       	sbc	r13, r31
    1558:	28 2d       	mov	r18, r8
    155a:	2f 71       	andi	r18, 0x1F	; 31
    155c:	2d a7       	std	Y+45, r18	; 0x2d
    155e:	1f 82       	std	Y+7, r1	; 0x07
    1560:	18 86       	std	Y+8, r1	; 0x08
    1562:	19 86       	std	Y+9, r1	; 0x09
    1564:	1a 86       	std	Y+10, r1	; 0x0a
    1566:	d6 01       	movw	r26, r12
    1568:	8c 91       	ld	r24, X
    156a:	80 32       	cpi	r24, 0x20	; 32
    156c:	68 f4       	brcc	.+26     	; 0x1588 <f_open+0xaa>
    156e:	60 e0       	ldi	r22, 0x00	; 0
    1570:	70 e0       	ldi	r23, 0x00	; 0
    1572:	ce 01       	movw	r24, r28
    1574:	01 96       	adiw	r24, 0x01	; 1
    1576:	3b db       	rcall	.-2442   	; 0xbee <dir_sdi>
    1578:	1c 8a       	std	Y+20, r1	; 0x14
    157a:	1b 8a       	std	Y+19, r1	; 0x13
    157c:	e1 2c       	mov	r14, r1
    157e:	f1 2c       	mov	r15, r1
    1580:	88 23       	and	r24, r24
    1582:	09 f4       	brne	.+2      	; 0x1586 <f_open+0xa8>
    1584:	b6 c2       	rjmp	.+1388   	; 0x1af2 <f_open+0x614>
    1586:	bc c2       	rjmp	.+1400   	; 0x1b00 <f_open+0x622>
    1588:	68 94       	set
    158a:	bb 24       	eor	r11, r11
    158c:	b5 f8       	bld	r11, 5
    158e:	a1 2c       	mov	r10, r1
    1590:	91 2c       	mov	r9, r1
    1592:	68 94       	set
    1594:	77 24       	eor	r7, r7
    1596:	73 f8       	bld	r7, 3
    1598:	51 2c       	mov	r5, r1
    159a:	61 2c       	mov	r6, r1
    159c:	7e a6       	std	Y+46, r7	; 0x2e
    159e:	5f a6       	std	Y+47, r5	; 0x2f
    15a0:	41 2c       	mov	r4, r1
    15a2:	f6 01       	movw	r30, r12
    15a4:	9f 01       	movw	r18, r30
    15a6:	91 91       	ld	r25, Z+
    15a8:	9f 32       	cpi	r25, 0x2F	; 47
    15aa:	e1 f3       	breq	.-8      	; 0x15a4 <f_open+0xc6>
    15ac:	9c 35       	cpi	r25, 0x5C	; 92
    15ae:	d1 f3       	breq	.-12     	; 0x15a4 <f_open+0xc6>
    15b0:	c9 01       	movw	r24, r18
    15b2:	ed 89       	ldd	r30, Y+21	; 0x15
    15b4:	fe 89       	ldd	r31, Y+22	; 0x16
    15b6:	df 01       	movw	r26, r30
    15b8:	9f 01       	movw	r18, r30
    15ba:	25 5f       	subi	r18, 0xF5	; 245
    15bc:	3f 4f       	sbci	r19, 0xFF	; 255
    15be:	bd 92       	st	X+, r11
    15c0:	a2 17       	cp	r26, r18
    15c2:	b3 07       	cpc	r27, r19
    15c4:	e1 f7       	brne	.-8      	; 0x15be <f_open+0xe0>
    15c6:	2a 2d       	mov	r18, r10
    15c8:	39 2d       	mov	r19, r9
    15ca:	6a 2d       	mov	r22, r10
    15cc:	79 2d       	mov	r23, r9
    15ce:	47 2d       	mov	r20, r7
    15d0:	55 2d       	mov	r21, r5
    15d2:	6d a2       	std	Y+37, r6	; 0x25
    15d4:	8f 01       	movw	r16, r30
    15d6:	fc 01       	movw	r30, r24
    15d8:	6b 01       	movw	r12, r22
    15da:	bf ef       	ldi	r27, 0xFF	; 255
    15dc:	cb 1a       	sub	r12, r27
    15de:	db 0a       	sbc	r13, r27
    15e0:	df 01       	movw	r26, r30
    15e2:	a6 0f       	add	r26, r22
    15e4:	b7 1f       	adc	r27, r23
    15e6:	9c 91       	ld	r25, X
    15e8:	91 32       	cpi	r25, 0x21	; 33
    15ea:	08 f4       	brcc	.+2      	; 0x15ee <f_open+0x110>
    15ec:	5e c2       	rjmp	.+1212   	; 0x1aaa <f_open+0x5cc>
    15ee:	9f 32       	cpi	r25, 0x2F	; 47
    15f0:	09 f4       	brne	.+2      	; 0x15f4 <f_open+0x116>
    15f2:	62 c2       	rjmp	.+1220   	; 0x1ab8 <f_open+0x5da>
    15f4:	9c 35       	cpi	r25, 0x5C	; 92
    15f6:	09 f4       	brne	.+2      	; 0x15fa <f_open+0x11c>
    15f8:	5f c2       	rjmp	.+1214   	; 0x1ab8 <f_open+0x5da>
    15fa:	9e 32       	cpi	r25, 0x2E	; 46
    15fc:	09 f4       	brne	.+2      	; 0x1600 <f_open+0x122>
    15fe:	49 c2       	rjmp	.+1170   	; 0x1a92 <f_open+0x5b4>
    1600:	24 17       	cp	r18, r20
    1602:	35 07       	cpc	r19, r21
    1604:	08 f0       	brcs	.+2      	; 0x1608 <f_open+0x12a>
    1606:	9e c2       	rjmp	.+1340   	; 0x1b44 <f_open+0x666>
    1608:	0a c0       	rjmp	.+20     	; 0x161e <f_open+0x140>
    160a:	2d a1       	ldd	r18, Y+37	; 0x25
    160c:	22 0f       	add	r18, r18
    160e:	22 0f       	add	r18, r18
    1610:	2d a3       	std	Y+37, r18	; 0x25
    1612:	b6 01       	movw	r22, r12
    1614:	2e a5       	ldd	r18, Y+46	; 0x2e
    1616:	3f a5       	ldd	r19, Y+47	; 0x2f
    1618:	4b e0       	ldi	r20, 0x0B	; 11
    161a:	54 2d       	mov	r21, r4
    161c:	dd cf       	rjmp	.-70     	; 0x15d8 <f_open+0xfa>
    161e:	99 23       	and	r25, r25
    1620:	1c f4       	brge	.+6      	; 0x1628 <f_open+0x14a>
    1622:	8d a1       	ldd	r24, Y+37	; 0x25
    1624:	83 60       	ori	r24, 0x03	; 3
    1626:	8d a3       	std	Y+37, r24	; 0x25
    1628:	8f e7       	ldi	r24, 0x7F	; 127
    162a:	89 0f       	add	r24, r25
    162c:	8f 31       	cpi	r24, 0x1F	; 31
    162e:	20 f0       	brcs	.+8      	; 0x1638 <f_open+0x15a>
    1630:	80 e2       	ldi	r24, 0x20	; 32
    1632:	89 0f       	add	r24, r25
    1634:	8d 31       	cpi	r24, 0x1D	; 29
    1636:	08 f5       	brcc	.+66     	; 0x167a <f_open+0x19c>
    1638:	6e 5f       	subi	r22, 0xFE	; 254
    163a:	7f 4f       	sbci	r23, 0xFF	; 255
    163c:	df 01       	movw	r26, r30
    163e:	ac 0d       	add	r26, r12
    1640:	bd 1d       	adc	r27, r13
    1642:	8c 91       	ld	r24, X
    1644:	a0 ec       	ldi	r26, 0xC0	; 192
    1646:	a8 0f       	add	r26, r24
    1648:	af 33       	cpi	r26, 0x3F	; 63
    164a:	28 f0       	brcs	.+10     	; 0x1656 <f_open+0x178>
    164c:	a0 e8       	ldi	r26, 0x80	; 128
    164e:	a8 0f       	add	r26, r24
    1650:	ad 37       	cpi	r26, 0x7D	; 125
    1652:	08 f0       	brcs	.+2      	; 0x1656 <f_open+0x178>
    1654:	77 c2       	rjmp	.+1262   	; 0x1b44 <f_open+0x666>
    1656:	da 01       	movw	r26, r20
    1658:	11 97       	sbiw	r26, 0x01	; 1
    165a:	2a 17       	cp	r18, r26
    165c:	3b 07       	cpc	r19, r27
    165e:	08 f0       	brcs	.+2      	; 0x1662 <f_open+0x184>
    1660:	71 c2       	rjmp	.+1250   	; 0x1b44 <f_open+0x666>
    1662:	d8 01       	movw	r26, r16
    1664:	a2 0f       	add	r26, r18
    1666:	b3 1f       	adc	r27, r19
    1668:	9c 93       	st	X, r25
    166a:	d9 01       	movw	r26, r18
    166c:	11 96       	adiw	r26, 0x01	; 1
    166e:	a0 0f       	add	r26, r16
    1670:	b1 1f       	adc	r27, r17
    1672:	2e 5f       	subi	r18, 0xFE	; 254
    1674:	3f 4f       	sbci	r19, 0xFF	; 255
    1676:	8c 93       	st	X, r24
    1678:	af cf       	rjmp	.-162    	; 0x15d8 <f_open+0xfa>
    167a:	e9 2e       	mov	r14, r25
    167c:	f1 2c       	mov	r15, r1
    167e:	a2 e2       	ldi	r26, 0x22	; 34
    1680:	ea 16       	cp	r14, r26
    1682:	f1 04       	cpc	r15, r1
    1684:	09 f4       	brne	.+2      	; 0x1688 <f_open+0x1aa>
    1686:	74 c2       	rjmp	.+1256   	; 0x1b70 <f_open+0x692>
    1688:	a2 e0       	ldi	r26, 0x02	; 2
    168a:	b2 e0       	ldi	r27, 0x02	; 2
    168c:	69 2f       	mov	r22, r25
    168e:	8d 91       	ld	r24, X+
    1690:	88 23       	and	r24, r24
    1692:	09 f4       	brne	.+2      	; 0x1696 <f_open+0x1b8>
    1694:	03 c2       	rjmp	.+1030   	; 0x1a9c <f_open+0x5be>
    1696:	90 e0       	ldi	r25, 0x00	; 0
    1698:	e8 16       	cp	r14, r24
    169a:	f9 06       	cpc	r15, r25
    169c:	c1 f7       	brne	.-16     	; 0x168e <f_open+0x1b0>
    169e:	86 e0       	ldi	r24, 0x06	; 6
    16a0:	6e c2       	rjmp	.+1244   	; 0x1b7e <f_open+0x6a0>
    16a2:	bd a1       	ldd	r27, Y+37	; 0x25
    16a4:	b2 60       	ori	r27, 0x02	; 2
    16a6:	bd a3       	std	Y+37, r27	; 0x25
    16a8:	08 c0       	rjmp	.+16     	; 0x16ba <f_open+0x1dc>
    16aa:	8f e9       	ldi	r24, 0x9F	; 159
    16ac:	89 0f       	add	r24, r25
    16ae:	8a 31       	cpi	r24, 0x1A	; 26
    16b0:	20 f4       	brcc	.+8      	; 0x16ba <f_open+0x1dc>
    16b2:	8d a1       	ldd	r24, Y+37	; 0x25
    16b4:	81 60       	ori	r24, 0x01	; 1
    16b6:	8d a3       	std	Y+37, r24	; 0x25
    16b8:	90 52       	subi	r25, 0x20	; 32
    16ba:	d8 01       	movw	r26, r16
    16bc:	a2 0f       	add	r26, r18
    16be:	b3 1f       	adc	r27, r19
    16c0:	9c 93       	st	X, r25
    16c2:	2f 5f       	subi	r18, 0xFF	; 255
    16c4:	3f 4f       	sbci	r19, 0xFF	; 255
    16c6:	b6 01       	movw	r22, r12
    16c8:	87 cf       	rjmp	.-242    	; 0x15d8 <f_open+0xfa>
    16ca:	23 2b       	or	r18, r19
    16cc:	09 f4       	brne	.+2      	; 0x16d0 <f_open+0x1f2>
    16ce:	3a c2       	rjmp	.+1140   	; 0x1b44 <f_open+0x666>
    16d0:	20 81       	ld	r18, Z
    16d2:	25 3e       	cpi	r18, 0xE5	; 229
    16d4:	11 f4       	brne	.+4      	; 0x16da <f_open+0x1fc>
    16d6:	a5 e0       	ldi	r26, 0x05	; 5
    16d8:	a0 83       	st	Z, r26
    16da:	48 30       	cpi	r20, 0x08	; 8
    16dc:	51 05       	cpc	r21, r1
    16de:	19 f4       	brne	.+6      	; 0x16e6 <f_open+0x208>
    16e0:	99 0f       	add	r25, r25
    16e2:	99 0f       	add	r25, r25
    16e4:	9d a3       	std	Y+37, r25	; 0x25
    16e6:	9d a1       	ldd	r25, Y+37	; 0x25
    16e8:	93 70       	andi	r25, 0x03	; 3
    16ea:	91 30       	cpi	r25, 0x01	; 1
    16ec:	09 f4       	brne	.+2      	; 0x16f0 <f_open+0x212>
    16ee:	80 61       	ori	r24, 0x10	; 16
    16f0:	9d a1       	ldd	r25, Y+37	; 0x25
    16f2:	9c 70       	andi	r25, 0x0C	; 12
    16f4:	94 30       	cpi	r25, 0x04	; 4
    16f6:	09 f4       	brne	.+2      	; 0x16fa <f_open+0x21c>
    16f8:	88 60       	ori	r24, 0x08	; 8
    16fa:	83 87       	std	Z+11, r24	; 0x0b
    16fc:	6a 2d       	mov	r22, r10
    16fe:	79 2d       	mov	r23, r9
    1700:	ce 01       	movw	r24, r28
    1702:	01 96       	adiw	r24, 0x01	; 1
    1704:	74 da       	rcall	.-2840   	; 0xbee <dir_sdi>
    1706:	81 11       	cpse	r24, r1
    1708:	e3 c1       	rjmp	.+966    	; 0x1ad0 <f_open+0x5f2>
    170a:	4f 85       	ldd	r20, Y+15	; 0x0f
    170c:	58 89       	ldd	r21, Y+16	; 0x10
    170e:	69 89       	ldd	r22, Y+17	; 0x11
    1710:	7a 89       	ldd	r23, Y+18	; 0x12
    1712:	89 81       	ldd	r24, Y+1	; 0x01
    1714:	9a 81       	ldd	r25, Y+2	; 0x02
    1716:	0e 94 62 01 	call	0x2c4	; 0x2c4 <move_window>
    171a:	81 11       	cpse	r24, r1
    171c:	d9 c1       	rjmp	.+946    	; 0x1ad0 <f_open+0x5f2>
    171e:	eb 88       	ldd	r14, Y+19	; 0x13
    1720:	fc 88       	ldd	r15, Y+20	; 0x14
    1722:	f7 01       	movw	r30, r14
    1724:	80 81       	ld	r24, Z
    1726:	88 23       	and	r24, r24
    1728:	c9 f0       	breq	.+50     	; 0x175c <f_open+0x27e>
    172a:	83 85       	ldd	r24, Z+11	; 0x0b
    172c:	83 fd       	sbrc	r24, 3
    172e:	0e c0       	rjmp	.+28     	; 0x174c <f_open+0x26e>
    1730:	2d 89       	ldd	r18, Y+21	; 0x15
    1732:	3e 89       	ldd	r19, Y+22	; 0x16
    1734:	d9 01       	movw	r26, r18
    1736:	c7 01       	movw	r24, r14
    1738:	0b 96       	adiw	r24, 0x0b	; 11
    173a:	04 c0       	rjmp	.+8      	; 0x1744 <f_open+0x266>
    173c:	e8 17       	cp	r30, r24
    173e:	f9 07       	cpc	r31, r25
    1740:	09 f4       	brne	.+2      	; 0x1744 <f_open+0x266>
    1742:	c1 c1       	rjmp	.+898    	; 0x1ac6 <f_open+0x5e8>
    1744:	51 91       	ld	r21, Z+
    1746:	4d 91       	ld	r20, X+
    1748:	54 17       	cp	r21, r20
    174a:	c1 f3       	breq	.-16     	; 0x173c <f_open+0x25e>
    174c:	6a 2d       	mov	r22, r10
    174e:	79 2d       	mov	r23, r9
    1750:	ce 01       	movw	r24, r28
    1752:	01 96       	adiw	r24, 0x01	; 1
    1754:	37 dd       	rcall	.-1426   	; 0x11c4 <dir_next>
    1756:	88 23       	and	r24, r24
    1758:	c1 f2       	breq	.-80     	; 0x170a <f_open+0x22c>
    175a:	ba c1       	rjmp	.+884    	; 0x1ad0 <f_open+0x5f2>
    175c:	ed 89       	ldd	r30, Y+21	; 0x15
    175e:	fe 89       	ldd	r31, Y+22	; 0x16
    1760:	93 85       	ldd	r25, Z+11	; 0x0b
    1762:	92 fd       	sbrc	r25, 2
    1764:	07 c2       	rjmp	.+1038   	; 0x1b74 <f_open+0x696>
    1766:	85 e0       	ldi	r24, 0x05	; 5
    1768:	0a c2       	rjmp	.+1044   	; 0x1b7e <f_open+0x6a0>
    176a:	d7 01       	movw	r26, r14
    176c:	1b 96       	adiw	r26, 0x0b	; 11
    176e:	8c 91       	ld	r24, X
    1770:	1b 97       	sbiw	r26, 0x0b	; 11
    1772:	84 ff       	sbrs	r24, 4
    1774:	01 c2       	rjmp	.+1026   	; 0x1b78 <f_open+0x69a>
    1776:	5a 96       	adiw	r26, 0x1a	; 26
    1778:	8d 91       	ld	r24, X+
    177a:	9c 91       	ld	r25, X
    177c:	5b 97       	sbiw	r26, 0x1b	; 27
    177e:	a0 e0       	ldi	r26, 0x00	; 0
    1780:	b0 e0       	ldi	r27, 0x00	; 0
    1782:	e9 81       	ldd	r30, Y+1	; 0x01
    1784:	fa 81       	ldd	r31, Y+2	; 0x02
    1786:	20 81       	ld	r18, Z
    1788:	23 30       	cpi	r18, 0x03	; 3
    178a:	61 f4       	brne	.+24     	; 0x17a4 <f_open+0x2c6>
    178c:	f7 01       	movw	r30, r14
    178e:	44 89       	ldd	r20, Z+20	; 0x14
    1790:	55 89       	ldd	r21, Z+21	; 0x15
    1792:	60 e0       	ldi	r22, 0x00	; 0
    1794:	70 e0       	ldi	r23, 0x00	; 0
    1796:	ba 01       	movw	r22, r20
    1798:	55 27       	eor	r21, r21
    179a:	44 27       	eor	r20, r20
    179c:	84 2b       	or	r24, r20
    179e:	95 2b       	or	r25, r21
    17a0:	a6 2b       	or	r26, r22
    17a2:	b7 2b       	or	r27, r23
    17a4:	8f 83       	std	Y+7, r24	; 0x07
    17a6:	98 87       	std	Y+8, r25	; 0x08
    17a8:	a9 87       	std	Y+9, r26	; 0x09
    17aa:	ba 87       	std	Y+10, r27	; 0x0a
    17ac:	fa ce       	rjmp	.-524    	; 0x15a2 <f_open+0xc4>
    17ae:	81 11       	cpse	r24, r1
    17b0:	d3 c1       	rjmp	.+934    	; 0x1b58 <f_open+0x67a>
    17b2:	44 c0       	rjmp	.+136    	; 0x183c <f_open+0x35e>
    17b4:	60 e0       	ldi	r22, 0x00	; 0
    17b6:	70 e0       	ldi	r23, 0x00	; 0
    17b8:	ce 01       	movw	r24, r28
    17ba:	01 96       	adiw	r24, 0x01	; 1
    17bc:	18 da       	rcall	.-3024   	; 0xbee <dir_sdi>
    17be:	81 11       	cpse	r24, r1
    17c0:	ea c1       	rjmp	.+980    	; 0x1b96 <f_open+0x6b8>
    17c2:	4f 85       	ldd	r20, Y+15	; 0x0f
    17c4:	58 89       	ldd	r21, Y+16	; 0x10
    17c6:	69 89       	ldd	r22, Y+17	; 0x11
    17c8:	7a 89       	ldd	r23, Y+18	; 0x12
    17ca:	89 81       	ldd	r24, Y+1	; 0x01
    17cc:	9a 81       	ldd	r25, Y+2	; 0x02
    17ce:	0e 94 62 01 	call	0x2c4	; 0x2c4 <move_window>
    17d2:	81 11       	cpse	r24, r1
    17d4:	e0 c1       	rjmp	.+960    	; 0x1b96 <f_open+0x6b8>
    17d6:	eb 89       	ldd	r30, Y+19	; 0x13
    17d8:	fc 89       	ldd	r31, Y+20	; 0x14
    17da:	80 81       	ld	r24, Z
    17dc:	85 3e       	cpi	r24, 0xE5	; 229
    17de:	51 f0       	breq	.+20     	; 0x17f4 <f_open+0x316>
    17e0:	88 23       	and	r24, r24
    17e2:	41 f0       	breq	.+16     	; 0x17f4 <f_open+0x316>
    17e4:	61 e0       	ldi	r22, 0x01	; 1
    17e6:	70 e0       	ldi	r23, 0x00	; 0
    17e8:	ce 01       	movw	r24, r28
    17ea:	01 96       	adiw	r24, 0x01	; 1
    17ec:	eb dc       	rcall	.-1578   	; 0x11c4 <dir_next>
    17ee:	88 23       	and	r24, r24
    17f0:	41 f3       	breq	.-48     	; 0x17c2 <f_open+0x2e4>
    17f2:	d1 c1       	rjmp	.+930    	; 0x1b96 <f_open+0x6b8>
    17f4:	4f 85       	ldd	r20, Y+15	; 0x0f
    17f6:	58 89       	ldd	r21, Y+16	; 0x10
    17f8:	69 89       	ldd	r22, Y+17	; 0x11
    17fa:	7a 89       	ldd	r23, Y+18	; 0x12
    17fc:	89 81       	ldd	r24, Y+1	; 0x01
    17fe:	9a 81       	ldd	r25, Y+2	; 0x02
    1800:	0e 94 62 01 	call	0x2c4	; 0x2c4 <move_window>
    1804:	81 11       	cpse	r24, r1
    1806:	ae c1       	rjmp	.+860    	; 0x1b64 <f_open+0x686>
    1808:	eb 89       	ldd	r30, Y+19	; 0x13
    180a:	fc 89       	ldd	r31, Y+20	; 0x14
    180c:	cf 01       	movw	r24, r30
    180e:	80 96       	adiw	r24, 0x20	; 32
    1810:	11 92       	st	Z+, r1
    1812:	e8 17       	cp	r30, r24
    1814:	f9 07       	cpc	r31, r25
    1816:	e1 f7       	brne	.-8      	; 0x1810 <f_open+0x332>
    1818:	6d 89       	ldd	r22, Y+21	; 0x15
    181a:	7e 89       	ldd	r23, Y+22	; 0x16
    181c:	4b e0       	ldi	r20, 0x0B	; 11
    181e:	50 e0       	ldi	r21, 0x00	; 0
    1820:	8b 89       	ldd	r24, Y+19	; 0x13
    1822:	9c 89       	ldd	r25, Y+20	; 0x14
    1824:	0e 94 94 00 	call	0x128	; 0x128 <mem_cpy>
    1828:	e9 81       	ldd	r30, Y+1	; 0x01
    182a:	fa 81       	ldd	r31, Y+2	; 0x02
    182c:	81 e0       	ldi	r24, 0x01	; 1
    182e:	84 83       	std	Z+4, r24	; 0x04
    1830:	fd a5       	ldd	r31, Y+45	; 0x2d
    1832:	f8 60       	ori	r31, 0x08	; 8
    1834:	fd a7       	std	Y+45, r31	; 0x2d
    1836:	eb 88       	ldd	r14, Y+19	; 0x13
    1838:	fc 88       	ldd	r15, Y+20	; 0x14
    183a:	08 c0       	rjmp	.+16     	; 0x184c <f_open+0x36e>
    183c:	d7 01       	movw	r26, r14
    183e:	1b 96       	adiw	r26, 0x0b	; 11
    1840:	8c 91       	ld	r24, X
    1842:	81 71       	andi	r24, 0x11	; 17
    1844:	09 f0       	breq	.+2      	; 0x1848 <f_open+0x36a>
    1846:	65 c1       	rjmp	.+714    	; 0x1b12 <f_open+0x634>
    1848:	82 fc       	sbrc	r8, 2
    184a:	65 c1       	rjmp	.+714    	; 0x1b16 <f_open+0x638>
    184c:	bd a5       	ldd	r27, Y+45	; 0x2d
    184e:	b3 ff       	sbrs	r27, 3
    1850:	c9 c0       	rjmp	.+402    	; 0x19e4 <f_open+0x506>
    1852:	80 e0       	ldi	r24, 0x00	; 0
    1854:	90 e0       	ldi	r25, 0x00	; 0
    1856:	a4 e8       	ldi	r26, 0x84	; 132
    1858:	b0 ec       	ldi	r27, 0xC0	; 192
    185a:	f7 01       	movw	r30, r14
    185c:	86 87       	std	Z+14, r24	; 0x0e
    185e:	97 87       	std	Z+15, r25	; 0x0f
    1860:	a0 8b       	std	Z+16, r26	; 0x10
    1862:	b1 8b       	std	Z+17, r27	; 0x11
    1864:	86 8b       	std	Z+22, r24	; 0x16
    1866:	97 8b       	std	Z+23, r25	; 0x17
    1868:	a0 8f       	std	Z+24, r26	; 0x18
    186a:	b1 8f       	std	Z+25, r27	; 0x19
    186c:	13 86       	std	Z+11, r1	; 0x0b
    186e:	d7 01       	movw	r26, r14
    1870:	14 8e       	std	Z+28, r1	; 0x1c
    1872:	15 8e       	std	Z+29, r1	; 0x1d
    1874:	16 8e       	std	Z+30, r1	; 0x1e
    1876:	17 8e       	std	Z+31, r1	; 0x1f
    1878:	c9 80       	ldd	r12, Y+1	; 0x01
    187a:	da 80       	ldd	r13, Y+2	; 0x02
    187c:	82 8c       	ldd	r8, Z+26	; 0x1a
    187e:	93 8c       	ldd	r9, Z+27	; 0x1b
    1880:	a1 2c       	mov	r10, r1
    1882:	b1 2c       	mov	r11, r1
    1884:	f6 01       	movw	r30, r12
    1886:	80 81       	ld	r24, Z
    1888:	83 30       	cpi	r24, 0x03	; 3
    188a:	69 f4       	brne	.+26     	; 0x18a6 <f_open+0x3c8>
    188c:	54 96       	adiw	r26, 0x14	; 20
    188e:	8d 91       	ld	r24, X+
    1890:	9c 91       	ld	r25, X
    1892:	55 97       	sbiw	r26, 0x15	; 21
    1894:	a0 e0       	ldi	r26, 0x00	; 0
    1896:	b0 e0       	ldi	r27, 0x00	; 0
    1898:	dc 01       	movw	r26, r24
    189a:	99 27       	eor	r25, r25
    189c:	88 27       	eor	r24, r24
    189e:	88 2a       	or	r8, r24
    18a0:	99 2a       	or	r9, r25
    18a2:	aa 2a       	or	r10, r26
    18a4:	bb 2a       	or	r11, r27
    18a6:	d7 01       	movw	r26, r14
    18a8:	5b 96       	adiw	r26, 0x1b	; 27
    18aa:	1c 92       	st	X, r1
    18ac:	1e 92       	st	-X, r1
    18ae:	5a 97       	sbiw	r26, 0x1a	; 26
    18b0:	55 96       	adiw	r26, 0x15	; 21
    18b2:	1c 92       	st	X, r1
    18b4:	1e 92       	st	-X, r1
    18b6:	54 97       	sbiw	r26, 0x14	; 20
    18b8:	81 e0       	ldi	r24, 0x01	; 1
    18ba:	f6 01       	movw	r30, r12
    18bc:	84 83       	std	Z+4, r24	; 0x04
    18be:	81 14       	cp	r8, r1
    18c0:	91 04       	cpc	r9, r1
    18c2:	a1 04       	cpc	r10, r1
    18c4:	b1 04       	cpc	r11, r1
    18c6:	09 f4       	brne	.+2      	; 0x18ca <f_open+0x3ec>
    18c8:	8d c0       	rjmp	.+282    	; 0x19e4 <f_open+0x506>
    18ca:	22 a5       	ldd	r18, Z+42	; 0x2a
    18cc:	33 a5       	ldd	r19, Z+43	; 0x2b
    18ce:	44 a5       	ldd	r20, Z+44	; 0x2c
    18d0:	55 a5       	ldd	r21, Z+45	; 0x2d
    18d2:	29 a7       	std	Y+41, r18	; 0x29
    18d4:	3a a7       	std	Y+42, r19	; 0x2a
    18d6:	4b a7       	std	Y+43, r20	; 0x2b
    18d8:	5c a7       	std	Y+44, r21	; 0x2c
    18da:	b2 e0       	ldi	r27, 0x02	; 2
    18dc:	8b 16       	cp	r8, r27
    18de:	91 04       	cpc	r9, r1
    18e0:	a1 04       	cpc	r10, r1
    18e2:	b1 04       	cpc	r11, r1
    18e4:	08 f4       	brcc	.+2      	; 0x18e8 <f_open+0x40a>
    18e6:	1c c1       	rjmp	.+568    	; 0x1b20 <f_open+0x642>
    18e8:	82 89       	ldd	r24, Z+18	; 0x12
    18ea:	93 89       	ldd	r25, Z+19	; 0x13
    18ec:	a4 89       	ldd	r26, Z+20	; 0x14
    18ee:	b5 89       	ldd	r27, Z+21	; 0x15
    18f0:	88 16       	cp	r8, r24
    18f2:	99 06       	cpc	r9, r25
    18f4:	aa 06       	cpc	r10, r26
    18f6:	bb 06       	cpc	r11, r27
    18f8:	08 f0       	brcs	.+2      	; 0x18fc <f_open+0x41e>
    18fa:	14 c1       	rjmp	.+552    	; 0x1b24 <f_open+0x646>
    18fc:	8d a2       	std	Y+37, r8	; 0x25
    18fe:	9e a2       	std	Y+38, r9	; 0x26
    1900:	af a2       	std	Y+39, r10	; 0x27
    1902:	b8 a6       	std	Y+40, r11	; 0x28
    1904:	3f c0       	rjmp	.+126    	; 0x1984 <f_open+0x4a6>
    1906:	4d a1       	ldd	r20, Y+37	; 0x25
    1908:	5e a1       	ldd	r21, Y+38	; 0x26
    190a:	6f a1       	ldd	r22, Y+39	; 0x27
    190c:	78 a5       	ldd	r23, Y+40	; 0x28
    190e:	c6 01       	movw	r24, r12
    1910:	8b d8       	rcall	.-3818   	; 0xa28 <get_fat>
    1912:	2b 01       	movw	r4, r22
    1914:	3c 01       	movw	r6, r24
    1916:	61 15       	cp	r22, r1
    1918:	71 05       	cpc	r23, r1
    191a:	81 05       	cpc	r24, r1
    191c:	91 05       	cpc	r25, r1
    191e:	09 f4       	brne	.+2      	; 0x1922 <f_open+0x444>
    1920:	40 c0       	rjmp	.+128    	; 0x19a2 <f_open+0x4c4>
    1922:	61 30       	cpi	r22, 0x01	; 1
    1924:	71 05       	cpc	r23, r1
    1926:	81 05       	cpc	r24, r1
    1928:	91 05       	cpc	r25, r1
    192a:	09 f4       	brne	.+2      	; 0x192e <f_open+0x450>
    192c:	fd c0       	rjmp	.+506    	; 0x1b28 <f_open+0x64a>
    192e:	6f 3f       	cpi	r22, 0xFF	; 255
    1930:	7f 4f       	sbci	r23, 0xFF	; 255
    1932:	8f 4f       	sbci	r24, 0xFF	; 255
    1934:	9f 4f       	sbci	r25, 0xFF	; 255
    1936:	09 f4       	brne	.+2      	; 0x193a <f_open+0x45c>
    1938:	f9 c0       	rjmp	.+498    	; 0x1b2c <f_open+0x64e>
    193a:	00 e0       	ldi	r16, 0x00	; 0
    193c:	10 e0       	ldi	r17, 0x00	; 0
    193e:	98 01       	movw	r18, r16
    1940:	4d a1       	ldd	r20, Y+37	; 0x25
    1942:	5e a1       	ldd	r21, Y+38	; 0x26
    1944:	6f a1       	ldd	r22, Y+39	; 0x27
    1946:	78 a5       	ldd	r23, Y+40	; 0x28
    1948:	c6 01       	movw	r24, r12
    194a:	0c da       	rcall	.-3048   	; 0xd64 <put_fat>
    194c:	81 11       	cpse	r24, r1
    194e:	ef c0       	rjmp	.+478    	; 0x1b2e <f_open+0x650>
    1950:	f6 01       	movw	r30, r12
    1952:	86 85       	ldd	r24, Z+14	; 0x0e
    1954:	97 85       	ldd	r25, Z+15	; 0x0f
    1956:	a0 89       	ldd	r26, Z+16	; 0x10
    1958:	b1 89       	ldd	r27, Z+17	; 0x11
    195a:	8f 3f       	cpi	r24, 0xFF	; 255
    195c:	ff ef       	ldi	r31, 0xFF	; 255
    195e:	9f 07       	cpc	r25, r31
    1960:	af 07       	cpc	r26, r31
    1962:	bf 07       	cpc	r27, r31
    1964:	59 f0       	breq	.+22     	; 0x197c <f_open+0x49e>
    1966:	01 96       	adiw	r24, 0x01	; 1
    1968:	a1 1d       	adc	r26, r1
    196a:	b1 1d       	adc	r27, r1
    196c:	f6 01       	movw	r30, r12
    196e:	86 87       	std	Z+14, r24	; 0x0e
    1970:	97 87       	std	Z+15, r25	; 0x0f
    1972:	a0 8b       	std	Z+16, r26	; 0x10
    1974:	b1 8b       	std	Z+17, r27	; 0x11
    1976:	85 81       	ldd	r24, Z+5	; 0x05
    1978:	81 60       	ori	r24, 0x01	; 1
    197a:	85 83       	std	Z+5, r24	; 0x05
    197c:	4d a2       	std	Y+37, r4	; 0x25
    197e:	5e a2       	std	Y+38, r5	; 0x26
    1980:	6f a2       	std	Y+39, r6	; 0x27
    1982:	78 a6       	std	Y+40, r7	; 0x28
    1984:	f6 01       	movw	r30, r12
    1986:	82 89       	ldd	r24, Z+18	; 0x12
    1988:	93 89       	ldd	r25, Z+19	; 0x13
    198a:	a4 89       	ldd	r26, Z+20	; 0x14
    198c:	b5 89       	ldd	r27, Z+21	; 0x15
    198e:	2d a1       	ldd	r18, Y+37	; 0x25
    1990:	3e a1       	ldd	r19, Y+38	; 0x26
    1992:	4f a1       	ldd	r20, Y+39	; 0x27
    1994:	58 a5       	ldd	r21, Y+40	; 0x28
    1996:	28 17       	cp	r18, r24
    1998:	39 07       	cpc	r19, r25
    199a:	4a 07       	cpc	r20, r26
    199c:	5b 07       	cpc	r21, r27
    199e:	08 f4       	brcc	.+2      	; 0x19a2 <f_open+0x4c4>
    19a0:	b2 cf       	rjmp	.-156    	; 0x1906 <f_open+0x428>
    19a2:	89 81       	ldd	r24, Y+1	; 0x01
    19a4:	9a 81       	ldd	r25, Y+2	; 0x02
    19a6:	31 e0       	ldi	r19, 0x01	; 1
    19a8:	83 1a       	sub	r8, r19
    19aa:	91 08       	sbc	r9, r1
    19ac:	a1 08       	sbc	r10, r1
    19ae:	b1 08       	sbc	r11, r1
    19b0:	dc 01       	movw	r26, r24
    19b2:	1a 96       	adiw	r26, 0x0a	; 10
    19b4:	8d 92       	st	X+, r8
    19b6:	9d 92       	st	X+, r9
    19b8:	ad 92       	st	X+, r10
    19ba:	bc 92       	st	X, r11
    19bc:	1d 97       	sbiw	r26, 0x0d	; 13
    19be:	49 a5       	ldd	r20, Y+41	; 0x29
    19c0:	5a a5       	ldd	r21, Y+42	; 0x2a
    19c2:	6b a5       	ldd	r22, Y+43	; 0x2b
    19c4:	7c a5       	ldd	r23, Y+44	; 0x2c
    19c6:	0e 94 62 01 	call	0x2c4	; 0x2c4 <move_window>
    19ca:	88 23       	and	r24, r24
    19cc:	71 f0       	breq	.+28     	; 0x19ea <f_open+0x50c>
    19ce:	e6 c0       	rjmp	.+460    	; 0x1b9c <f_open+0x6be>
    19d0:	81 11       	cpse	r24, r1
    19d2:	b4 c0       	rjmp	.+360    	; 0x1b3c <f_open+0x65e>
    19d4:	f7 01       	movw	r30, r14
    19d6:	83 85       	ldd	r24, Z+11	; 0x0b
    19d8:	84 fd       	sbrc	r24, 4
    19da:	ad c0       	rjmp	.+346    	; 0x1b36 <f_open+0x658>
    19dc:	81 fe       	sbrs	r8, 1
    19de:	02 c0       	rjmp	.+4      	; 0x19e4 <f_open+0x506>
    19e0:	80 fd       	sbrc	r24, 0
    19e2:	ab c0       	rjmp	.+342    	; 0x1b3a <f_open+0x65c>
    19e4:	fd a5       	ldd	r31, Y+45	; 0x2d
    19e6:	f3 ff       	sbrs	r31, 3
    19e8:	03 c0       	rjmp	.+6      	; 0x19f0 <f_open+0x512>
    19ea:	2d a5       	ldd	r18, Y+45	; 0x2d
    19ec:	20 62       	ori	r18, 0x20	; 32
    19ee:	2d a7       	std	Y+45, r18	; 0x2d
    19f0:	e9 81       	ldd	r30, Y+1	; 0x01
    19f2:	fa 81       	ldd	r31, Y+2	; 0x02
    19f4:	82 a5       	ldd	r24, Z+42	; 0x2a
    19f6:	93 a5       	ldd	r25, Z+43	; 0x2b
    19f8:	a4 a5       	ldd	r26, Z+44	; 0x2c
    19fa:	b5 a5       	ldd	r27, Z+45	; 0x2d
    19fc:	f1 01       	movw	r30, r2
    19fe:	82 8f       	std	Z+26, r24	; 0x1a
    1a00:	93 8f       	std	Z+27, r25	; 0x1b
    1a02:	a4 8f       	std	Z+28, r26	; 0x1c
    1a04:	b5 8f       	std	Z+29, r27	; 0x1d
    1a06:	f7 8e       	std	Z+31, r15	; 0x1f
    1a08:	e6 8e       	std	Z+30, r14	; 0x1e
    1a0a:	ed a5       	ldd	r30, Y+45	; 0x2d
    1a0c:	d1 01       	movw	r26, r2
    1a0e:	14 96       	adiw	r26, 0x04	; 4
    1a10:	ec 93       	st	X, r30
    1a12:	14 97       	sbiw	r26, 0x04	; 4
    1a14:	15 96       	adiw	r26, 0x05	; 5
    1a16:	1c 92       	st	X, r1
    1a18:	09 81       	ldd	r16, Y+1	; 0x01
    1a1a:	1a 81       	ldd	r17, Y+2	; 0x02
    1a1c:	d7 01       	movw	r26, r14
    1a1e:	5a 96       	adiw	r26, 0x1a	; 26
    1a20:	8d 91       	ld	r24, X+
    1a22:	9c 91       	ld	r25, X
    1a24:	5b 97       	sbiw	r26, 0x1b	; 27
    1a26:	a0 e0       	ldi	r26, 0x00	; 0
    1a28:	b0 e0       	ldi	r27, 0x00	; 0
    1a2a:	f8 01       	movw	r30, r16
    1a2c:	20 81       	ld	r18, Z
    1a2e:	23 30       	cpi	r18, 0x03	; 3
    1a30:	61 f4       	brne	.+24     	; 0x1a4a <f_open+0x56c>
    1a32:	f7 01       	movw	r30, r14
    1a34:	44 89       	ldd	r20, Z+20	; 0x14
    1a36:	55 89       	ldd	r21, Z+21	; 0x15
    1a38:	60 e0       	ldi	r22, 0x00	; 0
    1a3a:	70 e0       	ldi	r23, 0x00	; 0
    1a3c:	ba 01       	movw	r22, r20
    1a3e:	55 27       	eor	r21, r21
    1a40:	44 27       	eor	r20, r20
    1a42:	84 2b       	or	r24, r20
    1a44:	95 2b       	or	r25, r21
    1a46:	a6 2b       	or	r26, r22
    1a48:	b7 2b       	or	r27, r23
    1a4a:	f1 01       	movw	r30, r2
    1a4c:	86 87       	std	Z+14, r24	; 0x0e
    1a4e:	97 87       	std	Z+15, r25	; 0x0f
    1a50:	a0 8b       	std	Z+16, r26	; 0x10
    1a52:	b1 8b       	std	Z+17, r27	; 0x11
    1a54:	f7 01       	movw	r30, r14
    1a56:	84 8d       	ldd	r24, Z+28	; 0x1c
    1a58:	95 8d       	ldd	r25, Z+29	; 0x1d
    1a5a:	a6 8d       	ldd	r26, Z+30	; 0x1e
    1a5c:	b7 8d       	ldd	r27, Z+31	; 0x1f
    1a5e:	f1 01       	movw	r30, r2
    1a60:	82 87       	std	Z+10, r24	; 0x0a
    1a62:	93 87       	std	Z+11, r25	; 0x0b
    1a64:	a4 87       	std	Z+12, r26	; 0x0c
    1a66:	b5 87       	std	Z+13, r27	; 0x0d
    1a68:	16 82       	std	Z+6, r1	; 0x06
    1a6a:	17 82       	std	Z+7, r1	; 0x07
    1a6c:	10 86       	std	Z+8, r1	; 0x08
    1a6e:	11 86       	std	Z+9, r1	; 0x09
    1a70:	16 8a       	std	Z+22, r1	; 0x16
    1a72:	17 8a       	std	Z+23, r1	; 0x17
    1a74:	10 8e       	std	Z+24, r1	; 0x18
    1a76:	11 8e       	std	Z+25, r1	; 0x19
    1a78:	11 83       	std	Z+1, r17	; 0x01
    1a7a:	00 83       	st	Z, r16
    1a7c:	d8 01       	movw	r26, r16
    1a7e:	16 96       	adiw	r26, 0x06	; 6
    1a80:	8d 91       	ld	r24, X+
    1a82:	9c 91       	ld	r25, X
    1a84:	17 97       	sbiw	r26, 0x07	; 7
    1a86:	93 83       	std	Z+3, r25	; 0x03
    1a88:	82 83       	std	Z+2, r24	; 0x02
    1a8a:	80 e0       	ldi	r24, 0x00	; 0
    1a8c:	87 c0       	rjmp	.+270    	; 0x1b9c <f_open+0x6be>
    1a8e:	89 e0       	ldi	r24, 0x09	; 9
    1a90:	85 c0       	rjmp	.+266    	; 0x1b9c <f_open+0x6be>
    1a92:	48 30       	cpi	r20, 0x08	; 8
    1a94:	51 05       	cpc	r21, r1
    1a96:	09 f4       	brne	.+2      	; 0x1a9a <f_open+0x5bc>
    1a98:	b8 cd       	rjmp	.-1168   	; 0x160a <f_open+0x12c>
    1a9a:	70 c0       	rjmp	.+224    	; 0x1b7c <f_open+0x69e>
    1a9c:	96 2f       	mov	r25, r22
    1a9e:	8f eb       	ldi	r24, 0xBF	; 191
    1aa0:	86 0f       	add	r24, r22
    1aa2:	8a 31       	cpi	r24, 0x1A	; 26
    1aa4:	08 f4       	brcc	.+2      	; 0x1aa8 <f_open+0x5ca>
    1aa6:	fd cd       	rjmp	.-1030   	; 0x16a2 <f_open+0x1c4>
    1aa8:	00 ce       	rjmp	.-1024   	; 0x16aa <f_open+0x1cc>
    1aaa:	cf 01       	movw	r24, r30
    1aac:	f8 01       	movw	r30, r16
    1aae:	c8 0e       	add	r12, r24
    1ab0:	d9 1e       	adc	r13, r25
    1ab2:	9d a1       	ldd	r25, Y+37	; 0x25
    1ab4:	84 e0       	ldi	r24, 0x04	; 4
    1ab6:	09 ce       	rjmp	.-1006   	; 0x16ca <f_open+0x1ec>
    1ab8:	cf 01       	movw	r24, r30
    1aba:	f8 01       	movw	r30, r16
    1abc:	c8 0e       	add	r12, r24
    1abe:	d9 1e       	adc	r13, r25
    1ac0:	9d a1       	ldd	r25, Y+37	; 0x25
    1ac2:	86 2d       	mov	r24, r6
    1ac4:	02 ce       	rjmp	.-1020   	; 0x16ca <f_open+0x1ec>
    1ac6:	f9 01       	movw	r30, r18
    1ac8:	83 85       	ldd	r24, Z+11	; 0x0b
    1aca:	82 ff       	sbrs	r24, 2
    1acc:	4e ce       	rjmp	.-868    	; 0x176a <f_open+0x28c>
    1ace:	06 c0       	rjmp	.+12     	; 0x1adc <f_open+0x5fe>
    1ad0:	ed 89       	ldd	r30, Y+21	; 0x15
    1ad2:	fe 89       	ldd	r31, Y+22	; 0x16
    1ad4:	93 85       	ldd	r25, Z+11	; 0x0b
    1ad6:	84 30       	cpi	r24, 0x04	; 4
    1ad8:	29 f4       	brne	.+10     	; 0x1ae4 <f_open+0x606>
    1ada:	43 ce       	rjmp	.-890    	; 0x1762 <f_open+0x284>
    1adc:	e1 14       	cp	r14, r1
    1ade:	f1 04       	cpc	r15, r1
    1ae0:	99 f4       	brne	.+38     	; 0x1b08 <f_open+0x62a>
    1ae2:	07 c0       	rjmp	.+14     	; 0x1af2 <f_open+0x614>
    1ae4:	eb 88       	ldd	r14, Y+19	; 0x13
    1ae6:	fc 88       	ldd	r15, Y+20	; 0x14
    1ae8:	98 2d       	mov	r25, r8
    1aea:	9c 71       	andi	r25, 0x1C	; 28
    1aec:	09 f0       	breq	.+2      	; 0x1af0 <f_open+0x612>
    1aee:	5f ce       	rjmp	.-834    	; 0x17ae <f_open+0x2d0>
    1af0:	6f cf       	rjmp	.-290    	; 0x19d0 <f_open+0x4f2>
    1af2:	88 2d       	mov	r24, r8
    1af4:	8c 71       	andi	r24, 0x1C	; 28
    1af6:	99 f5       	brne	.+102    	; 0x1b5e <f_open+0x680>
    1af8:	e1 2c       	mov	r14, r1
    1afa:	f1 2c       	mov	r15, r1
    1afc:	86 e0       	ldi	r24, 0x06	; 6
    1afe:	1e c0       	rjmp	.+60     	; 0x1b3c <f_open+0x65e>
    1b00:	98 2d       	mov	r25, r8
    1b02:	9c 71       	andi	r25, 0x1C	; 28
    1b04:	49 f5       	brne	.+82     	; 0x1b58 <f_open+0x67a>
    1b06:	1a c0       	rjmp	.+52     	; 0x1b3c <f_open+0x65e>
    1b08:	88 2d       	mov	r24, r8
    1b0a:	8c 71       	andi	r24, 0x1C	; 28
    1b0c:	09 f0       	breq	.+2      	; 0x1b10 <f_open+0x632>
    1b0e:	96 ce       	rjmp	.-724    	; 0x183c <f_open+0x35e>
    1b10:	61 cf       	rjmp	.-318    	; 0x19d4 <f_open+0x4f6>
    1b12:	87 e0       	ldi	r24, 0x07	; 7
    1b14:	01 c0       	rjmp	.+2      	; 0x1b18 <f_open+0x63a>
    1b16:	88 e0       	ldi	r24, 0x08	; 8
    1b18:	88 23       	and	r24, r24
    1b1a:	09 f4       	brne	.+2      	; 0x1b1e <f_open+0x640>
    1b1c:	63 cf       	rjmp	.-314    	; 0x19e4 <f_open+0x506>
    1b1e:	3e c0       	rjmp	.+124    	; 0x1b9c <f_open+0x6be>
    1b20:	82 e0       	ldi	r24, 0x02	; 2
    1b22:	05 c0       	rjmp	.+10     	; 0x1b2e <f_open+0x650>
    1b24:	82 e0       	ldi	r24, 0x02	; 2
    1b26:	03 c0       	rjmp	.+6      	; 0x1b2e <f_open+0x650>
    1b28:	82 e0       	ldi	r24, 0x02	; 2
    1b2a:	01 c0       	rjmp	.+2      	; 0x1b2e <f_open+0x650>
    1b2c:	81 e0       	ldi	r24, 0x01	; 1
    1b2e:	88 23       	and	r24, r24
    1b30:	09 f4       	brne	.+2      	; 0x1b34 <f_open+0x656>
    1b32:	5b cf       	rjmp	.-330    	; 0x19ea <f_open+0x50c>
    1b34:	33 c0       	rjmp	.+102    	; 0x1b9c <f_open+0x6be>
    1b36:	84 e0       	ldi	r24, 0x04	; 4
    1b38:	01 c0       	rjmp	.+2      	; 0x1b3c <f_open+0x65e>
    1b3a:	87 e0       	ldi	r24, 0x07	; 7
    1b3c:	88 23       	and	r24, r24
    1b3e:	09 f4       	brne	.+2      	; 0x1b42 <f_open+0x664>
    1b40:	64 cf       	rjmp	.-312    	; 0x1a0a <f_open+0x52c>
    1b42:	2c c0       	rjmp	.+88     	; 0x1b9c <f_open+0x6be>
    1b44:	eb 88       	ldd	r14, Y+19	; 0x13
    1b46:	fc 88       	ldd	r15, Y+20	; 0x14
    1b48:	86 e0       	ldi	r24, 0x06	; 6
    1b4a:	da cf       	rjmp	.-76     	; 0x1b00 <f_open+0x622>
    1b4c:	fd a5       	ldd	r31, Y+45	; 0x2d
    1b4e:	f8 60       	ori	r31, 0x08	; 8
    1b50:	fd a7       	std	Y+45, r31	; 0x2d
    1b52:	eb 88       	ldd	r14, Y+19	; 0x13
    1b54:	fc 88       	ldd	r15, Y+20	; 0x14
    1b56:	f2 cf       	rjmp	.-28     	; 0x1b3c <f_open+0x65e>
    1b58:	84 30       	cpi	r24, 0x04	; 4
    1b5a:	c1 f7       	brne	.-16     	; 0x1b4c <f_open+0x66e>
    1b5c:	2b ce       	rjmp	.-938    	; 0x17b4 <f_open+0x2d6>
    1b5e:	86 e0       	ldi	r24, 0x06	; 6
    1b60:	01 c0       	rjmp	.+2      	; 0x1b64 <f_open+0x686>
    1b62:	87 e0       	ldi	r24, 0x07	; 7
    1b64:	2d a5       	ldd	r18, Y+45	; 0x2d
    1b66:	28 60       	ori	r18, 0x08	; 8
    1b68:	2d a7       	std	Y+45, r18	; 0x2d
    1b6a:	eb 88       	ldd	r14, Y+19	; 0x13
    1b6c:	fc 88       	ldd	r15, Y+20	; 0x14
    1b6e:	e6 cf       	rjmp	.-52     	; 0x1b3c <f_open+0x65e>
    1b70:	86 e0       	ldi	r24, 0x06	; 6
    1b72:	05 c0       	rjmp	.+10     	; 0x1b7e <f_open+0x6a0>
    1b74:	84 e0       	ldi	r24, 0x04	; 4
    1b76:	03 c0       	rjmp	.+6      	; 0x1b7e <f_open+0x6a0>
    1b78:	85 e0       	ldi	r24, 0x05	; 5
    1b7a:	01 c0       	rjmp	.+2      	; 0x1b7e <f_open+0x6a0>
    1b7c:	86 e0       	ldi	r24, 0x06	; 6
    1b7e:	eb 88       	ldd	r14, Y+19	; 0x13
    1b80:	fc 88       	ldd	r15, Y+20	; 0x14
    1b82:	98 2d       	mov	r25, r8
    1b84:	9c 71       	andi	r25, 0x1C	; 28
    1b86:	41 f7       	brne	.-48     	; 0x1b58 <f_open+0x67a>
    1b88:	23 cf       	rjmp	.-442    	; 0x19d0 <f_open+0x4f2>
    1b8a:	3d a5       	ldd	r19, Y+45	; 0x2d
    1b8c:	38 60       	ori	r19, 0x08	; 8
    1b8e:	3d a7       	std	Y+45, r19	; 0x2d
    1b90:	eb 88       	ldd	r14, Y+19	; 0x13
    1b92:	fc 88       	ldd	r15, Y+20	; 0x14
    1b94:	d3 cf       	rjmp	.-90     	; 0x1b3c <f_open+0x65e>
    1b96:	84 30       	cpi	r24, 0x04	; 4
    1b98:	21 f3       	breq	.-56     	; 0x1b62 <f_open+0x684>
    1b9a:	f7 cf       	rjmp	.-18     	; 0x1b8a <f_open+0x6ac>
    1b9c:	af 96       	adiw	r28, 0x2f	; 47
    1b9e:	0f b6       	in	r0, 0x3f	; 63
    1ba0:	f8 94       	cli
    1ba2:	de bf       	out	0x3e, r29	; 62
    1ba4:	0f be       	out	0x3f, r0	; 63
    1ba6:	cd bf       	out	0x3d, r28	; 61
    1ba8:	df 91       	pop	r29
    1baa:	cf 91       	pop	r28
    1bac:	1f 91       	pop	r17
    1bae:	0f 91       	pop	r16
    1bb0:	ff 90       	pop	r15
    1bb2:	ef 90       	pop	r14
    1bb4:	df 90       	pop	r13
    1bb6:	cf 90       	pop	r12
    1bb8:	bf 90       	pop	r11
    1bba:	af 90       	pop	r10
    1bbc:	9f 90       	pop	r9
    1bbe:	8f 90       	pop	r8
    1bc0:	7f 90       	pop	r7
    1bc2:	6f 90       	pop	r6
    1bc4:	5f 90       	pop	r5
    1bc6:	4f 90       	pop	r4
    1bc8:	3f 90       	pop	r3
    1bca:	2f 90       	pop	r2
    1bcc:	08 95       	ret

00001bce <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void *buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
    1bce:	2f 92       	push	r2
    1bd0:	3f 92       	push	r3
    1bd2:	4f 92       	push	r4
    1bd4:	5f 92       	push	r5
    1bd6:	6f 92       	push	r6
    1bd8:	7f 92       	push	r7
    1bda:	8f 92       	push	r8
    1bdc:	9f 92       	push	r9
    1bde:	af 92       	push	r10
    1be0:	bf 92       	push	r11
    1be2:	cf 92       	push	r12
    1be4:	df 92       	push	r13
    1be6:	ef 92       	push	r14
    1be8:	ff 92       	push	r15
    1bea:	0f 93       	push	r16
    1bec:	1f 93       	push	r17
    1bee:	cf 93       	push	r28
    1bf0:	df 93       	push	r29
    1bf2:	00 d0       	rcall	.+0      	; 0x1bf4 <f_write+0x26>
    1bf4:	1f 92       	push	r1
    1bf6:	cd b7       	in	r28, 0x3d	; 61
    1bf8:	de b7       	in	r29, 0x3e	; 62
    1bfa:	9c 83       	std	Y+4, r25	; 0x04
    1bfc:	8b 83       	std	Y+3, r24	; 0x03
    1bfe:	5b 01       	movw	r10, r22
    1c00:	7a 01       	movw	r14, r20
    1c02:	69 01       	movw	r12, r18
	UINT wcnt, cc;
	const BYTE *wbuff = (const BYTE*)buff;
	BYTE csect;


	*bw = 0;	/* Clear write byte counter */
    1c04:	d9 01       	movw	r26, r18
    1c06:	1d 92       	st	X+, r1
    1c08:	1c 92       	st	X, r1

	res = validate(fp);						/* Check validity */
    1c0a:	0e 94 d9 01 	call	0x3b2	; 0x3b2 <validate>
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
    1c0e:	81 11       	cpse	r24, r1
    1c10:	9f c1       	rjmp	.+830    	; 0x1f50 <f_write+0x382>
	if (fp->err)							/* Check error */
    1c12:	eb 81       	ldd	r30, Y+3	; 0x03
    1c14:	fc 81       	ldd	r31, Y+4	; 0x04
    1c16:	85 81       	ldd	r24, Z+5	; 0x05
    1c18:	81 11       	cpse	r24, r1
    1c1a:	9a c1       	rjmp	.+820    	; 0x1f50 <f_write+0x382>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
    1c1c:	84 81       	ldd	r24, Z+4	; 0x04
    1c1e:	81 ff       	sbrs	r24, 1
    1c20:	96 c1       	rjmp	.+812    	; 0x1f4e <f_write+0x380>
		LEAVE_FF(fp->fs, FR_DENIED);
	if (fp->fptr + btw < fp->fptr) btw = 0;	/* File size cannot reach 4GB */
    1c22:	86 81       	ldd	r24, Z+6	; 0x06
    1c24:	97 81       	ldd	r25, Z+7	; 0x07
    1c26:	a0 85       	ldd	r26, Z+8	; 0x08
    1c28:	b1 85       	ldd	r27, Z+9	; 0x09
    1c2a:	ac 01       	movw	r20, r24
    1c2c:	bd 01       	movw	r22, r26
    1c2e:	4e 0d       	add	r20, r14
    1c30:	5f 1d       	adc	r21, r15
    1c32:	61 1d       	adc	r22, r1
    1c34:	71 1d       	adc	r23, r1
    1c36:	48 17       	cp	r20, r24
    1c38:	59 07       	cpc	r21, r25
    1c3a:	6a 07       	cpc	r22, r26
    1c3c:	7b 07       	cpc	r23, r27
    1c3e:	08 f4       	brcc	.+2      	; 0x1c42 <f_write+0x74>
    1c40:	69 c1       	rjmp	.+722    	; 0x1f14 <f_write+0x346>

	for ( ;  btw;							/* Repeat until all data written */
    1c42:	e1 14       	cp	r14, r1
    1c44:	f1 04       	cpc	r15, r1
    1c46:	09 f4       	brne	.+2      	; 0x1c4a <f_write+0x7c>
    1c48:	65 c1       	rjmp	.+714    	; 0x1f14 <f_write+0x346>
						ABORT(fp->fs, FR_DISK_ERR);
			}
#endif
			fp->dsect = sect;
		}
		wcnt = SS(fp->fs) - ((UINT)fp->fptr % SS(fp->fs));/* Put partial sector into file I/O buffer */
    1c4a:	81 2c       	mov	r8, r1
    1c4c:	68 94       	set
    1c4e:	99 24       	eor	r9, r9
    1c50:	91 f8       	bld	r9, 1
		LEAVE_FF(fp->fs, FR_DENIED);
	if (fp->fptr + btw < fp->fptr) btw = 0;	/* File size cannot reach 4GB */

	for ( ;  btw;							/* Repeat until all data written */
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {	/* On the sector boundary? */
    1c52:	eb 81       	ldd	r30, Y+3	; 0x03
    1c54:	fc 81       	ldd	r31, Y+4	; 0x04
    1c56:	86 81       	ldd	r24, Z+6	; 0x06
    1c58:	97 81       	ldd	r25, Z+7	; 0x07
    1c5a:	a0 85       	ldd	r26, Z+8	; 0x08
    1c5c:	b1 85       	ldd	r27, Z+9	; 0x09
    1c5e:	ac 01       	movw	r20, r24
    1c60:	bd 01       	movw	r22, r26
    1c62:	51 70       	andi	r21, 0x01	; 1
    1c64:	66 27       	eor	r22, r22
    1c66:	77 27       	eor	r23, r23
    1c68:	45 2b       	or	r20, r21
    1c6a:	46 2b       	or	r20, r22
    1c6c:	47 2b       	or	r20, r23
    1c6e:	09 f0       	breq	.+2      	; 0x1c72 <f_write+0xa4>
    1c70:	fb c0       	rjmp	.+502    	; 0x1e68 <f_write+0x29a>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
    1c72:	20 81       	ld	r18, Z
    1c74:	31 81       	ldd	r19, Z+1	; 0x01
    1c76:	f9 01       	movw	r30, r18
    1c78:	12 81       	ldd	r17, Z+2	; 0x02
    1c7a:	11 50       	subi	r17, 0x01	; 1
    1c7c:	ac 01       	movw	r20, r24
    1c7e:	bd 01       	movw	r22, r26
    1c80:	03 2e       	mov	r0, r19
    1c82:	39 e0       	ldi	r19, 0x09	; 9
    1c84:	76 95       	lsr	r23
    1c86:	67 95       	ror	r22
    1c88:	57 95       	ror	r21
    1c8a:	47 95       	ror	r20
    1c8c:	3a 95       	dec	r19
    1c8e:	d1 f7       	brne	.-12     	; 0x1c84 <f_write+0xb6>
    1c90:	30 2d       	mov	r19, r0
    1c92:	14 23       	and	r17, r20
			if (!csect) {					/* On the cluster boundary? */
    1c94:	09 f0       	breq	.+2      	; 0x1c98 <f_write+0xca>
    1c96:	52 c0       	rjmp	.+164    	; 0x1d3c <f_write+0x16e>
				if (fp->fptr == 0) {		/* On the top of the file? */
    1c98:	89 2b       	or	r24, r25
    1c9a:	8a 2b       	or	r24, r26
    1c9c:	8b 2b       	or	r24, r27
    1c9e:	99 f4       	brne	.+38     	; 0x1cc6 <f_write+0xf8>
					clst = fp->sclust;		/* Follow from the origin */
    1ca0:	ab 81       	ldd	r26, Y+3	; 0x03
    1ca2:	bc 81       	ldd	r27, Y+4	; 0x04
    1ca4:	1e 96       	adiw	r26, 0x0e	; 14
    1ca6:	6d 91       	ld	r22, X+
    1ca8:	7d 91       	ld	r23, X+
    1caa:	8d 91       	ld	r24, X+
    1cac:	9c 91       	ld	r25, X
    1cae:	51 97       	sbiw	r26, 0x11	; 17
					if (clst == 0)			/* When no cluster is allocated, */
    1cb0:	61 15       	cp	r22, r1
    1cb2:	71 05       	cpc	r23, r1
    1cb4:	81 05       	cpc	r24, r1
    1cb6:	91 05       	cpc	r25, r1
    1cb8:	a1 f4       	brne	.+40     	; 0x1ce2 <f_write+0x114>
						clst = create_chain(fp->fs, 0);	/* Create a new cluster chain */
    1cba:	40 e0       	ldi	r20, 0x00	; 0
    1cbc:	50 e0       	ldi	r21, 0x00	; 0
    1cbe:	ba 01       	movw	r22, r20
    1cc0:	c9 01       	movw	r24, r18
    1cc2:	71 d9       	rcall	.-3358   	; 0xfa6 <create_chain>
    1cc4:	08 c0       	rjmp	.+16     	; 0x1cd6 <f_write+0x108>
#if _USE_FASTSEEK
					if (fp->cltbl)
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
					else
#endif
						clst = create_chain(fp->fs, fp->clust);	/* Follow or stretch cluster chain on the FAT */
    1cc6:	eb 81       	ldd	r30, Y+3	; 0x03
    1cc8:	fc 81       	ldd	r31, Y+4	; 0x04
    1cca:	42 89       	ldd	r20, Z+18	; 0x12
    1ccc:	53 89       	ldd	r21, Z+19	; 0x13
    1cce:	64 89       	ldd	r22, Z+20	; 0x14
    1cd0:	75 89       	ldd	r23, Z+21	; 0x15
    1cd2:	c9 01       	movw	r24, r18
    1cd4:	68 d9       	rcall	.-3376   	; 0xfa6 <create_chain>
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
    1cd6:	61 15       	cp	r22, r1
    1cd8:	71 05       	cpc	r23, r1
    1cda:	81 05       	cpc	r24, r1
    1cdc:	91 05       	cpc	r25, r1
    1cde:	09 f4       	brne	.+2      	; 0x1ce2 <f_write+0x114>
    1ce0:	19 c1       	rjmp	.+562    	; 0x1f14 <f_write+0x346>
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
    1ce2:	61 30       	cpi	r22, 0x01	; 1
    1ce4:	71 05       	cpc	r23, r1
    1ce6:	81 05       	cpc	r24, r1
    1ce8:	91 05       	cpc	r25, r1
    1cea:	31 f4       	brne	.+12     	; 0x1cf8 <f_write+0x12a>
    1cec:	82 e0       	ldi	r24, 0x02	; 2
    1cee:	ab 81       	ldd	r26, Y+3	; 0x03
    1cf0:	bc 81       	ldd	r27, Y+4	; 0x04
    1cf2:	15 96       	adiw	r26, 0x05	; 5
    1cf4:	8c 93       	st	X, r24
    1cf6:	2c c1       	rjmp	.+600    	; 0x1f50 <f_write+0x382>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
    1cf8:	6f 3f       	cpi	r22, 0xFF	; 255
    1cfa:	bf ef       	ldi	r27, 0xFF	; 255
    1cfc:	7b 07       	cpc	r23, r27
    1cfe:	8b 07       	cpc	r24, r27
    1d00:	9b 07       	cpc	r25, r27
    1d02:	29 f4       	brne	.+10     	; 0x1d0e <f_write+0x140>
    1d04:	81 e0       	ldi	r24, 0x01	; 1
    1d06:	eb 81       	ldd	r30, Y+3	; 0x03
    1d08:	fc 81       	ldd	r31, Y+4	; 0x04
    1d0a:	85 83       	std	Z+5, r24	; 0x05
    1d0c:	21 c1       	rjmp	.+578    	; 0x1f50 <f_write+0x382>
				fp->clust = clst;			/* Update current cluster */
    1d0e:	ab 81       	ldd	r26, Y+3	; 0x03
    1d10:	bc 81       	ldd	r27, Y+4	; 0x04
    1d12:	52 96       	adiw	r26, 0x12	; 18
    1d14:	6d 93       	st	X+, r22
    1d16:	7d 93       	st	X+, r23
    1d18:	8d 93       	st	X+, r24
    1d1a:	9c 93       	st	X, r25
    1d1c:	55 97       	sbiw	r26, 0x15	; 21
				if (fp->sclust == 0) fp->sclust = clst;	/* Set start cluster if the first write */
    1d1e:	1e 96       	adiw	r26, 0x0e	; 14
    1d20:	4d 90       	ld	r4, X+
    1d22:	5d 90       	ld	r5, X+
    1d24:	6d 90       	ld	r6, X+
    1d26:	7c 90       	ld	r7, X
    1d28:	51 97       	sbiw	r26, 0x11	; 17
    1d2a:	45 28       	or	r4, r5
    1d2c:	46 28       	or	r4, r6
    1d2e:	47 28       	or	r4, r7
    1d30:	29 f4       	brne	.+10     	; 0x1d3c <f_write+0x16e>
    1d32:	fd 01       	movw	r30, r26
    1d34:	66 87       	std	Z+14, r22	; 0x0e
    1d36:	77 87       	std	Z+15, r23	; 0x0f
    1d38:	80 8b       	std	Z+16, r24	; 0x10
    1d3a:	91 8b       	std	Z+17, r25	; 0x11
			}
#if _FS_TINY
			if (fp->fs->winsect == fp->dsect && sync_window(fp->fs))	/* Write-back sector cache */
    1d3c:	ab 81       	ldd	r26, Y+3	; 0x03
    1d3e:	bc 81       	ldd	r27, Y+4	; 0x04
    1d40:	2d 91       	ld	r18, X+
    1d42:	3c 91       	ld	r19, X
    1d44:	11 97       	sbiw	r26, 0x01	; 1
    1d46:	f9 01       	movw	r30, r18
    1d48:	42 a5       	ldd	r20, Z+42	; 0x2a
    1d4a:	53 a5       	ldd	r21, Z+43	; 0x2b
    1d4c:	64 a5       	ldd	r22, Z+44	; 0x2c
    1d4e:	75 a5       	ldd	r23, Z+45	; 0x2d
    1d50:	56 96       	adiw	r26, 0x16	; 22
    1d52:	8d 91       	ld	r24, X+
    1d54:	9d 91       	ld	r25, X+
    1d56:	0d 90       	ld	r0, X+
    1d58:	bc 91       	ld	r27, X
    1d5a:	a0 2d       	mov	r26, r0
    1d5c:	48 17       	cp	r20, r24
    1d5e:	59 07       	cpc	r21, r25
    1d60:	6a 07       	cpc	r22, r26
    1d62:	7b 07       	cpc	r23, r27
    1d64:	59 f4       	brne	.+22     	; 0x1d7c <f_write+0x1ae>
    1d66:	c9 01       	movw	r24, r18
    1d68:	0e 94 f7 00 	call	0x1ee	; 0x1ee <sync_window>
    1d6c:	88 23       	and	r24, r24
    1d6e:	31 f0       	breq	.+12     	; 0x1d7c <f_write+0x1ae>
				ABORT(fp->fs, FR_DISK_ERR);
    1d70:	81 e0       	ldi	r24, 0x01	; 1
    1d72:	ab 81       	ldd	r26, Y+3	; 0x03
    1d74:	bc 81       	ldd	r27, Y+4	; 0x04
    1d76:	15 96       	adiw	r26, 0x05	; 5
    1d78:	8c 93       	st	X, r24
    1d7a:	ea c0       	rjmp	.+468    	; 0x1f50 <f_write+0x382>
				if (disk_write(fp->fs->drv, fp->buf, fp->dsect, 1) != RES_OK)
					ABORT(fp->fs, FR_DISK_ERR);
				fp->flag &= ~FA__DIRTY;
			}
#endif
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
    1d7c:	eb 81       	ldd	r30, Y+3	; 0x03
    1d7e:	fc 81       	ldd	r31, Y+4	; 0x04
    1d80:	01 90       	ld	r0, Z+
    1d82:	f0 81       	ld	r31, Z
    1d84:	e0 2d       	mov	r30, r0
    1d86:	fa 83       	std	Y+2, r31	; 0x02
    1d88:	e9 83       	std	Y+1, r30	; 0x01
    1d8a:	ab 81       	ldd	r26, Y+3	; 0x03
    1d8c:	bc 81       	ldd	r27, Y+4	; 0x04
    1d8e:	52 96       	adiw	r26, 0x12	; 18
    1d90:	4d 91       	ld	r20, X+
    1d92:	5d 91       	ld	r21, X+
    1d94:	6d 91       	ld	r22, X+
    1d96:	7c 91       	ld	r23, X
    1d98:	55 97       	sbiw	r26, 0x15	; 21
    1d9a:	cf 01       	movw	r24, r30
    1d9c:	0e 94 e6 04 	call	0x9cc	; 0x9cc <clust2sect>
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
    1da0:	61 15       	cp	r22, r1
    1da2:	71 05       	cpc	r23, r1
    1da4:	81 05       	cpc	r24, r1
    1da6:	91 05       	cpc	r25, r1
    1da8:	29 f4       	brne	.+10     	; 0x1db4 <f_write+0x1e6>
    1daa:	82 e0       	ldi	r24, 0x02	; 2
    1dac:	eb 81       	ldd	r30, Y+3	; 0x03
    1dae:	fc 81       	ldd	r31, Y+4	; 0x04
    1db0:	85 83       	std	Z+5, r24	; 0x05
    1db2:	ce c0       	rjmp	.+412    	; 0x1f50 <f_write+0x382>
			sect += csect;
    1db4:	2b 01       	movw	r4, r22
    1db6:	3c 01       	movw	r6, r24
    1db8:	41 0e       	add	r4, r17
    1dba:	51 1c       	adc	r5, r1
    1dbc:	61 1c       	adc	r6, r1
    1dbe:	71 1c       	adc	r7, r1
			cc = btw / SS(fp->fs);			/* When remaining bytes >= sector size, */
    1dc0:	17 01       	movw	r2, r14
    1dc2:	23 2c       	mov	r2, r3
    1dc4:	33 24       	eor	r3, r3
    1dc6:	26 94       	lsr	r2
			if (cc) {						/* Write maximum contiguous sectors directly */
    1dc8:	21 14       	cp	r2, r1
    1dca:	31 04       	cpc	r3, r1
    1dcc:	21 f1       	breq	.+72     	; 0x1e16 <f_write+0x248>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
    1dce:	a9 81       	ldd	r26, Y+1	; 0x01
    1dd0:	ba 81       	ldd	r27, Y+2	; 0x02
    1dd2:	12 96       	adiw	r26, 0x02	; 2
    1dd4:	0c 91       	ld	r16, X
    1dd6:	20 2f       	mov	r18, r16
    1dd8:	30 e0       	ldi	r19, 0x00	; 0
    1dda:	c1 01       	movw	r24, r2
    1ddc:	81 0f       	add	r24, r17
    1dde:	91 1d       	adc	r25, r1
    1de0:	28 17       	cp	r18, r24
    1de2:	39 07       	cpc	r19, r25
    1de4:	18 f4       	brcc	.+6      	; 0x1dec <f_write+0x21e>
					cc = fp->fs->csize - csect;
    1de6:	19 01       	movw	r2, r18
    1de8:	21 1a       	sub	r2, r17
    1dea:	31 08       	sbc	r3, r1
				if (disk_write(fp->fs->drv, wbuff, sect, cc) != RES_OK)
    1dec:	81 01       	movw	r16, r2
    1dee:	a3 01       	movw	r20, r6
    1df0:	92 01       	movw	r18, r4
    1df2:	b5 01       	movw	r22, r10
    1df4:	e9 81       	ldd	r30, Y+1	; 0x01
    1df6:	fa 81       	ldd	r31, Y+2	; 0x02
    1df8:	81 81       	ldd	r24, Z+1	; 0x01
    1dfa:	b2 d4       	rcall	.+2404   	; 0x2760 <disk_write>
    1dfc:	88 23       	and	r24, r24
    1dfe:	31 f0       	breq	.+12     	; 0x1e0c <f_write+0x23e>
					ABORT(fp->fs, FR_DISK_ERR);
    1e00:	81 e0       	ldi	r24, 0x01	; 1
    1e02:	ab 81       	ldd	r26, Y+3	; 0x03
    1e04:	bc 81       	ldd	r27, Y+4	; 0x04
    1e06:	15 96       	adiw	r26, 0x05	; 5
    1e08:	8c 93       	st	X, r24
    1e0a:	a2 c0       	rjmp	.+324    	; 0x1f50 <f_write+0x382>
					mem_cpy(fp->buf, wbuff + ((fp->dsect - sect) * SS(fp->fs)), SS(fp->fs));
					fp->flag &= ~FA__DIRTY;
				}
#endif
#endif
				wcnt = SS(fp->fs) * cc;		/* Number of bytes transferred */
    1e0c:	81 01       	movw	r16, r2
    1e0e:	10 2f       	mov	r17, r16
    1e10:	00 27       	eor	r16, r16
    1e12:	11 0f       	add	r17, r17
				continue;
    1e14:	63 c0       	rjmp	.+198    	; 0x1edc <f_write+0x30e>
			}
#if _FS_TINY
			if (fp->fptr >= fp->fsize) {	/* Avoid silly cache filling at growing edge */
    1e16:	eb 81       	ldd	r30, Y+3	; 0x03
    1e18:	fc 81       	ldd	r31, Y+4	; 0x04
    1e1a:	46 81       	ldd	r20, Z+6	; 0x06
    1e1c:	57 81       	ldd	r21, Z+7	; 0x07
    1e1e:	60 85       	ldd	r22, Z+8	; 0x08
    1e20:	71 85       	ldd	r23, Z+9	; 0x09
    1e22:	82 85       	ldd	r24, Z+10	; 0x0a
    1e24:	93 85       	ldd	r25, Z+11	; 0x0b
    1e26:	a4 85       	ldd	r26, Z+12	; 0x0c
    1e28:	b5 85       	ldd	r27, Z+13	; 0x0d
    1e2a:	48 17       	cp	r20, r24
    1e2c:	59 07       	cpc	r21, r25
    1e2e:	6a 07       	cpc	r22, r26
    1e30:	7b 07       	cpc	r23, r27
    1e32:	a0 f0       	brcs	.+40     	; 0x1e5c <f_write+0x28e>
				if (sync_window(fp->fs)) ABORT(fp->fs, FR_DISK_ERR);
    1e34:	89 81       	ldd	r24, Y+1	; 0x01
    1e36:	9a 81       	ldd	r25, Y+2	; 0x02
    1e38:	0e 94 f7 00 	call	0x1ee	; 0x1ee <sync_window>
    1e3c:	88 23       	and	r24, r24
    1e3e:	31 f0       	breq	.+12     	; 0x1e4c <f_write+0x27e>
    1e40:	81 e0       	ldi	r24, 0x01	; 1
    1e42:	ab 81       	ldd	r26, Y+3	; 0x03
    1e44:	bc 81       	ldd	r27, Y+4	; 0x04
    1e46:	15 96       	adiw	r26, 0x05	; 5
    1e48:	8c 93       	st	X, r24
    1e4a:	82 c0       	rjmp	.+260    	; 0x1f50 <f_write+0x382>
				fp->fs->winsect = sect;
    1e4c:	ab 81       	ldd	r26, Y+3	; 0x03
    1e4e:	bc 81       	ldd	r27, Y+4	; 0x04
    1e50:	ed 91       	ld	r30, X+
    1e52:	fc 91       	ld	r31, X
    1e54:	42 a6       	std	Z+42, r4	; 0x2a
    1e56:	53 a6       	std	Z+43, r5	; 0x2b
    1e58:	64 a6       	std	Z+44, r6	; 0x2c
    1e5a:	75 a6       	std	Z+45, r7	; 0x2d
				if (fp->fptr < fp->fsize &&
					disk_read(fp->fs->drv, fp->buf, sect, 1) != RES_OK)
						ABORT(fp->fs, FR_DISK_ERR);
			}
#endif
			fp->dsect = sect;
    1e5c:	eb 81       	ldd	r30, Y+3	; 0x03
    1e5e:	fc 81       	ldd	r31, Y+4	; 0x04
    1e60:	46 8a       	std	Z+22, r4	; 0x16
    1e62:	57 8a       	std	Z+23, r5	; 0x17
    1e64:	60 8e       	std	Z+24, r6	; 0x18
    1e66:	71 8e       	std	Z+25, r7	; 0x19
		}
		wcnt = SS(fp->fs) - ((UINT)fp->fptr % SS(fp->fs));/* Put partial sector into file I/O buffer */
    1e68:	ab 81       	ldd	r26, Y+3	; 0x03
    1e6a:	bc 81       	ldd	r27, Y+4	; 0x04
    1e6c:	16 96       	adiw	r26, 0x06	; 6
    1e6e:	8d 91       	ld	r24, X+
    1e70:	9c 91       	ld	r25, X
    1e72:	17 97       	sbiw	r26, 0x07	; 7
    1e74:	91 70       	andi	r25, 0x01	; 1
    1e76:	f4 01       	movw	r30, r8
    1e78:	e8 1b       	sub	r30, r24
    1e7a:	f9 0b       	sbc	r31, r25
    1e7c:	87 01       	movw	r16, r14
    1e7e:	ee 15       	cp	r30, r14
    1e80:	ff 05       	cpc	r31, r15
    1e82:	08 f4       	brcc	.+2      	; 0x1e86 <f_write+0x2b8>
    1e84:	8f 01       	movw	r16, r30
		if (wcnt > btw) wcnt = btw;
#if _FS_TINY
		if (move_window(fp->fs, fp->dsect) != FR_OK)	/* Move sector window */
    1e86:	ab 81       	ldd	r26, Y+3	; 0x03
    1e88:	bc 81       	ldd	r27, Y+4	; 0x04
    1e8a:	56 96       	adiw	r26, 0x16	; 22
    1e8c:	4d 91       	ld	r20, X+
    1e8e:	5d 91       	ld	r21, X+
    1e90:	6d 91       	ld	r22, X+
    1e92:	7c 91       	ld	r23, X
    1e94:	59 97       	sbiw	r26, 0x19	; 25
    1e96:	8d 91       	ld	r24, X+
    1e98:	9c 91       	ld	r25, X
    1e9a:	0e 94 62 01 	call	0x2c4	; 0x2c4 <move_window>
    1e9e:	88 23       	and	r24, r24
    1ea0:	29 f0       	breq	.+10     	; 0x1eac <f_write+0x2de>
			ABORT(fp->fs, FR_DISK_ERR);
    1ea2:	81 e0       	ldi	r24, 0x01	; 1
    1ea4:	eb 81       	ldd	r30, Y+3	; 0x03
    1ea6:	fc 81       	ldd	r31, Y+4	; 0x04
    1ea8:	85 83       	std	Z+5, r24	; 0x05
    1eaa:	52 c0       	rjmp	.+164    	; 0x1f50 <f_write+0x382>
		mem_cpy(&fp->fs->win[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
    1eac:	eb 81       	ldd	r30, Y+3	; 0x03
    1eae:	fc 81       	ldd	r31, Y+4	; 0x04
    1eb0:	86 81       	ldd	r24, Z+6	; 0x06
    1eb2:	97 81       	ldd	r25, Z+7	; 0x07
    1eb4:	a0 85       	ldd	r26, Z+8	; 0x08
    1eb6:	b1 85       	ldd	r27, Z+9	; 0x09
    1eb8:	91 70       	andi	r25, 0x01	; 1
    1eba:	aa 27       	eor	r26, r26
    1ebc:	bb 27       	eor	r27, r27
    1ebe:	8e 96       	adiw	r24, 0x2e	; 46
    1ec0:	20 81       	ld	r18, Z
    1ec2:	31 81       	ldd	r19, Z+1	; 0x01
    1ec4:	a8 01       	movw	r20, r16
    1ec6:	b5 01       	movw	r22, r10
    1ec8:	82 0f       	add	r24, r18
    1eca:	93 1f       	adc	r25, r19
    1ecc:	0e 94 94 00 	call	0x128	; 0x128 <mem_cpy>
		fp->fs->wflag = 1;
    1ed0:	ab 81       	ldd	r26, Y+3	; 0x03
    1ed2:	bc 81       	ldd	r27, Y+4	; 0x04
    1ed4:	ed 91       	ld	r30, X+
    1ed6:	fc 91       	ld	r31, X
    1ed8:	b1 e0       	ldi	r27, 0x01	; 1
    1eda:	b4 83       	std	Z+4, r27	; 0x04
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
		LEAVE_FF(fp->fs, FR_DENIED);
	if (fp->fptr + btw < fp->fptr) btw = 0;	/* File size cannot reach 4GB */

	for ( ;  btw;							/* Repeat until all data written */
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
    1edc:	a0 0e       	add	r10, r16
    1ede:	b1 1e       	adc	r11, r17
    1ee0:	eb 81       	ldd	r30, Y+3	; 0x03
    1ee2:	fc 81       	ldd	r31, Y+4	; 0x04
    1ee4:	86 81       	ldd	r24, Z+6	; 0x06
    1ee6:	97 81       	ldd	r25, Z+7	; 0x07
    1ee8:	a0 85       	ldd	r26, Z+8	; 0x08
    1eea:	b1 85       	ldd	r27, Z+9	; 0x09
    1eec:	80 0f       	add	r24, r16
    1eee:	91 1f       	adc	r25, r17
    1ef0:	a1 1d       	adc	r26, r1
    1ef2:	b1 1d       	adc	r27, r1
    1ef4:	86 83       	std	Z+6, r24	; 0x06
    1ef6:	97 83       	std	Z+7, r25	; 0x07
    1ef8:	a0 87       	std	Z+8, r26	; 0x08
    1efa:	b1 87       	std	Z+9, r27	; 0x09
    1efc:	d6 01       	movw	r26, r12
    1efe:	8d 91       	ld	r24, X+
    1f00:	9c 91       	ld	r25, X
    1f02:	11 97       	sbiw	r26, 0x01	; 1
    1f04:	80 0f       	add	r24, r16
    1f06:	91 1f       	adc	r25, r17
    1f08:	8d 93       	st	X+, r24
    1f0a:	9c 93       	st	X, r25
    1f0c:	e0 1a       	sub	r14, r16
    1f0e:	f1 0a       	sbc	r15, r17
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
		LEAVE_FF(fp->fs, FR_DENIED);
	if (fp->fptr + btw < fp->fptr) btw = 0;	/* File size cannot reach 4GB */

	for ( ;  btw;							/* Repeat until all data written */
    1f10:	09 f0       	breq	.+2      	; 0x1f14 <f_write+0x346>
    1f12:	9f ce       	rjmp	.-706    	; 0x1c52 <f_write+0x84>
		mem_cpy(&fp->buf[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->flag |= FA__DIRTY;
#endif
	}

	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
    1f14:	eb 81       	ldd	r30, Y+3	; 0x03
    1f16:	fc 81       	ldd	r31, Y+4	; 0x04
    1f18:	86 81       	ldd	r24, Z+6	; 0x06
    1f1a:	97 81       	ldd	r25, Z+7	; 0x07
    1f1c:	a0 85       	ldd	r26, Z+8	; 0x08
    1f1e:	b1 85       	ldd	r27, Z+9	; 0x09
    1f20:	42 85       	ldd	r20, Z+10	; 0x0a
    1f22:	53 85       	ldd	r21, Z+11	; 0x0b
    1f24:	64 85       	ldd	r22, Z+12	; 0x0c
    1f26:	75 85       	ldd	r23, Z+13	; 0x0d
    1f28:	48 17       	cp	r20, r24
    1f2a:	59 07       	cpc	r21, r25
    1f2c:	6a 07       	cpc	r22, r26
    1f2e:	7b 07       	cpc	r23, r27
    1f30:	20 f4       	brcc	.+8      	; 0x1f3a <f_write+0x36c>
    1f32:	82 87       	std	Z+10, r24	; 0x0a
    1f34:	93 87       	std	Z+11, r25	; 0x0b
    1f36:	a4 87       	std	Z+12, r26	; 0x0c
    1f38:	b5 87       	std	Z+13, r27	; 0x0d
	fp->flag |= FA__WRITTEN;						/* Set file change flag */
    1f3a:	ab 81       	ldd	r26, Y+3	; 0x03
    1f3c:	bc 81       	ldd	r27, Y+4	; 0x04
    1f3e:	14 96       	adiw	r26, 0x04	; 4
    1f40:	8c 91       	ld	r24, X
    1f42:	14 97       	sbiw	r26, 0x04	; 4
    1f44:	80 62       	ori	r24, 0x20	; 32
    1f46:	14 96       	adiw	r26, 0x04	; 4
    1f48:	8c 93       	st	X, r24

	LEAVE_FF(fp->fs, FR_OK);
    1f4a:	80 e0       	ldi	r24, 0x00	; 0
    1f4c:	01 c0       	rjmp	.+2      	; 0x1f50 <f_write+0x382>
	res = validate(fp);						/* Check validity */
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
	if (fp->err)							/* Check error */
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
		LEAVE_FF(fp->fs, FR_DENIED);
    1f4e:	87 e0       	ldi	r24, 0x07	; 7

	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
	fp->flag |= FA__WRITTEN;						/* Set file change flag */

	LEAVE_FF(fp->fs, FR_OK);
}
    1f50:	0f 90       	pop	r0
    1f52:	0f 90       	pop	r0
    1f54:	0f 90       	pop	r0
    1f56:	0f 90       	pop	r0
    1f58:	df 91       	pop	r29
    1f5a:	cf 91       	pop	r28
    1f5c:	1f 91       	pop	r17
    1f5e:	0f 91       	pop	r16
    1f60:	ff 90       	pop	r15
    1f62:	ef 90       	pop	r14
    1f64:	df 90       	pop	r13
    1f66:	cf 90       	pop	r12
    1f68:	bf 90       	pop	r11
    1f6a:	af 90       	pop	r10
    1f6c:	9f 90       	pop	r9
    1f6e:	8f 90       	pop	r8
    1f70:	7f 90       	pop	r7
    1f72:	6f 90       	pop	r6
    1f74:	5f 90       	pop	r5
    1f76:	4f 90       	pop	r4
    1f78:	3f 90       	pop	r3
    1f7a:	2f 90       	pop	r2
    1f7c:	08 95       	ret

00001f7e <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
    1f7e:	0f 93       	push	r16
    1f80:	1f 93       	push	r17
    1f82:	cf 93       	push	r28
    1f84:	df 93       	push	r29
    1f86:	ec 01       	movw	r28, r24
	FRESULT res;
	DWORD tm;
	BYTE *dir;


	res = validate(fp);					/* Check validity of the object */
    1f88:	0e 94 d9 01 	call	0x3b2	; 0x3b2 <validate>
    1f8c:	98 2f       	mov	r25, r24
	if (res == FR_OK) {
    1f8e:	81 11       	cpse	r24, r1
    1f90:	96 c0       	rjmp	.+300    	; 0x20be <f_sync+0x140>
		if (fp->flag & FA__WRITTEN) {	/* Is there any change to the file? */
    1f92:	8c 81       	ldd	r24, Y+4	; 0x04
    1f94:	85 ff       	sbrs	r24, 5
    1f96:	93 c0       	rjmp	.+294    	; 0x20be <f_sync+0x140>
					LEAVE_FF(fp->fs, FR_DISK_ERR);
				fp->flag &= ~FA__DIRTY;
			}
#endif
			/* Update the directory entry */
			res = move_window(fp->fs, fp->dir_sect);
    1f98:	4a 8d       	ldd	r20, Y+26	; 0x1a
    1f9a:	5b 8d       	ldd	r21, Y+27	; 0x1b
    1f9c:	6c 8d       	ldd	r22, Y+28	; 0x1c
    1f9e:	7d 8d       	ldd	r23, Y+29	; 0x1d
    1fa0:	88 81       	ld	r24, Y
    1fa2:	99 81       	ldd	r25, Y+1	; 0x01
    1fa4:	0e 94 62 01 	call	0x2c4	; 0x2c4 <move_window>
    1fa8:	98 2f       	mov	r25, r24
			if (res == FR_OK) {
    1faa:	81 11       	cpse	r24, r1
    1fac:	88 c0       	rjmp	.+272    	; 0x20be <f_sync+0x140>
				dir = fp->dir_ptr;
    1fae:	ee 8d       	ldd	r30, Y+30	; 0x1e
    1fb0:	ff 8d       	ldd	r31, Y+31	; 0x1f
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
    1fb2:	83 85       	ldd	r24, Z+11	; 0x0b
    1fb4:	80 62       	ori	r24, 0x20	; 32
    1fb6:	83 87       	std	Z+11, r24	; 0x0b
				ST_DWORD(dir + DIR_FileSize, fp->fsize);	/* Update file size */
    1fb8:	8a 85       	ldd	r24, Y+10	; 0x0a
    1fba:	9b 85       	ldd	r25, Y+11	; 0x0b
    1fbc:	ac 85       	ldd	r26, Y+12	; 0x0c
    1fbe:	bd 85       	ldd	r27, Y+13	; 0x0d
    1fc0:	84 8f       	std	Z+28, r24	; 0x1c
    1fc2:	95 8f       	std	Z+29, r25	; 0x1d
    1fc4:	a6 8f       	std	Z+30, r26	; 0x1e
    1fc6:	b7 8f       	std	Z+31, r27	; 0x1f
				st_clust(dir, fp->sclust);					/* Update start cluster */
    1fc8:	8e 85       	ldd	r24, Y+14	; 0x0e
    1fca:	9f 85       	ldd	r25, Y+15	; 0x0f
    1fcc:	a8 89       	ldd	r26, Y+16	; 0x10
    1fce:	b9 89       	ldd	r27, Y+17	; 0x11
void st_clust (
	BYTE* dir,	/* Pointer to the SFN entry */
	DWORD cl	/* Value to be set */
)
{
	ST_WORD(dir + DIR_FstClusLO, cl);
    1fd0:	93 8f       	std	Z+27, r25	; 0x1b
    1fd2:	82 8f       	std	Z+26, r24	; 0x1a
	ST_WORD(dir + DIR_FstClusHI, cl >> 16);
    1fd4:	b5 8b       	std	Z+21, r27	; 0x15
    1fd6:	a4 8b       	std	Z+20, r26	; 0x14
				dir = fp->dir_ptr;
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
				ST_DWORD(dir + DIR_FileSize, fp->fsize);	/* Update file size */
				st_clust(dir, fp->sclust);					/* Update start cluster */
				tm = GET_FATTIME();							/* Update modified time */
				ST_DWORD(dir + DIR_WrtTime, tm);
    1fd8:	80 e0       	ldi	r24, 0x00	; 0
    1fda:	90 e0       	ldi	r25, 0x00	; 0
    1fdc:	a4 e8       	ldi	r26, 0x84	; 132
    1fde:	b0 ec       	ldi	r27, 0xC0	; 192
    1fe0:	86 8b       	std	Z+22, r24	; 0x16
    1fe2:	97 8b       	std	Z+23, r25	; 0x17
    1fe4:	a0 8f       	std	Z+24, r26	; 0x18
    1fe6:	b1 8f       	std	Z+25, r27	; 0x19
				ST_WORD(dir + DIR_LstAccDate, 0);
    1fe8:	13 8a       	std	Z+19, r1	; 0x13
    1fea:	12 8a       	std	Z+18, r1	; 0x12
				fp->flag &= ~FA__WRITTEN;
    1fec:	8c 81       	ldd	r24, Y+4	; 0x04
    1fee:	8f 7d       	andi	r24, 0xDF	; 223
    1ff0:	8c 83       	std	Y+4, r24	; 0x04
				fp->fs->wflag = 1;
    1ff2:	e8 81       	ld	r30, Y
    1ff4:	f9 81       	ldd	r31, Y+1	; 0x01
    1ff6:	81 e0       	ldi	r24, 0x01	; 1
    1ff8:	84 83       	std	Z+4, r24	; 0x04
				res = sync_fs(fp->fs);
    1ffa:	09 90       	ld	r0, Y+
    1ffc:	d8 81       	ld	r29, Y
    1ffe:	c0 2d       	mov	r28, r0
)
{
	FRESULT res;


	res = sync_window(fs);
    2000:	ce 01       	movw	r24, r28
    2002:	0e 94 f7 00 	call	0x1ee	; 0x1ee <sync_window>
    2006:	98 2f       	mov	r25, r24
	if (res == FR_OK) {
    2008:	81 11       	cpse	r24, r1
    200a:	59 c0       	rjmp	.+178    	; 0x20be <f_sync+0x140>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
    200c:	88 81       	ld	r24, Y
    200e:	83 30       	cpi	r24, 0x03	; 3
    2010:	09 f0       	breq	.+2      	; 0x2014 <f_sync+0x96>
    2012:	4c c0       	rjmp	.+152    	; 0x20ac <f_sync+0x12e>
    2014:	8d 81       	ldd	r24, Y+5	; 0x05
    2016:	81 30       	cpi	r24, 0x01	; 1
    2018:	09 f0       	breq	.+2      	; 0x201c <f_sync+0x9e>
    201a:	48 c0       	rjmp	.+144    	; 0x20ac <f_sync+0x12e>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
    201c:	be 01       	movw	r22, r28
    201e:	62 5d       	subi	r22, 0xD2	; 210
    2020:	7f 4f       	sbci	r23, 0xFF	; 255
    2022:	fb 01       	movw	r30, r22
    2024:	ce 01       	movw	r24, r28
    2026:	82 5d       	subi	r24, 0xD2	; 210
    2028:	9d 4f       	sbci	r25, 0xFD	; 253
static
void mem_set (void* dst, int val, UINT cnt) {
	BYTE *d = (BYTE*)dst;

	while (cnt--)
		*d++ = (BYTE)val;
    202a:	11 92       	st	Z+, r1
/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
	BYTE *d = (BYTE*)dst;

	while (cnt--)
    202c:	e8 17       	cp	r30, r24
    202e:	f9 07       	cpc	r31, r25
    2030:	e1 f7       	brne	.-8      	; 0x202a <f_sync+0xac>
	if (res == FR_OK) {
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
			ST_WORD(fs->win + BS_55AA, 0xAA55);
    2032:	85 e5       	ldi	r24, 0x55	; 85
    2034:	9a ea       	ldi	r25, 0xAA	; 170
    2036:	fe 01       	movw	r30, r28
    2038:	e4 5d       	subi	r30, 0xD4	; 212
    203a:	fd 4f       	sbci	r31, 0xFD	; 253
    203c:	91 83       	std	Z+1, r25	; 0x01
    203e:	80 83       	st	Z, r24
			ST_DWORD(fs->win + FSI_LeadSig, 0x41615252);
    2040:	82 e5       	ldi	r24, 0x52	; 82
    2042:	92 e5       	ldi	r25, 0x52	; 82
    2044:	a1 e6       	ldi	r26, 0x61	; 97
    2046:	b1 e4       	ldi	r27, 0x41	; 65
    2048:	8e a7       	std	Y+46, r24	; 0x2e
    204a:	9f a7       	std	Y+47, r25	; 0x2f
    204c:	a8 ab       	std	Y+48, r26	; 0x30
    204e:	b9 ab       	std	Y+49, r27	; 0x31
			ST_DWORD(fs->win + FSI_StrucSig, 0x61417272);
    2050:	82 e7       	ldi	r24, 0x72	; 114
    2052:	92 e7       	ldi	r25, 0x72	; 114
    2054:	a1 e4       	ldi	r26, 0x41	; 65
    2056:	b1 e6       	ldi	r27, 0x61	; 97
    2058:	7a 97       	sbiw	r30, 0x1a	; 26
    205a:	80 83       	st	Z, r24
    205c:	91 83       	std	Z+1, r25	; 0x01
    205e:	a2 83       	std	Z+2, r26	; 0x02
    2060:	b3 83       	std	Z+3, r27	; 0x03
			ST_DWORD(fs->win + FSI_Free_Count, fs->free_clust);
    2062:	8e 85       	ldd	r24, Y+14	; 0x0e
    2064:	9f 85       	ldd	r25, Y+15	; 0x0f
    2066:	a8 89       	ldd	r26, Y+16	; 0x10
    2068:	b9 89       	ldd	r27, Y+17	; 0x11
    206a:	34 96       	adiw	r30, 0x04	; 4
    206c:	80 83       	st	Z, r24
    206e:	91 83       	std	Z+1, r25	; 0x01
    2070:	a2 83       	std	Z+2, r26	; 0x02
    2072:	b3 83       	std	Z+3, r27	; 0x03
			ST_DWORD(fs->win + FSI_Nxt_Free, fs->last_clust);
    2074:	8a 85       	ldd	r24, Y+10	; 0x0a
    2076:	9b 85       	ldd	r25, Y+11	; 0x0b
    2078:	ac 85       	ldd	r26, Y+12	; 0x0c
    207a:	bd 85       	ldd	r27, Y+13	; 0x0d
    207c:	34 96       	adiw	r30, 0x04	; 4
    207e:	80 83       	st	Z, r24
    2080:	91 83       	std	Z+1, r25	; 0x01
    2082:	a2 83       	std	Z+2, r26	; 0x02
    2084:	b3 83       	std	Z+3, r27	; 0x03
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
    2086:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2088:	9b 8d       	ldd	r25, Y+27	; 0x1b
    208a:	ac 8d       	ldd	r26, Y+28	; 0x1c
    208c:	bd 8d       	ldd	r27, Y+29	; 0x1d
    208e:	9c 01       	movw	r18, r24
    2090:	ad 01       	movw	r20, r26
    2092:	2f 5f       	subi	r18, 0xFF	; 255
    2094:	3f 4f       	sbci	r19, 0xFF	; 255
    2096:	4f 4f       	sbci	r20, 0xFF	; 255
    2098:	5f 4f       	sbci	r21, 0xFF	; 255
    209a:	2a a7       	std	Y+42, r18	; 0x2a
    209c:	3b a7       	std	Y+43, r19	; 0x2b
    209e:	4c a7       	std	Y+44, r20	; 0x2c
    20a0:	5d a7       	std	Y+45, r21	; 0x2d
			disk_write(fs->drv, fs->win, fs->winsect, 1);
    20a2:	01 e0       	ldi	r16, 0x01	; 1
    20a4:	10 e0       	ldi	r17, 0x00	; 0
    20a6:	89 81       	ldd	r24, Y+1	; 0x01
    20a8:	5b d3       	rcall	.+1718   	; 0x2760 <disk_write>
			fs->fsi_flag = 0;
    20aa:	1d 82       	std	Y+5, r1	; 0x05
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK)
    20ac:	40 e0       	ldi	r20, 0x00	; 0
    20ae:	50 e0       	ldi	r21, 0x00	; 0
    20b0:	60 e0       	ldi	r22, 0x00	; 0
    20b2:	89 81       	ldd	r24, Y+1	; 0x01
    20b4:	b7 d3       	rcall	.+1902   	; 0x2824 <disk_ioctl>
    20b6:	91 e0       	ldi	r25, 0x01	; 1
    20b8:	81 11       	cpse	r24, r1
    20ba:	01 c0       	rjmp	.+2      	; 0x20be <f_sync+0x140>
    20bc:	90 e0       	ldi	r25, 0x00	; 0
			}
		}
	}

	LEAVE_FF(fp->fs, res);
}
    20be:	89 2f       	mov	r24, r25
    20c0:	df 91       	pop	r29
    20c2:	cf 91       	pop	r28
    20c4:	1f 91       	pop	r17
    20c6:	0f 91       	pop	r16
    20c8:	08 95       	ret

000020ca <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL *fp		/* Pointer to the file object to be closed */
)
{
    20ca:	cf 93       	push	r28
    20cc:	df 93       	push	r29
    20ce:	ec 01       	movw	r28, r24
	FRESULT res;


#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
    20d0:	56 df       	rcall	.-340    	; 0x1f7e <f_sync>
	if (res == FR_OK)
    20d2:	81 11       	cpse	r24, r1
    20d4:	07 c0       	rjmp	.+14     	; 0x20e4 <f_close+0x1a>
#endif
	{
		res = validate(fp);				/* Lock volume */
    20d6:	ce 01       	movw	r24, r28
    20d8:	0e 94 d9 01 	call	0x3b2	; 0x3b2 <validate>
		if (res == FR_OK) {
    20dc:	81 11       	cpse	r24, r1
    20de:	02 c0       	rjmp	.+4      	; 0x20e4 <f_close+0x1a>
#endif
#if _FS_LOCK
			res = dec_lock(fp->lockid);	/* Decrement file open counter */
			if (res == FR_OK)
#endif
				fp->fs = 0;				/* Invalidate file object */
    20e0:	19 82       	std	Y+1, r1	; 0x01
    20e2:	18 82       	st	Y, r1
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
}
    20e4:	df 91       	pop	r29
    20e6:	cf 91       	pop	r28
    20e8:	08 95       	ret

000020ea <main>:

FATFS FatFs;		/* FatFs work area needed for each volume */
FIL Fil;			/* File object needed for each open file */

int main (void)
{
    20ea:	cf 93       	push	r28
    20ec:	df 93       	push	r29
    20ee:	1f 92       	push	r1
    20f0:	1f 92       	push	r1
    20f2:	cd b7       	in	r28, 0x3d	; 61
    20f4:	de b7       	in	r29, 0x3e	; 62
	UINT bw;
	DDRK |= 0xFF;
    20f6:	e7 e0       	ldi	r30, 0x07	; 7
    20f8:	f1 e0       	ldi	r31, 0x01	; 1
    20fa:	80 81       	ld	r24, Z
    20fc:	1f ef       	ldi	r17, 0xFF	; 255
    20fe:	10 83       	st	Z, r17
	FRESULT fr;
	
	f_mount(&FatFs, "", 0);		/* Give a work area to the default drive */
    2100:	40 e0       	ldi	r20, 0x00	; 0
    2102:	6c e2       	ldi	r22, 0x2C	; 44
    2104:	72 e0       	ldi	r23, 0x02	; 2
    2106:	83 e3       	ldi	r24, 0x33	; 51
    2108:	92 e0       	ldi	r25, 0x02	; 2
    210a:	97 d9       	rcall	.-3282   	; 0x143a <f_mount>

	PORTK |= 0x00;	/* Set PB4 high */
    210c:	e8 e0       	ldi	r30, 0x08	; 8
    210e:	f1 e0       	ldi	r31, 0x01	; 1
    2110:	80 81       	ld	r24, Z
    2112:	80 83       	st	Z, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    2114:	2f ef       	ldi	r18, 0xFF	; 255
    2116:	39 e6       	ldi	r19, 0x69	; 105
    2118:	88 e1       	ldi	r24, 0x18	; 24
    211a:	21 50       	subi	r18, 0x01	; 1
    211c:	30 40       	sbci	r19, 0x00	; 0
    211e:	80 40       	sbci	r24, 0x00	; 0
    2120:	e1 f7       	brne	.-8      	; 0x211a <main+0x30>
    2122:	00 c0       	rjmp	.+0      	; 0x2124 <main+0x3a>
    2124:	00 00       	nop
	_delay_ms(1000);
	PORTK |= 0xFF;
    2126:	80 81       	ld	r24, Z
    2128:	10 83       	st	Z, r17

	disk_initialize(0);
    212a:	80 e0       	ldi	r24, 0x00	; 0
    212c:	11 d2       	rcall	.+1058   	; 0x2550 <disk_initialize>
	
	fr = f_open(&Fil, "newfile.txt", FA_WRITE | FA_CREATE_ALWAYS);	/* Create a file */
    212e:	4a e0       	ldi	r20, 0x0A	; 10
    2130:	60 e1       	ldi	r22, 0x10	; 16
    2132:	72 e0       	ldi	r23, 0x02	; 2
    2134:	81 e6       	ldi	r24, 0x61	; 97
    2136:	94 e0       	ldi	r25, 0x04	; 4
    2138:	d2 d9       	rcall	.-3164   	; 0x14de <f_open>

	if (fr)
    213a:	88 23       	and	r24, r24
    213c:	b9 f0       	breq	.+46     	; 0x216c <main+0x82>
	{
		PORTK = 0x00;
    213e:	e8 e0       	ldi	r30, 0x08	; 8
    2140:	f1 e0       	ldi	r31, 0x01	; 1
    2142:	10 82       	st	Z, r1
    2144:	9f ef       	ldi	r25, 0xFF	; 255
    2146:	29 e6       	ldi	r18, 0x69	; 105
    2148:	38 e1       	ldi	r19, 0x18	; 24
    214a:	91 50       	subi	r25, 0x01	; 1
    214c:	20 40       	sbci	r18, 0x00	; 0
    214e:	30 40       	sbci	r19, 0x00	; 0
    2150:	e1 f7       	brne	.-8      	; 0x214a <main+0x60>
    2152:	00 c0       	rjmp	.+0      	; 0x2154 <main+0x6a>
    2154:	00 00       	nop
		_delay_ms(1000);
		PORTK = (int)fr;
    2156:	80 83       	st	Z, r24
    2158:	8f ef       	ldi	r24, 0xFF	; 255
    215a:	91 e1       	ldi	r25, 0x11	; 17
    215c:	2a e7       	ldi	r18, 0x7A	; 122
    215e:	81 50       	subi	r24, 0x01	; 1
    2160:	90 40       	sbci	r25, 0x00	; 0
    2162:	20 40       	sbci	r18, 0x00	; 0
    2164:	e1 f7       	brne	.-8      	; 0x215e <main+0x74>
    2166:	00 c0       	rjmp	.+0      	; 0x2168 <main+0x7e>
    2168:	00 00       	nop
		_delay_ms(5000);
		while(1);
    216a:	ff cf       	rjmp	.-2      	; 0x216a <main+0x80>
	}
	PORTK |= 0x55;	/* Set PB4 high */
    216c:	e8 e0       	ldi	r30, 0x08	; 8
    216e:	f1 e0       	ldi	r31, 0x01	; 1
    2170:	80 81       	ld	r24, Z
    2172:	85 65       	ori	r24, 0x55	; 85
    2174:	80 83       	st	Z, r24
    2176:	3f ef       	ldi	r19, 0xFF	; 255
    2178:	89 e6       	ldi	r24, 0x69	; 105
    217a:	98 e1       	ldi	r25, 0x18	; 24
    217c:	31 50       	subi	r19, 0x01	; 1
    217e:	80 40       	sbci	r24, 0x00	; 0
    2180:	90 40       	sbci	r25, 0x00	; 0
    2182:	e1 f7       	brne	.-8      	; 0x217c <main+0x92>
    2184:	00 c0       	rjmp	.+0      	; 0x2186 <main+0x9c>
    2186:	00 00       	nop
	_delay_ms(1000);
	PORTK ^= 0x55;
    2188:	90 81       	ld	r25, Z
    218a:	85 e5       	ldi	r24, 0x55	; 85
    218c:	89 27       	eor	r24, r25
    218e:	80 83       	st	Z, r24

	f_write(&Fil, "It works! Good\r\n", 15, &bw);	/* Write data to the file */
    2190:	9e 01       	movw	r18, r28
    2192:	2f 5f       	subi	r18, 0xFF	; 255
    2194:	3f 4f       	sbci	r19, 0xFF	; 255
    2196:	4f e0       	ldi	r20, 0x0F	; 15
    2198:	50 e0       	ldi	r21, 0x00	; 0
    219a:	6c e1       	ldi	r22, 0x1C	; 28
    219c:	72 e0       	ldi	r23, 0x02	; 2
    219e:	81 e6       	ldi	r24, 0x61	; 97
    21a0:	94 e0       	ldi	r25, 0x04	; 4
    21a2:	15 dd       	rcall	.-1494   	; 0x1bce <f_write>
	if (bw == 15) {		/* Lights green LED if data written well */
    21a4:	89 81       	ldd	r24, Y+1	; 0x01
    21a6:	9a 81       	ldd	r25, Y+2	; 0x02
    21a8:	0f 97       	sbiw	r24, 0x0f	; 15
    21aa:	29 f4       	brne	.+10     	; 0x21b6 <main+0xcc>
		PORTK |= 0xEF;	/* Set PB4 high */			
    21ac:	e8 e0       	ldi	r30, 0x08	; 8
    21ae:	f1 e0       	ldi	r31, 0x01	; 1
    21b0:	80 81       	ld	r24, Z
    21b2:	8f 6e       	ori	r24, 0xEF	; 239
    21b4:	80 83       	st	Z, r24
		}
	f_close(&Fil);								/* Close the file */
    21b6:	81 e6       	ldi	r24, 0x61	; 97
    21b8:	94 e0       	ldi	r25, 0x04	; 4
    21ba:	87 df       	rcall	.-242    	; 0x20ca <f_close>

	PORTK |= 0x81;	/* Set PB4 high */
    21bc:	e8 e0       	ldi	r30, 0x08	; 8
    21be:	f1 e0       	ldi	r31, 0x01	; 1
    21c0:	80 81       	ld	r24, Z
    21c2:	81 68       	ori	r24, 0x81	; 129
    21c4:	80 83       	st	Z, r24
    21c6:	2f ef       	ldi	r18, 0xFF	; 255
    21c8:	39 e6       	ldi	r19, 0x69	; 105
    21ca:	88 e1       	ldi	r24, 0x18	; 24
    21cc:	21 50       	subi	r18, 0x01	; 1
    21ce:	30 40       	sbci	r19, 0x00	; 0
    21d0:	80 40       	sbci	r24, 0x00	; 0
    21d2:	e1 f7       	brne	.-8      	; 0x21cc <main+0xe2>
    21d4:	00 c0       	rjmp	.+0      	; 0x21d6 <main+0xec>
    21d6:	00 00       	nop
	_delay_ms(1000);
	PORTK |= 0xFF;
    21d8:	80 81       	ld	r24, Z
    21da:	8f ef       	ldi	r24, 0xFF	; 255
    21dc:	80 83       	st	Z, r24

	for (;;) ;	
    21de:	ff cf       	rjmp	.-2      	; 0x21de <main+0xf4>

000021e0 <dly_us>:

static
void dly_us (UINT n)	/* Delay n microseconds (avr-gcc -Os) */
{
	do {
		PINB;
    21e0:	23 b1       	in	r18, 0x03	; 3
#if F_CPU >= 6000000
		PINB;
    21e2:	23 b1       	in	r18, 0x03	; 3
#endif
#if F_CPU >= 7000000
		PINB;
    21e4:	23 b1       	in	r18, 0x03	; 3
#endif
#if F_CPU >= 8000000
		PINB;
    21e6:	23 b1       	in	r18, 0x03	; 3
		PINB; PINB;
#endif
#if F_CPU >= 14000000
#error Too fast clock
#endif
	} while (--n);
    21e8:	01 97       	sbiw	r24, 0x01	; 1
    21ea:	d1 f7       	brne	.-12     	; 0x21e0 <dly_us>
}
    21ec:	08 95       	ret

000021ee <xmit_mmc>:
static
void xmit_mmc (
	const BYTE* buff,	/* Data to be sent */
	UINT bc				/* Number of bytes to send */
)
{
    21ee:	fc 01       	movw	r30, r24
    21f0:	68 0f       	add	r22, r24
    21f2:	79 1f       	adc	r23, r25
	BYTE d;


	do {
		d = *buff++;	/* Get a byte to be sent */
    21f4:	91 91       	ld	r25, Z+
		if (d & 0x80) DI_H(); else DI_L();	/* bit7 */
    21f6:	99 23       	and	r25, r25
    21f8:	14 f4       	brge	.+4      	; 0x21fe <xmit_mmc+0x10>
    21fa:	29 9a       	sbi	0x05, 1	; 5
    21fc:	01 c0       	rjmp	.+2      	; 0x2200 <__stack+0x1>
    21fe:	29 98       	cbi	0x05, 1	; 5
		CK_H(); CK_L();
    2200:	2a 9a       	sbi	0x05, 2	; 5
    2202:	2a 98       	cbi	0x05, 2	; 5
		if (d & 0x40) DI_H(); else DI_L();	/* bit6 */
    2204:	96 ff       	sbrs	r25, 6
    2206:	02 c0       	rjmp	.+4      	; 0x220c <__stack+0xd>
    2208:	29 9a       	sbi	0x05, 1	; 5
    220a:	01 c0       	rjmp	.+2      	; 0x220e <__stack+0xf>
    220c:	29 98       	cbi	0x05, 1	; 5
		CK_H(); CK_L();
    220e:	2a 9a       	sbi	0x05, 2	; 5
    2210:	2a 98       	cbi	0x05, 2	; 5
		if (d & 0x20) DI_H(); else DI_L();	/* bit5 */
    2212:	95 ff       	sbrs	r25, 5
    2214:	02 c0       	rjmp	.+4      	; 0x221a <__stack+0x1b>
    2216:	29 9a       	sbi	0x05, 1	; 5
    2218:	01 c0       	rjmp	.+2      	; 0x221c <__stack+0x1d>
    221a:	29 98       	cbi	0x05, 1	; 5
		CK_H(); CK_L();
    221c:	2a 9a       	sbi	0x05, 2	; 5
    221e:	2a 98       	cbi	0x05, 2	; 5
		if (d & 0x10) DI_H(); else DI_L();	/* bit4 */
    2220:	94 ff       	sbrs	r25, 4
    2222:	02 c0       	rjmp	.+4      	; 0x2228 <__stack+0x29>
    2224:	29 9a       	sbi	0x05, 1	; 5
    2226:	01 c0       	rjmp	.+2      	; 0x222a <__stack+0x2b>
    2228:	29 98       	cbi	0x05, 1	; 5
		CK_H(); CK_L();
    222a:	2a 9a       	sbi	0x05, 2	; 5
    222c:	2a 98       	cbi	0x05, 2	; 5
		if (d & 0x08) DI_H(); else DI_L();	/* bit3 */
    222e:	93 ff       	sbrs	r25, 3
    2230:	02 c0       	rjmp	.+4      	; 0x2236 <__stack+0x37>
    2232:	29 9a       	sbi	0x05, 1	; 5
    2234:	01 c0       	rjmp	.+2      	; 0x2238 <__stack+0x39>
    2236:	29 98       	cbi	0x05, 1	; 5
		CK_H(); CK_L();
    2238:	2a 9a       	sbi	0x05, 2	; 5
    223a:	2a 98       	cbi	0x05, 2	; 5
		if (d & 0x04) DI_H(); else DI_L();	/* bit2 */
    223c:	92 ff       	sbrs	r25, 2
    223e:	02 c0       	rjmp	.+4      	; 0x2244 <__stack+0x45>
    2240:	29 9a       	sbi	0x05, 1	; 5
    2242:	01 c0       	rjmp	.+2      	; 0x2246 <__stack+0x47>
    2244:	29 98       	cbi	0x05, 1	; 5
		CK_H(); CK_L();
    2246:	2a 9a       	sbi	0x05, 2	; 5
    2248:	2a 98       	cbi	0x05, 2	; 5
		if (d & 0x02) DI_H(); else DI_L();	/* bit1 */
    224a:	91 ff       	sbrs	r25, 1
    224c:	02 c0       	rjmp	.+4      	; 0x2252 <__stack+0x53>
    224e:	29 9a       	sbi	0x05, 1	; 5
    2250:	01 c0       	rjmp	.+2      	; 0x2254 <__stack+0x55>
    2252:	29 98       	cbi	0x05, 1	; 5
		CK_H(); CK_L();
    2254:	2a 9a       	sbi	0x05, 2	; 5
    2256:	2a 98       	cbi	0x05, 2	; 5
		if (d & 0x01) DI_H(); else DI_L();	/* bit0 */
    2258:	90 ff       	sbrs	r25, 0
    225a:	02 c0       	rjmp	.+4      	; 0x2260 <__stack+0x61>
    225c:	29 9a       	sbi	0x05, 1	; 5
    225e:	01 c0       	rjmp	.+2      	; 0x2262 <__stack+0x63>
    2260:	29 98       	cbi	0x05, 1	; 5
		CK_H(); CK_L();
    2262:	2a 9a       	sbi	0x05, 2	; 5
    2264:	2a 98       	cbi	0x05, 2	; 5
	} while (--bc);
    2266:	e6 17       	cp	r30, r22
    2268:	f7 07       	cpc	r31, r23
    226a:	21 f6       	brne	.-120    	; 0x21f4 <xmit_mmc+0x6>
}
    226c:	08 95       	ret

0000226e <rcvr_mmc>:
)
{
	BYTE r;


	DI_H();	/* Send 0xFF */
    226e:	29 9a       	sbi	0x05, 1	; 5
    2270:	fc 01       	movw	r30, r24
    2272:	68 0f       	add	r22, r24
    2274:	79 1f       	adc	r23, r25

	do {
		r = 0;	 if (DO) r++;	/* bit7 */
    2276:	93 b1       	in	r25, 0x03	; 3
		CK_H(); CK_L();
    2278:	2a 9a       	sbi	0x05, 2	; 5
    227a:	2a 98       	cbi	0x05, 2	; 5


	DI_H();	/* Send 0xFF */

	do {
		r = 0;	 if (DO) r++;	/* bit7 */
    227c:	91 70       	andi	r25, 0x01	; 1
		CK_H(); CK_L();
		r <<= 1; if (DO) r++;	/* bit6 */
    227e:	99 0f       	add	r25, r25
    2280:	18 99       	sbic	0x03, 0	; 3
    2282:	9f 5f       	subi	r25, 0xFF	; 255
		CK_H(); CK_L();
    2284:	2a 9a       	sbi	0x05, 2	; 5
    2286:	2a 98       	cbi	0x05, 2	; 5
		r <<= 1; if (DO) r++;	/* bit5 */
    2288:	99 0f       	add	r25, r25
    228a:	18 99       	sbic	0x03, 0	; 3
    228c:	9f 5f       	subi	r25, 0xFF	; 255
		CK_H(); CK_L();
    228e:	2a 9a       	sbi	0x05, 2	; 5
    2290:	2a 98       	cbi	0x05, 2	; 5
		r <<= 1; if (DO) r++;	/* bit4 */
    2292:	99 0f       	add	r25, r25
    2294:	18 99       	sbic	0x03, 0	; 3
    2296:	9f 5f       	subi	r25, 0xFF	; 255
		CK_H(); CK_L();
    2298:	2a 9a       	sbi	0x05, 2	; 5
    229a:	2a 98       	cbi	0x05, 2	; 5
		r <<= 1; if (DO) r++;	/* bit3 */
    229c:	99 0f       	add	r25, r25
    229e:	18 99       	sbic	0x03, 0	; 3
    22a0:	9f 5f       	subi	r25, 0xFF	; 255
		CK_H(); CK_L();
    22a2:	2a 9a       	sbi	0x05, 2	; 5
    22a4:	2a 98       	cbi	0x05, 2	; 5
		r <<= 1; if (DO) r++;	/* bit2 */
    22a6:	99 0f       	add	r25, r25
    22a8:	18 99       	sbic	0x03, 0	; 3
    22aa:	9f 5f       	subi	r25, 0xFF	; 255
		CK_H(); CK_L();
    22ac:	2a 9a       	sbi	0x05, 2	; 5
    22ae:	2a 98       	cbi	0x05, 2	; 5
		r <<= 1; if (DO) r++;	/* bit1 */
    22b0:	99 0f       	add	r25, r25
    22b2:	18 99       	sbic	0x03, 0	; 3
    22b4:	9f 5f       	subi	r25, 0xFF	; 255
		CK_H(); CK_L();
    22b6:	2a 9a       	sbi	0x05, 2	; 5
    22b8:	2a 98       	cbi	0x05, 2	; 5
		r <<= 1; if (DO) r++;	/* bit0 */
    22ba:	99 0f       	add	r25, r25
    22bc:	18 99       	sbic	0x03, 0	; 3
    22be:	9f 5f       	subi	r25, 0xFF	; 255
		CK_H(); CK_L();
    22c0:	2a 9a       	sbi	0x05, 2	; 5
    22c2:	2a 98       	cbi	0x05, 2	; 5
		*buff++ = r;			/* Store a received byte */
    22c4:	91 93       	st	Z+, r25
	} while (--bc);
    22c6:	e6 17       	cp	r30, r22
    22c8:	f7 07       	cpc	r31, r23
    22ca:	a9 f6       	brne	.-86     	; 0x2276 <rcvr_mmc+0x8>
}
    22cc:	08 95       	ret

000022ce <wait_ready>:
/* Wait for card ready                                                   */
/*-----------------------------------------------------------------------*/

static
int wait_ready (void)	/* 1:OK, 0:Timeout */
{
    22ce:	0f 93       	push	r16
    22d0:	1f 93       	push	r17
    22d2:	cf 93       	push	r28
    22d4:	df 93       	push	r29
    22d6:	1f 92       	push	r1
    22d8:	cd b7       	in	r28, 0x3d	; 61
    22da:	de b7       	in	r29, 0x3e	; 62
	BYTE d;
	UINT tmr;


	for (tmr = 5000; tmr; tmr--) {	/* Wait for ready in timeout of 500ms */
    22dc:	08 e8       	ldi	r16, 0x88	; 136
    22de:	13 e1       	ldi	r17, 0x13	; 19
		rcvr_mmc(&d, 1);
    22e0:	61 e0       	ldi	r22, 0x01	; 1
    22e2:	70 e0       	ldi	r23, 0x00	; 0
    22e4:	ce 01       	movw	r24, r28
    22e6:	01 96       	adiw	r24, 0x01	; 1
    22e8:	c2 df       	rcall	.-124    	; 0x226e <rcvr_mmc>
		if (d == 0xFF) break;
    22ea:	89 81       	ldd	r24, Y+1	; 0x01
    22ec:	8f 3f       	cpi	r24, 0xFF	; 255
    22ee:	31 f0       	breq	.+12     	; 0x22fc <wait_ready+0x2e>
		dly_us(100);
    22f0:	84 e6       	ldi	r24, 0x64	; 100
    22f2:	90 e0       	ldi	r25, 0x00	; 0
    22f4:	75 df       	rcall	.-278    	; 0x21e0 <dly_us>
{
	BYTE d;
	UINT tmr;


	for (tmr = 5000; tmr; tmr--) {	/* Wait for ready in timeout of 500ms */
    22f6:	01 50       	subi	r16, 0x01	; 1
    22f8:	11 09       	sbc	r17, r1
    22fa:	91 f7       	brne	.-28     	; 0x22e0 <wait_ready+0x12>
		rcvr_mmc(&d, 1);
		if (d == 0xFF) break;
		dly_us(100);
	}

	return tmr ? 1 : 0;
    22fc:	81 e0       	ldi	r24, 0x01	; 1
    22fe:	90 e0       	ldi	r25, 0x00	; 0
    2300:	01 2b       	or	r16, r17
    2302:	11 f4       	brne	.+4      	; 0x2308 <wait_ready+0x3a>
    2304:	80 e0       	ldi	r24, 0x00	; 0
    2306:	90 e0       	ldi	r25, 0x00	; 0
}
    2308:	0f 90       	pop	r0
    230a:	df 91       	pop	r29
    230c:	cf 91       	pop	r28
    230e:	1f 91       	pop	r17
    2310:	0f 91       	pop	r16
    2312:	08 95       	ret

00002314 <deselect>:
/* Deselect the card and release SPI bus                                 */
/*-----------------------------------------------------------------------*/

static
void deselect (void)
{
    2314:	cf 93       	push	r28
    2316:	df 93       	push	r29
    2318:	1f 92       	push	r1
    231a:	cd b7       	in	r28, 0x3d	; 61
    231c:	de b7       	in	r29, 0x3e	; 62
	BYTE d;

	CS_H();				/* Set CS# high */
    231e:	2b 9a       	sbi	0x05, 3	; 5
	rcvr_mmc(&d, 1);	/* Dummy clock (force DO hi-z for multiple slave SPI) */
    2320:	61 e0       	ldi	r22, 0x01	; 1
    2322:	70 e0       	ldi	r23, 0x00	; 0
    2324:	ce 01       	movw	r24, r28
    2326:	01 96       	adiw	r24, 0x01	; 1
    2328:	a2 df       	rcall	.-188    	; 0x226e <rcvr_mmc>
}
    232a:	0f 90       	pop	r0
    232c:	df 91       	pop	r29
    232e:	cf 91       	pop	r28
    2330:	08 95       	ret

00002332 <select>:
/* Select the card and wait for ready                                    */
/*-----------------------------------------------------------------------*/

static
int select (void)	/* 1:OK, 0:Timeout */
{
    2332:	0f 93       	push	r16
    2334:	1f 93       	push	r17
    2336:	cf 93       	push	r28
    2338:	df 93       	push	r29
    233a:	1f 92       	push	r1
    233c:	cd b7       	in	r28, 0x3d	; 61
    233e:	de b7       	in	r29, 0x3e	; 62
	BYTE d;

	CS_L();				/* Set CS# low */
    2340:	2b 98       	cbi	0x05, 3	; 5
	rcvr_mmc(&d, 1);	/* Dummy clock (force DO enabled) */
    2342:	61 e0       	ldi	r22, 0x01	; 1
    2344:	70 e0       	ldi	r23, 0x00	; 0
    2346:	ce 01       	movw	r24, r28
    2348:	01 96       	adiw	r24, 0x01	; 1
    234a:	91 df       	rcall	.-222    	; 0x226e <rcvr_mmc>
	if (wait_ready()) return 1;	/* Wait for card ready */
    234c:	c0 df       	rcall	.-128    	; 0x22ce <wait_ready>
    234e:	8c 01       	movw	r16, r24
    2350:	89 2b       	or	r24, r25
    2352:	11 f4       	brne	.+4      	; 0x2358 <select+0x26>

	deselect();
    2354:	df df       	rcall	.-66     	; 0x2314 <deselect>
	return 0;			/* Failed */
    2356:	02 c0       	rjmp	.+4      	; 0x235c <select+0x2a>
{
	BYTE d;

	CS_L();				/* Set CS# low */
	rcvr_mmc(&d, 1);	/* Dummy clock (force DO enabled) */
	if (wait_ready()) return 1;	/* Wait for card ready */
    2358:	01 e0       	ldi	r16, 0x01	; 1
    235a:	10 e0       	ldi	r17, 0x00	; 0

	deselect();
	return 0;			/* Failed */
}
    235c:	c8 01       	movw	r24, r16
    235e:	0f 90       	pop	r0
    2360:	df 91       	pop	r29
    2362:	cf 91       	pop	r28
    2364:	1f 91       	pop	r17
    2366:	0f 91       	pop	r16
    2368:	08 95       	ret

0000236a <rcvr_datablock>:
static
int rcvr_datablock (	/* 1:OK, 0:Failed */
	BYTE *buff,			/* Data buffer to store received data */
	UINT btr			/* Byte count */
)
{
    236a:	cf 92       	push	r12
    236c:	df 92       	push	r13
    236e:	ef 92       	push	r14
    2370:	ff 92       	push	r15
    2372:	0f 93       	push	r16
    2374:	1f 93       	push	r17
    2376:	cf 93       	push	r28
    2378:	df 93       	push	r29
    237a:	1f 92       	push	r1
    237c:	1f 92       	push	r1
    237e:	cd b7       	in	r28, 0x3d	; 61
    2380:	de b7       	in	r29, 0x3e	; 62
    2382:	7c 01       	movw	r14, r24
    2384:	6b 01       	movw	r12, r22
    2386:	08 ee       	ldi	r16, 0xE8	; 232
    2388:	13 e0       	ldi	r17, 0x03	; 3
	BYTE d[2];
	UINT tmr;


	for (tmr = 1000; tmr; tmr--) {	/* Wait for data packet in timeout of 100ms */
		rcvr_mmc(d, 1);
    238a:	61 e0       	ldi	r22, 0x01	; 1
    238c:	70 e0       	ldi	r23, 0x00	; 0
    238e:	ce 01       	movw	r24, r28
    2390:	01 96       	adiw	r24, 0x01	; 1
    2392:	6d df       	rcall	.-294    	; 0x226e <rcvr_mmc>
		if (d[0] != 0xFF) break;
    2394:	99 81       	ldd	r25, Y+1	; 0x01
    2396:	9f 3f       	cpi	r25, 0xFF	; 255
    2398:	31 f4       	brne	.+12     	; 0x23a6 <rcvr_datablock+0x3c>
		dly_us(100);
    239a:	84 e6       	ldi	r24, 0x64	; 100
    239c:	90 e0       	ldi	r25, 0x00	; 0
    239e:	20 df       	rcall	.-448    	; 0x21e0 <dly_us>
    23a0:	01 50       	subi	r16, 0x01	; 1
    23a2:	11 09       	sbc	r17, r1
{
	BYTE d[2];
	UINT tmr;


	for (tmr = 1000; tmr; tmr--) {	/* Wait for data packet in timeout of 100ms */
    23a4:	91 f7       	brne	.-28     	; 0x238a <rcvr_datablock+0x20>
		rcvr_mmc(d, 1);
		if (d[0] != 0xFF) break;
		dly_us(100);
	}
	if (d[0] != 0xFE) return 0;		/* If not valid data token, return with error */
    23a6:	99 81       	ldd	r25, Y+1	; 0x01
    23a8:	9e 3f       	cpi	r25, 0xFE	; 254
    23aa:	59 f4       	brne	.+22     	; 0x23c2 <rcvr_datablock+0x58>

	rcvr_mmc(buff, btr);			/* Receive the data block into buffer */
    23ac:	b6 01       	movw	r22, r12
    23ae:	c7 01       	movw	r24, r14
    23b0:	5e df       	rcall	.-324    	; 0x226e <rcvr_mmc>
	rcvr_mmc(d, 2);					/* Discard CRC */
    23b2:	62 e0       	ldi	r22, 0x02	; 2
    23b4:	70 e0       	ldi	r23, 0x00	; 0
    23b6:	ce 01       	movw	r24, r28
    23b8:	01 96       	adiw	r24, 0x01	; 1
    23ba:	59 df       	rcall	.-334    	; 0x226e <rcvr_mmc>

	return 1;						/* Return with success */
    23bc:	81 e0       	ldi	r24, 0x01	; 1
    23be:	90 e0       	ldi	r25, 0x00	; 0
    23c0:	02 c0       	rjmp	.+4      	; 0x23c6 <rcvr_datablock+0x5c>
	for (tmr = 1000; tmr; tmr--) {	/* Wait for data packet in timeout of 100ms */
		rcvr_mmc(d, 1);
		if (d[0] != 0xFF) break;
		dly_us(100);
	}
	if (d[0] != 0xFE) return 0;		/* If not valid data token, return with error */
    23c2:	80 e0       	ldi	r24, 0x00	; 0
    23c4:	90 e0       	ldi	r25, 0x00	; 0

	rcvr_mmc(buff, btr);			/* Receive the data block into buffer */
	rcvr_mmc(d, 2);					/* Discard CRC */

	return 1;						/* Return with success */
}
    23c6:	0f 90       	pop	r0
    23c8:	0f 90       	pop	r0
    23ca:	df 91       	pop	r29
    23cc:	cf 91       	pop	r28
    23ce:	1f 91       	pop	r17
    23d0:	0f 91       	pop	r16
    23d2:	ff 90       	pop	r15
    23d4:	ef 90       	pop	r14
    23d6:	df 90       	pop	r13
    23d8:	cf 90       	pop	r12
    23da:	08 95       	ret

000023dc <xmit_datablock>:
static
int xmit_datablock (	/* 1:OK, 0:Failed */
	const BYTE *buff,	/* 512 byte data block to be transmitted */
	BYTE token			/* Data/Stop token */
)
{
    23dc:	ef 92       	push	r14
    23de:	ff 92       	push	r15
    23e0:	1f 93       	push	r17
    23e2:	cf 93       	push	r28
    23e4:	df 93       	push	r29
    23e6:	1f 92       	push	r1
    23e8:	1f 92       	push	r1
    23ea:	cd b7       	in	r28, 0x3d	; 61
    23ec:	de b7       	in	r29, 0x3e	; 62
    23ee:	7c 01       	movw	r14, r24
    23f0:	16 2f       	mov	r17, r22
	BYTE d[2];


	if (!wait_ready()) return 0;
    23f2:	6d df       	rcall	.-294    	; 0x22ce <wait_ready>
    23f4:	00 97       	sbiw	r24, 0x00	; 0
    23f6:	11 f1       	breq	.+68     	; 0x243c <xmit_datablock+0x60>

	d[0] = token;
    23f8:	19 83       	std	Y+1, r17	; 0x01
	xmit_mmc(d, 1);				/* Xmit a token */
    23fa:	61 e0       	ldi	r22, 0x01	; 1
    23fc:	70 e0       	ldi	r23, 0x00	; 0
    23fe:	ce 01       	movw	r24, r28
    2400:	01 96       	adiw	r24, 0x01	; 1
    2402:	f5 de       	rcall	.-534    	; 0x21ee <xmit_mmc>
	if (token != 0xFD) {		/* Is it data token? */
    2404:	1d 3f       	cpi	r17, 0xFD	; 253
    2406:	c1 f0       	breq	.+48     	; 0x2438 <xmit_datablock+0x5c>
		xmit_mmc(buff, 512);	/* Xmit the 512 byte data block to MMC */
    2408:	60 e0       	ldi	r22, 0x00	; 0
    240a:	72 e0       	ldi	r23, 0x02	; 2
    240c:	c7 01       	movw	r24, r14
    240e:	ef de       	rcall	.-546    	; 0x21ee <xmit_mmc>
		rcvr_mmc(d, 2);			/* Xmit dummy CRC (0xFF,0xFF) */
    2410:	62 e0       	ldi	r22, 0x02	; 2
    2412:	70 e0       	ldi	r23, 0x00	; 0
    2414:	ce 01       	movw	r24, r28
    2416:	01 96       	adiw	r24, 0x01	; 1
    2418:	2a df       	rcall	.-428    	; 0x226e <rcvr_mmc>
		rcvr_mmc(d, 1);			/* Receive data response */
    241a:	61 e0       	ldi	r22, 0x01	; 1
    241c:	70 e0       	ldi	r23, 0x00	; 0
    241e:	ce 01       	movw	r24, r28
    2420:	01 96       	adiw	r24, 0x01	; 1
    2422:	25 df       	rcall	.-438    	; 0x226e <rcvr_mmc>
		if ((d[0] & 0x1F) != 0x05)	/* If not accepted, return with error */
    2424:	89 81       	ldd	r24, Y+1	; 0x01
    2426:	8f 71       	andi	r24, 0x1F	; 31
    2428:	31 e0       	ldi	r19, 0x01	; 1
    242a:	20 e0       	ldi	r18, 0x00	; 0
    242c:	85 30       	cpi	r24, 0x05	; 5
    242e:	09 f0       	breq	.+2      	; 0x2432 <xmit_datablock+0x56>
    2430:	30 e0       	ldi	r19, 0x00	; 0
)
{
	BYTE d[2];


	if (!wait_ready()) return 0;
    2432:	83 2f       	mov	r24, r19
    2434:	92 2f       	mov	r25, r18
    2436:	02 c0       	rjmp	.+4      	; 0x243c <xmit_datablock+0x60>
		rcvr_mmc(d, 1);			/* Receive data response */
		if ((d[0] & 0x1F) != 0x05)	/* If not accepted, return with error */
			return 0;
	}

	return 1;
    2438:	81 e0       	ldi	r24, 0x01	; 1
    243a:	90 e0       	ldi	r25, 0x00	; 0
}
    243c:	0f 90       	pop	r0
    243e:	0f 90       	pop	r0
    2440:	df 91       	pop	r29
    2442:	cf 91       	pop	r28
    2444:	1f 91       	pop	r17
    2446:	ff 90       	pop	r15
    2448:	ef 90       	pop	r14
    244a:	08 95       	ret

0000244c <send_cmd>:
static
BYTE send_cmd (		/* Returns command response (bit7==1:Send failed)*/
	BYTE cmd,		/* Command byte */
	DWORD arg		/* Argument */
)
{
    244c:	df 92       	push	r13
    244e:	ef 92       	push	r14
    2450:	ff 92       	push	r15
    2452:	0f 93       	push	r16
    2454:	1f 93       	push	r17
    2456:	cf 93       	push	r28
    2458:	df 93       	push	r29
    245a:	cd b7       	in	r28, 0x3d	; 61
    245c:	de b7       	in	r29, 0x3e	; 62
    245e:	27 97       	sbiw	r28, 0x07	; 7
    2460:	0f b6       	in	r0, 0x3f	; 63
    2462:	f8 94       	cli
    2464:	de bf       	out	0x3e, r29	; 62
    2466:	0f be       	out	0x3f, r0	; 63
    2468:	cd bf       	out	0x3d, r28	; 61
    246a:	18 2f       	mov	r17, r24
    246c:	04 2f       	mov	r16, r20
    246e:	f5 2e       	mov	r15, r21
    2470:	e6 2e       	mov	r14, r22
    2472:	d7 2e       	mov	r13, r23
	BYTE n, d, buf[6];


	if (cmd & 0x80) {	/* ACMD<n> is the command sequense of CMD55-CMD<n> */
    2474:	88 23       	and	r24, r24
    2476:	4c f4       	brge	.+18     	; 0x248a <send_cmd+0x3e>
		cmd &= 0x7F;
		n = send_cmd(CMD55, 0);
    2478:	40 e0       	ldi	r20, 0x00	; 0
    247a:	50 e0       	ldi	r21, 0x00	; 0
    247c:	ba 01       	movw	r22, r20
    247e:	87 e3       	ldi	r24, 0x37	; 55
    2480:	e5 df       	rcall	.-54     	; 0x244c <send_cmd>
		if (n > 1) return n;
    2482:	82 30       	cpi	r24, 0x02	; 2
    2484:	08 f0       	brcs	.+2      	; 0x2488 <send_cmd+0x3c>
    2486:	4f c0       	rjmp	.+158    	; 0x2526 <send_cmd+0xda>
{
	BYTE n, d, buf[6];


	if (cmd & 0x80) {	/* ACMD<n> is the command sequense of CMD55-CMD<n> */
		cmd &= 0x7F;
    2488:	1f 77       	andi	r17, 0x7F	; 127
		n = send_cmd(CMD55, 0);
		if (n > 1) return n;
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
    248a:	1c 30       	cpi	r17, 0x0C	; 12
    248c:	09 f1       	breq	.+66     	; 0x24d0 <send_cmd+0x84>
		deselect();
    248e:	42 df       	rcall	.-380    	; 0x2314 <deselect>
		if (!select()) return 0xFF;
    2490:	50 df       	rcall	.-352    	; 0x2332 <select>
    2492:	89 2b       	or	r24, r25
    2494:	d9 f0       	breq	.+54     	; 0x24cc <send_cmd+0x80>
	}

	/* Send a command packet */
	buf[0] = 0x40 | cmd;			/* Start + Command index */
    2496:	81 2f       	mov	r24, r17
    2498:	80 64       	ori	r24, 0x40	; 64
    249a:	8a 83       	std	Y+2, r24	; 0x02
	buf[1] = (BYTE)(arg >> 24);		/* Argument[31..24] */
    249c:	db 82       	std	Y+3, r13	; 0x03
	buf[2] = (BYTE)(arg >> 16);		/* Argument[23..16] */
    249e:	ec 82       	std	Y+4, r14	; 0x04
	buf[3] = (BYTE)(arg >> 8);		/* Argument[15..8] */
    24a0:	fd 82       	std	Y+5, r15	; 0x05
	buf[4] = (BYTE)arg;				/* Argument[7..0] */
    24a2:	0e 83       	std	Y+6, r16	; 0x06
	n = 0x01;						/* Dummy CRC + Stop */
	if (cmd == CMD0) n = 0x95;		/* (valid CRC for CMD0(0)) */
    24a4:	11 23       	and	r17, r17
    24a6:	b9 f1       	breq	.+110    	; 0x2516 <send_cmd+0xca>
    24a8:	33 c0       	rjmp	.+102    	; 0x2510 <send_cmd+0xc4>
	if (cmd == CMD8) n = 0x87;		/* (valid CRC for CMD8(0x1AA)) */
	buf[5] = n;
	xmit_mmc(buf, 6);

	/* Receive command response */
	if (cmd == CMD12) rcvr_mmc(&d, 1);	/* Skip a stuff byte when stop reading */
    24aa:	61 e0       	ldi	r22, 0x01	; 1
    24ac:	70 e0       	ldi	r23, 0x00	; 0
    24ae:	ce 01       	movw	r24, r28
    24b0:	01 96       	adiw	r24, 0x01	; 1
    24b2:	dd de       	rcall	.-582    	; 0x226e <rcvr_mmc>
static
BYTE send_cmd (		/* Returns command response (bit7==1:Send failed)*/
	BYTE cmd,		/* Command byte */
	DWORD arg		/* Argument */
)
{
    24b4:	1a e0       	ldi	r17, 0x0A	; 10

	/* Receive command response */
	if (cmd == CMD12) rcvr_mmc(&d, 1);	/* Skip a stuff byte when stop reading */
	n = 10;								/* Wait for a valid response in timeout of 10 attempts */
	do
		rcvr_mmc(&d, 1);
    24b6:	61 e0       	ldi	r22, 0x01	; 1
    24b8:	70 e0       	ldi	r23, 0x00	; 0
    24ba:	ce 01       	movw	r24, r28
    24bc:	01 96       	adiw	r24, 0x01	; 1
    24be:	d7 de       	rcall	.-594    	; 0x226e <rcvr_mmc>
	while ((d & 0x80) && --n);
    24c0:	89 81       	ldd	r24, Y+1	; 0x01
    24c2:	88 23       	and	r24, r24
    24c4:	84 f5       	brge	.+96     	; 0x2526 <send_cmd+0xda>
    24c6:	11 50       	subi	r17, 0x01	; 1
    24c8:	b1 f7       	brne	.-20     	; 0x24b6 <send_cmd+0x6a>
    24ca:	2d c0       	rjmp	.+90     	; 0x2526 <send_cmd+0xda>
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
		deselect();
		if (!select()) return 0xFF;
    24cc:	8f ef       	ldi	r24, 0xFF	; 255
    24ce:	2b c0       	rjmp	.+86     	; 0x2526 <send_cmd+0xda>
	}

	/* Send a command packet */
	buf[0] = 0x40 | cmd;			/* Start + Command index */
    24d0:	8c e4       	ldi	r24, 0x4C	; 76
    24d2:	8a 83       	std	Y+2, r24	; 0x02
	buf[1] = (BYTE)(arg >> 24);		/* Argument[31..24] */
    24d4:	db 82       	std	Y+3, r13	; 0x03
	buf[2] = (BYTE)(arg >> 16);		/* Argument[23..16] */
    24d6:	ec 82       	std	Y+4, r14	; 0x04
	buf[3] = (BYTE)(arg >> 8);		/* Argument[15..8] */
    24d8:	fd 82       	std	Y+5, r15	; 0x05
	buf[4] = (BYTE)arg;				/* Argument[7..0] */
    24da:	0e 83       	std	Y+6, r16	; 0x06
	n = 0x01;						/* Dummy CRC + Stop */
	if (cmd == CMD0) n = 0x95;		/* (valid CRC for CMD0(0)) */
	if (cmd == CMD8) n = 0x87;		/* (valid CRC for CMD8(0x1AA)) */
	buf[5] = n;
    24dc:	81 e0       	ldi	r24, 0x01	; 1
    24de:	8f 83       	std	Y+7, r24	; 0x07
	xmit_mmc(buf, 6);
    24e0:	66 e0       	ldi	r22, 0x06	; 6
    24e2:	70 e0       	ldi	r23, 0x00	; 0
    24e4:	ce 01       	movw	r24, r28
    24e6:	02 96       	adiw	r24, 0x02	; 2
    24e8:	82 de       	rcall	.-764    	; 0x21ee <xmit_mmc>

	/* Receive command response */
	if (cmd == CMD12) rcvr_mmc(&d, 1);	/* Skip a stuff byte when stop reading */
    24ea:	1c 30       	cpi	r17, 0x0C	; 12
    24ec:	19 f7       	brne	.-58     	; 0x24b4 <send_cmd+0x68>
    24ee:	dd cf       	rjmp	.-70     	; 0x24aa <send_cmd+0x5e>
	buf[3] = (BYTE)(arg >> 8);		/* Argument[15..8] */
	buf[4] = (BYTE)arg;				/* Argument[7..0] */
	n = 0x01;						/* Dummy CRC + Stop */
	if (cmd == CMD0) n = 0x95;		/* (valid CRC for CMD0(0)) */
	if (cmd == CMD8) n = 0x87;		/* (valid CRC for CMD8(0x1AA)) */
	buf[5] = n;
    24f0:	87 e8       	ldi	r24, 0x87	; 135
    24f2:	8f 83       	std	Y+7, r24	; 0x07
	xmit_mmc(buf, 6);
    24f4:	66 e0       	ldi	r22, 0x06	; 6
    24f6:	70 e0       	ldi	r23, 0x00	; 0
    24f8:	ce 01       	movw	r24, r28
    24fa:	02 96       	adiw	r24, 0x02	; 2
    24fc:	78 de       	rcall	.-784    	; 0x21ee <xmit_mmc>
    24fe:	da cf       	rjmp	.-76     	; 0x24b4 <send_cmd+0x68>
	buf[3] = (BYTE)(arg >> 8);		/* Argument[15..8] */
	buf[4] = (BYTE)arg;				/* Argument[7..0] */
	n = 0x01;						/* Dummy CRC + Stop */
	if (cmd == CMD0) n = 0x95;		/* (valid CRC for CMD0(0)) */
	if (cmd == CMD8) n = 0x87;		/* (valid CRC for CMD8(0x1AA)) */
	buf[5] = n;
    2500:	81 e0       	ldi	r24, 0x01	; 1
    2502:	8f 83       	std	Y+7, r24	; 0x07
	xmit_mmc(buf, 6);
    2504:	66 e0       	ldi	r22, 0x06	; 6
    2506:	70 e0       	ldi	r23, 0x00	; 0
    2508:	ce 01       	movw	r24, r28
    250a:	02 96       	adiw	r24, 0x02	; 2
    250c:	70 de       	rcall	.-800    	; 0x21ee <xmit_mmc>
    250e:	d2 cf       	rjmp	.-92     	; 0x24b4 <send_cmd+0x68>
	buf[2] = (BYTE)(arg >> 16);		/* Argument[23..16] */
	buf[3] = (BYTE)(arg >> 8);		/* Argument[15..8] */
	buf[4] = (BYTE)arg;				/* Argument[7..0] */
	n = 0x01;						/* Dummy CRC + Stop */
	if (cmd == CMD0) n = 0x95;		/* (valid CRC for CMD0(0)) */
	if (cmd == CMD8) n = 0x87;		/* (valid CRC for CMD8(0x1AA)) */
    2510:	18 30       	cpi	r17, 0x08	; 8
    2512:	71 f3       	breq	.-36     	; 0x24f0 <send_cmd+0xa4>
    2514:	f5 cf       	rjmp	.-22     	; 0x2500 <send_cmd+0xb4>
	buf[5] = n;
    2516:	85 e9       	ldi	r24, 0x95	; 149
    2518:	8f 83       	std	Y+7, r24	; 0x07
	xmit_mmc(buf, 6);
    251a:	66 e0       	ldi	r22, 0x06	; 6
    251c:	70 e0       	ldi	r23, 0x00	; 0
    251e:	ce 01       	movw	r24, r28
    2520:	02 96       	adiw	r24, 0x02	; 2
    2522:	65 de       	rcall	.-822    	; 0x21ee <xmit_mmc>
    2524:	c7 cf       	rjmp	.-114    	; 0x24b4 <send_cmd+0x68>
	do
		rcvr_mmc(&d, 1);
	while ((d & 0x80) && --n);

	return d;			/* Return with the response value */
}
    2526:	27 96       	adiw	r28, 0x07	; 7
    2528:	0f b6       	in	r0, 0x3f	; 63
    252a:	f8 94       	cli
    252c:	de bf       	out	0x3e, r29	; 62
    252e:	0f be       	out	0x3f, r0	; 63
    2530:	cd bf       	out	0x3d, r28	; 61
    2532:	df 91       	pop	r29
    2534:	cf 91       	pop	r28
    2536:	1f 91       	pop	r17
    2538:	0f 91       	pop	r16
    253a:	ff 90       	pop	r15
    253c:	ef 90       	pop	r14
    253e:	df 90       	pop	r13
    2540:	08 95       	ret

00002542 <disk_status>:

DSTATUS disk_status (
	BYTE drv			/* Drive number (always 0) */
)
{
	if (drv) return STA_NOINIT;
    2542:	81 11       	cpse	r24, r1
    2544:	03 c0       	rjmp	.+6      	; 0x254c <disk_status+0xa>

	return Stat;
    2546:	80 91 00 02 	lds	r24, 0x0200
    254a:	08 95       	ret

DSTATUS disk_status (
	BYTE drv			/* Drive number (always 0) */
)
{
	if (drv) return STA_NOINIT;
    254c:	81 e0       	ldi	r24, 0x01	; 1

	return Stat;
}
    254e:	08 95       	ret

00002550 <disk_initialize>:
/*-----------------------------------------------------------------------*/

DSTATUS disk_initialize (
	BYTE drv		/* Physical drive nmuber (0) */
)
{
    2550:	ef 92       	push	r14
    2552:	ff 92       	push	r15
    2554:	0f 93       	push	r16
    2556:	1f 93       	push	r17
    2558:	cf 93       	push	r28
    255a:	df 93       	push	r29
    255c:	00 d0       	rcall	.+0      	; 0x255e <disk_initialize+0xe>
    255e:	1f 92       	push	r1
    2560:	cd b7       	in	r28, 0x3d	; 61
    2562:	de b7       	in	r29, 0x3e	; 62
	BYTE n, ty, cmd, buf[4];
	UINT tmr;
	DSTATUS s;


	if (drv) return RES_NOTRDY;
    2564:	81 11       	cpse	r24, r1
    2566:	a4 c0       	rjmp	.+328    	; 0x26b0 <disk_initialize+0x160>

	dly_us(10000);			/* 10ms */
    2568:	80 e1       	ldi	r24, 0x10	; 16
    256a:	97 e2       	ldi	r25, 0x27	; 39
    256c:	39 de       	rcall	.-910    	; 0x21e0 <dly_us>
	CS_INIT(); CS_H();		/* Initialize port pin tied to CS */
    256e:	23 9a       	sbi	0x04, 3	; 4
    2570:	2b 9a       	sbi	0x05, 3	; 5
	CK_INIT(); CK_L();		/* Initialize port pin tied to SCLK */
    2572:	22 9a       	sbi	0x04, 2	; 4
    2574:	2a 98       	cbi	0x05, 2	; 5
	DI_INIT();				/* Initialize port pin tied to DI */
    2576:	21 9a       	sbi	0x04, 1	; 4
    2578:	2a e0       	ldi	r18, 0x0A	; 10
/*-----------------------------------------------------------------------*/

DSTATUS disk_initialize (
	BYTE drv		/* Physical drive nmuber (0) */
)
{
    257a:	48 e0       	ldi	r20, 0x08	; 8
    257c:	30 e0       	ldi	r19, 0x00	; 0
    257e:	06 c0       	rjmp	.+12     	; 0x258c <disk_initialize+0x3c>

	for (n = 10; n > 0; n--)
	{
		for (int i = 0; i < 8; i++)
		{
			CK_H(); CK_L();
    2580:	2a 9a       	sbi	0x05, 2	; 5
    2582:	2a 98       	cbi	0x05, 2	; 5
    2584:	01 97       	sbiw	r24, 0x01	; 1
	DI_INIT();				/* Initialize port pin tied to DI */
	DO_INIT();				/* Initialize port pin tied to DO */

	for (n = 10; n > 0; n--)
	{
		for (int i = 0; i < 8; i++)
    2586:	e1 f7       	brne	.-8      	; 0x2580 <disk_initialize+0x30>
    2588:	21 50       	subi	r18, 0x01	; 1
	CS_INIT(); CS_H();		/* Initialize port pin tied to CS */
	CK_INIT(); CK_L();		/* Initialize port pin tied to SCLK */
	DI_INIT();				/* Initialize port pin tied to DI */
	DO_INIT();				/* Initialize port pin tied to DO */

	for (n = 10; n > 0; n--)
    258a:	19 f0       	breq	.+6      	; 0x2592 <disk_initialize+0x42>
/*-----------------------------------------------------------------------*/

DSTATUS disk_initialize (
	BYTE drv		/* Physical drive nmuber (0) */
)
{
    258c:	84 2f       	mov	r24, r20
    258e:	93 2f       	mov	r25, r19
    2590:	f7 cf       	rjmp	.-18     	; 0x2580 <disk_initialize+0x30>
		{
			CK_H(); CK_L();
		}
	}
	ty = 0;
	if (send_cmd(CMD0, 0) == 1) {			/* Enter Idle state */
    2592:	40 e0       	ldi	r20, 0x00	; 0
    2594:	50 e0       	ldi	r21, 0x00	; 0
    2596:	ba 01       	movw	r22, r20
    2598:	80 e0       	ldi	r24, 0x00	; 0
    259a:	58 df       	rcall	.-336    	; 0x244c <send_cmd>
    259c:	81 30       	cpi	r24, 0x01	; 1
    259e:	09 f0       	breq	.+2      	; 0x25a2 <disk_initialize+0x52>
    25a0:	6d c0       	rjmp	.+218    	; 0x267c <disk_initialize+0x12c>
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
    25a2:	4a ea       	ldi	r20, 0xAA	; 170
    25a4:	51 e0       	ldi	r21, 0x01	; 1
    25a6:	60 e0       	ldi	r22, 0x00	; 0
    25a8:	70 e0       	ldi	r23, 0x00	; 0
    25aa:	88 e0       	ldi	r24, 0x08	; 8
    25ac:	4f df       	rcall	.-354    	; 0x244c <send_cmd>
    25ae:	81 30       	cpi	r24, 0x01	; 1
    25b0:	a9 f5       	brne	.+106    	; 0x261c <disk_initialize+0xcc>
			rcvr_mmc(buf, 4);							/* Get trailing return value of R7 resp */
    25b2:	64 e0       	ldi	r22, 0x04	; 4
    25b4:	70 e0       	ldi	r23, 0x00	; 0
    25b6:	ce 01       	movw	r24, r28
    25b8:	01 96       	adiw	r24, 0x01	; 1
    25ba:	59 de       	rcall	.-846    	; 0x226e <rcvr_mmc>
			if (buf[2] == 0x01 && buf[3] == 0xAA) {		/* The card can work at vdd range of 2.7-3.6V */
    25bc:	8b 81       	ldd	r24, Y+3	; 0x03
    25be:	81 30       	cpi	r24, 0x01	; 1
    25c0:	09 f0       	breq	.+2      	; 0x25c4 <disk_initialize+0x74>
    25c2:	5e c0       	rjmp	.+188    	; 0x2680 <disk_initialize+0x130>
    25c4:	8c 81       	ldd	r24, Y+4	; 0x04
    25c6:	8a 3a       	cpi	r24, 0xAA	; 170
    25c8:	09 f0       	breq	.+2      	; 0x25cc <disk_initialize+0x7c>
    25ca:	5c c0       	rjmp	.+184    	; 0x2684 <disk_initialize+0x134>
    25cc:	08 ee       	ldi	r16, 0xE8	; 232
    25ce:	13 e0       	ldi	r17, 0x03	; 3
				for (tmr = 1000; tmr; tmr--) {			/* Wait for leaving idle state (ACMD41 with HCS bit) */
					if (send_cmd(ACMD41, 1UL << 30) == 0) break;
    25d0:	40 e0       	ldi	r20, 0x00	; 0
    25d2:	50 e0       	ldi	r21, 0x00	; 0
    25d4:	60 e0       	ldi	r22, 0x00	; 0
    25d6:	70 e4       	ldi	r23, 0x40	; 64
    25d8:	89 ea       	ldi	r24, 0xA9	; 169
    25da:	38 df       	rcall	.-400    	; 0x244c <send_cmd>
    25dc:	88 23       	and	r24, r24
    25de:	41 f0       	breq	.+16     	; 0x25f0 <disk_initialize+0xa0>
					dly_us(1000);
    25e0:	88 ee       	ldi	r24, 0xE8	; 232
    25e2:	93 e0       	ldi	r25, 0x03	; 3
    25e4:	fd dd       	rcall	.-1030   	; 0x21e0 <dly_us>
	ty = 0;
	if (send_cmd(CMD0, 0) == 1) {			/* Enter Idle state */
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
			rcvr_mmc(buf, 4);							/* Get trailing return value of R7 resp */
			if (buf[2] == 0x01 && buf[3] == 0xAA) {		/* The card can work at vdd range of 2.7-3.6V */
				for (tmr = 1000; tmr; tmr--) {			/* Wait for leaving idle state (ACMD41 with HCS bit) */
    25e6:	01 50       	subi	r16, 0x01	; 1
    25e8:	11 09       	sbc	r17, r1
    25ea:	91 f7       	brne	.-28     	; 0x25d0 <disk_initialize+0x80>
		for (int i = 0; i < 8; i++)
		{
			CK_H(); CK_L();
		}
	}
	ty = 0;
    25ec:	f1 2c       	mov	r15, r1
    25ee:	56 c0       	rjmp	.+172    	; 0x269c <disk_initialize+0x14c>
			if (buf[2] == 0x01 && buf[3] == 0xAA) {		/* The card can work at vdd range of 2.7-3.6V */
				for (tmr = 1000; tmr; tmr--) {			/* Wait for leaving idle state (ACMD41 with HCS bit) */
					if (send_cmd(ACMD41, 1UL << 30) == 0) break;
					dly_us(1000);
				}
				if (tmr && send_cmd(CMD58, 0) == 0) {	/* Check CCS bit in the OCR */
    25f0:	01 2b       	or	r16, r17
    25f2:	09 f4       	brne	.+2      	; 0x25f6 <disk_initialize+0xa6>
    25f4:	49 c0       	rjmp	.+146    	; 0x2688 <disk_initialize+0x138>
    25f6:	40 e0       	ldi	r20, 0x00	; 0
    25f8:	50 e0       	ldi	r21, 0x00	; 0
    25fa:	ba 01       	movw	r22, r20
    25fc:	8a e3       	ldi	r24, 0x3A	; 58
    25fe:	26 df       	rcall	.-436    	; 0x244c <send_cmd>
    2600:	81 11       	cpse	r24, r1
    2602:	44 c0       	rjmp	.+136    	; 0x268c <disk_initialize+0x13c>
					rcvr_mmc(buf, 4);
    2604:	64 e0       	ldi	r22, 0x04	; 4
    2606:	70 e0       	ldi	r23, 0x00	; 0
    2608:	ce 01       	movw	r24, r28
    260a:	01 96       	adiw	r24, 0x01	; 1
    260c:	30 de       	rcall	.-928    	; 0x226e <rcvr_mmc>
					ty = (buf[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* SDv2 */
    260e:	89 81       	ldd	r24, Y+1	; 0x01
    2610:	86 fd       	sbrc	r24, 6
    2612:	3e c0       	rjmp	.+124    	; 0x2690 <disk_initialize+0x140>
    2614:	68 94       	set
    2616:	ff 24       	eor	r15, r15
    2618:	f2 f8       	bld	r15, 2
    261a:	40 c0       	rjmp	.+128    	; 0x269c <disk_initialize+0x14c>
				}
			}
		} else {							/* SDv1 or MMCv3 */
			if (send_cmd(ACMD41, 0) <= 1) 	{
    261c:	40 e0       	ldi	r20, 0x00	; 0
    261e:	50 e0       	ldi	r21, 0x00	; 0
    2620:	ba 01       	movw	r22, r20
    2622:	89 ea       	ldi	r24, 0xA9	; 169
    2624:	13 df       	rcall	.-474    	; 0x244c <send_cmd>
    2626:	82 30       	cpi	r24, 0x02	; 2
    2628:	28 f0       	brcs	.+10     	; 0x2634 <disk_initialize+0xe4>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 */
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 */
    262a:	ee 24       	eor	r14, r14
    262c:	e3 94       	inc	r14
    262e:	ff 24       	eor	r15, r15
    2630:	f3 94       	inc	r15
    2632:	07 c0       	rjmp	.+14     	; 0x2642 <disk_initialize+0xf2>
					ty = (buf[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* SDv2 */
				}
			}
		} else {							/* SDv1 or MMCv3 */
			if (send_cmd(ACMD41, 0) <= 1) 	{
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 */
    2634:	0f 2e       	mov	r0, r31
    2636:	f9 ea       	ldi	r31, 0xA9	; 169
    2638:	ef 2e       	mov	r14, r31
    263a:	f0 2d       	mov	r31, r0
    263c:	68 94       	set
    263e:	ff 24       	eor	r15, r15
    2640:	f1 f8       	bld	r15, 1
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 */
			}
			for (tmr = 1000; tmr; tmr--) {			/* Wait for leaving idle state */
    2642:	08 ee       	ldi	r16, 0xE8	; 232
    2644:	13 e0       	ldi	r17, 0x03	; 3
				if (send_cmd(cmd, 0) == 0) break;
    2646:	40 e0       	ldi	r20, 0x00	; 0
    2648:	50 e0       	ldi	r21, 0x00	; 0
    264a:	ba 01       	movw	r22, r20
    264c:	8e 2d       	mov	r24, r14
    264e:	fe de       	rcall	.-516    	; 0x244c <send_cmd>
    2650:	88 23       	and	r24, r24
    2652:	41 f0       	breq	.+16     	; 0x2664 <disk_initialize+0x114>
				dly_us(1000);
    2654:	88 ee       	ldi	r24, 0xE8	; 232
    2656:	93 e0       	ldi	r25, 0x03	; 3
    2658:	c3 dd       	rcall	.-1146   	; 0x21e0 <dly_us>
			if (send_cmd(ACMD41, 0) <= 1) 	{
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 */
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 */
			}
			for (tmr = 1000; tmr; tmr--) {			/* Wait for leaving idle state */
    265a:	01 50       	subi	r16, 0x01	; 1
    265c:	11 09       	sbc	r17, r1
    265e:	99 f7       	brne	.-26     	; 0x2646 <disk_initialize+0xf6>
				if (send_cmd(cmd, 0) == 0) break;
				dly_us(1000);
			}
			if (!tmr || send_cmd(CMD16, 512) != 0)	/* Set R/W block length to 512 */
				ty = 0;
    2660:	f1 2c       	mov	r15, r1
    2662:	1c c0       	rjmp	.+56     	; 0x269c <disk_initialize+0x14c>
			}
			for (tmr = 1000; tmr; tmr--) {			/* Wait for leaving idle state */
				if (send_cmd(cmd, 0) == 0) break;
				dly_us(1000);
			}
			if (!tmr || send_cmd(CMD16, 512) != 0)	/* Set R/W block length to 512 */
    2664:	01 2b       	or	r16, r17
    2666:	c9 f0       	breq	.+50     	; 0x269a <disk_initialize+0x14a>
    2668:	40 e0       	ldi	r20, 0x00	; 0
    266a:	52 e0       	ldi	r21, 0x02	; 2
    266c:	60 e0       	ldi	r22, 0x00	; 0
    266e:	70 e0       	ldi	r23, 0x00	; 0
    2670:	80 e1       	ldi	r24, 0x10	; 16
    2672:	ec de       	rcall	.-552    	; 0x244c <send_cmd>
    2674:	88 23       	and	r24, r24
    2676:	91 f0       	breq	.+36     	; 0x269c <disk_initialize+0x14c>
				ty = 0;
    2678:	f1 2c       	mov	r15, r1
    267a:	10 c0       	rjmp	.+32     	; 0x269c <disk_initialize+0x14c>
		for (int i = 0; i < 8; i++)
		{
			CK_H(); CK_L();
		}
	}
	ty = 0;
    267c:	f1 2c       	mov	r15, r1
    267e:	0e c0       	rjmp	.+28     	; 0x269c <disk_initialize+0x14c>
    2680:	f1 2c       	mov	r15, r1
    2682:	0c c0       	rjmp	.+24     	; 0x269c <disk_initialize+0x14c>
    2684:	f1 2c       	mov	r15, r1
    2686:	0a c0       	rjmp	.+20     	; 0x269c <disk_initialize+0x14c>
    2688:	f1 2c       	mov	r15, r1
    268a:	08 c0       	rjmp	.+16     	; 0x269c <disk_initialize+0x14c>
    268c:	f1 2c       	mov	r15, r1
    268e:	06 c0       	rjmp	.+12     	; 0x269c <disk_initialize+0x14c>
					if (send_cmd(ACMD41, 1UL << 30) == 0) break;
					dly_us(1000);
				}
				if (tmr && send_cmd(CMD58, 0) == 0) {	/* Check CCS bit in the OCR */
					rcvr_mmc(buf, 4);
					ty = (buf[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* SDv2 */
    2690:	0f 2e       	mov	r0, r31
    2692:	fc e0       	ldi	r31, 0x0C	; 12
    2694:	ff 2e       	mov	r15, r31
    2696:	f0 2d       	mov	r31, r0
    2698:	01 c0       	rjmp	.+2      	; 0x269c <disk_initialize+0x14c>
			for (tmr = 1000; tmr; tmr--) {			/* Wait for leaving idle state */
				if (send_cmd(cmd, 0) == 0) break;
				dly_us(1000);
			}
			if (!tmr || send_cmd(CMD16, 512) != 0)	/* Set R/W block length to 512 */
				ty = 0;
    269a:	f1 2c       	mov	r15, r1
		}
	}
	CardType = ty;
    269c:	f0 92 32 02 	sts	0x0232, r15
	s = ty ? 0 : STA_NOINIT;
    26a0:	11 e0       	ldi	r17, 0x01	; 1
    26a2:	f1 10       	cpse	r15, r1
    26a4:	10 e0       	ldi	r17, 0x00	; 0
	Stat = s;
    26a6:	10 93 00 02 	sts	0x0200, r17

	deselect();
    26aa:	34 de       	rcall	.-920    	; 0x2314 <deselect>

	return s;
    26ac:	81 2f       	mov	r24, r17
    26ae:	01 c0       	rjmp	.+2      	; 0x26b2 <disk_initialize+0x162>
	BYTE n, ty, cmd, buf[4];
	UINT tmr;
	DSTATUS s;


	if (drv) return RES_NOTRDY;
    26b0:	83 e0       	ldi	r24, 0x03	; 3
	Stat = s;

	deselect();

	return s;
}
    26b2:	0f 90       	pop	r0
    26b4:	0f 90       	pop	r0
    26b6:	0f 90       	pop	r0
    26b8:	0f 90       	pop	r0
    26ba:	df 91       	pop	r29
    26bc:	cf 91       	pop	r28
    26be:	1f 91       	pop	r17
    26c0:	0f 91       	pop	r16
    26c2:	ff 90       	pop	r15
    26c4:	ef 90       	pop	r14
    26c6:	08 95       	ret

000026c8 <disk_read>:
	BYTE drv,			/* Physical drive nmuber (0) */
	BYTE *buff,			/* Pointer to the data buffer to store read data */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Sector count (1..128) */
)
{
    26c8:	ff 92       	push	r15
    26ca:	0f 93       	push	r16
    26cc:	1f 93       	push	r17
    26ce:	cf 93       	push	r28
    26d0:	df 93       	push	r29
    26d2:	eb 01       	movw	r28, r22

DSTATUS disk_status (
	BYTE drv			/* Drive number (always 0) */
)
{
	if (drv) return STA_NOINIT;
    26d4:	81 11       	cpse	r24, r1
    26d6:	3b c0       	rjmp	.+118    	; 0x274e <disk_read+0x86>
)
{
	BYTE cmd;


	if (disk_status(drv) & STA_NOINIT) return RES_NOTRDY;
    26d8:	80 91 00 02 	lds	r24, 0x0200
    26dc:	80 fd       	sbrc	r24, 0
    26de:	39 c0       	rjmp	.+114    	; 0x2752 <disk_read+0x8a>
	if (!(CardType & CT_BLOCK)) sector *= 512;	/* Convert LBA to byte address if needed */
    26e0:	80 91 32 02 	lds	r24, 0x0232
    26e4:	83 fd       	sbrc	r24, 3
    26e6:	09 c0       	rjmp	.+18     	; 0x26fa <disk_read+0x32>
    26e8:	01 2e       	mov	r0, r17
    26ea:	19 e0       	ldi	r17, 0x09	; 9
    26ec:	22 0f       	add	r18, r18
    26ee:	33 1f       	adc	r19, r19
    26f0:	44 1f       	adc	r20, r20
    26f2:	55 1f       	adc	r21, r21
    26f4:	1a 95       	dec	r17
    26f6:	d1 f7       	brne	.-12     	; 0x26ec <disk_read+0x24>
    26f8:	10 2d       	mov	r17, r0

	cmd = count > 1 ? CMD18 : CMD17;			/*  READ_MULTIPLE_BLOCK : READ_SINGLE_BLOCK */
    26fa:	02 30       	cpi	r16, 0x02	; 2
    26fc:	11 05       	cpc	r17, r1
    26fe:	28 f4       	brcc	.+10     	; 0x270a <disk_read+0x42>
    2700:	0f 2e       	mov	r0, r31
    2702:	f1 e1       	ldi	r31, 0x11	; 17
    2704:	ff 2e       	mov	r15, r31
    2706:	f0 2d       	mov	r31, r0
    2708:	04 c0       	rjmp	.+8      	; 0x2712 <disk_read+0x4a>
    270a:	0f 2e       	mov	r0, r31
    270c:	f2 e1       	ldi	r31, 0x12	; 18
    270e:	ff 2e       	mov	r15, r31
    2710:	f0 2d       	mov	r31, r0
	if (send_cmd(cmd, sector) == 0) {
    2712:	ba 01       	movw	r22, r20
    2714:	a9 01       	movw	r20, r18
    2716:	8f 2d       	mov	r24, r15
    2718:	99 de       	rcall	.-718    	; 0x244c <send_cmd>
    271a:	81 11       	cpse	r24, r1
    271c:	12 c0       	rjmp	.+36     	; 0x2742 <disk_read+0x7a>
		do {
			if (!rcvr_datablock(buff, 512)) break;
    271e:	60 e0       	ldi	r22, 0x00	; 0
    2720:	72 e0       	ldi	r23, 0x02	; 2
    2722:	ce 01       	movw	r24, r28
    2724:	22 de       	rcall	.-956    	; 0x236a <rcvr_datablock>
    2726:	89 2b       	or	r24, r25
    2728:	21 f0       	breq	.+8      	; 0x2732 <disk_read+0x6a>
			buff += 512;
    272a:	de 5f       	subi	r29, 0xFE	; 254
		} while (--count);
    272c:	01 50       	subi	r16, 0x01	; 1
    272e:	11 09       	sbc	r17, r1
    2730:	b1 f7       	brne	.-20     	; 0x271e <disk_read+0x56>
		if (cmd == CMD18) send_cmd(CMD12, 0);	/* STOP_TRANSMISSION */
    2732:	82 e1       	ldi	r24, 0x12	; 18
    2734:	f8 12       	cpse	r15, r24
    2736:	05 c0       	rjmp	.+10     	; 0x2742 <disk_read+0x7a>
    2738:	40 e0       	ldi	r20, 0x00	; 0
    273a:	50 e0       	ldi	r21, 0x00	; 0
    273c:	ba 01       	movw	r22, r20
    273e:	8c e0       	ldi	r24, 0x0C	; 12
    2740:	85 de       	rcall	.-758    	; 0x244c <send_cmd>
	}
	deselect();
    2742:	e8 dd       	rcall	.-1072   	; 0x2314 <deselect>

	return count ? RES_ERROR : RES_OK;
    2744:	81 e0       	ldi	r24, 0x01	; 1
    2746:	01 2b       	or	r16, r17
    2748:	29 f4       	brne	.+10     	; 0x2754 <disk_read+0x8c>
    274a:	80 e0       	ldi	r24, 0x00	; 0
    274c:	03 c0       	rjmp	.+6      	; 0x2754 <disk_read+0x8c>
)
{
	BYTE cmd;


	if (disk_status(drv) & STA_NOINIT) return RES_NOTRDY;
    274e:	83 e0       	ldi	r24, 0x03	; 3
    2750:	01 c0       	rjmp	.+2      	; 0x2754 <disk_read+0x8c>
    2752:	83 e0       	ldi	r24, 0x03	; 3
		if (cmd == CMD18) send_cmd(CMD12, 0);	/* STOP_TRANSMISSION */
	}
	deselect();

	return count ? RES_ERROR : RES_OK;
}
    2754:	df 91       	pop	r29
    2756:	cf 91       	pop	r28
    2758:	1f 91       	pop	r17
    275a:	0f 91       	pop	r16
    275c:	ff 90       	pop	r15
    275e:	08 95       	ret

00002760 <disk_write>:
	BYTE drv,			/* Physical drive nmuber (0) */
	const BYTE *buff,	/* Pointer to the data to be written */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Sector count (1..128) */
)
{
    2760:	cf 92       	push	r12
    2762:	df 92       	push	r13
    2764:	ef 92       	push	r14
    2766:	ff 92       	push	r15
    2768:	0f 93       	push	r16
    276a:	1f 93       	push	r17
    276c:	cf 93       	push	r28
    276e:	df 93       	push	r29
    2770:	eb 01       	movw	r28, r22
    2772:	69 01       	movw	r12, r18
    2774:	7a 01       	movw	r14, r20

DSTATUS disk_status (
	BYTE drv			/* Drive number (always 0) */
)
{
	if (drv) return STA_NOINIT;
    2776:	81 11       	cpse	r24, r1
    2778:	49 c0       	rjmp	.+146    	; 0x280c <disk_write+0xac>
	const BYTE *buff,	/* Pointer to the data to be written */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Sector count (1..128) */
)
{
	if (disk_status(drv) & STA_NOINIT) return RES_NOTRDY;
    277a:	80 91 00 02 	lds	r24, 0x0200
    277e:	80 fd       	sbrc	r24, 0
    2780:	47 c0       	rjmp	.+142    	; 0x2810 <disk_write+0xb0>
	if (!(CardType & CT_BLOCK)) sector *= 512;	/* Convert LBA to byte address if needed */
    2782:	80 91 32 02 	lds	r24, 0x0232
    2786:	83 fd       	sbrc	r24, 3
    2788:	09 c0       	rjmp	.+18     	; 0x279c <disk_write+0x3c>
    278a:	0b 2e       	mov	r0, r27
    278c:	b9 e0       	ldi	r27, 0x09	; 9
    278e:	cc 0c       	add	r12, r12
    2790:	dd 1c       	adc	r13, r13
    2792:	ee 1c       	adc	r14, r14
    2794:	ff 1c       	adc	r15, r15
    2796:	ba 95       	dec	r27
    2798:	d1 f7       	brne	.-12     	; 0x278e <disk_write+0x2e>
    279a:	b0 2d       	mov	r27, r0

	if (count == 1) {	/* Single block write */
    279c:	01 30       	cpi	r16, 0x01	; 1
    279e:	11 05       	cpc	r17, r1
    27a0:	89 f4       	brne	.+34     	; 0x27c4 <disk_write+0x64>
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
    27a2:	b7 01       	movw	r22, r14
    27a4:	a6 01       	movw	r20, r12
    27a6:	88 e1       	ldi	r24, 0x18	; 24
    27a8:	51 de       	rcall	.-862    	; 0x244c <send_cmd>
    27aa:	81 11       	cpse	r24, r1
    27ac:	29 c0       	rjmp	.+82     	; 0x2800 <disk_write+0xa0>
			&& xmit_datablock(buff, 0xFE))
    27ae:	6e ef       	ldi	r22, 0xFE	; 254
    27b0:	ce 01       	movw	r24, r28
    27b2:	14 de       	rcall	.-984    	; 0x23dc <xmit_datablock>
    27b4:	31 e0       	ldi	r19, 0x01	; 1
    27b6:	20 e0       	ldi	r18, 0x00	; 0
    27b8:	89 2b       	or	r24, r25
    27ba:	09 f0       	breq	.+2      	; 0x27be <disk_write+0x5e>
    27bc:	30 e0       	ldi	r19, 0x00	; 0
    27be:	03 2f       	mov	r16, r19
    27c0:	12 2f       	mov	r17, r18
    27c2:	1e c0       	rjmp	.+60     	; 0x2800 <disk_write+0xa0>
			count = 0;
	}
	else {				/* Multiple block write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);
    27c4:	86 70       	andi	r24, 0x06	; 6
    27c6:	29 f0       	breq	.+10     	; 0x27d2 <disk_write+0x72>
    27c8:	a8 01       	movw	r20, r16
    27ca:	60 e0       	ldi	r22, 0x00	; 0
    27cc:	70 e0       	ldi	r23, 0x00	; 0
    27ce:	87 e9       	ldi	r24, 0x97	; 151
    27d0:	3d de       	rcall	.-902    	; 0x244c <send_cmd>
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
    27d2:	b7 01       	movw	r22, r14
    27d4:	a6 01       	movw	r20, r12
    27d6:	89 e1       	ldi	r24, 0x19	; 25
    27d8:	39 de       	rcall	.-910    	; 0x244c <send_cmd>
    27da:	81 11       	cpse	r24, r1
    27dc:	11 c0       	rjmp	.+34     	; 0x2800 <disk_write+0xa0>
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
    27de:	6c ef       	ldi	r22, 0xFC	; 252
    27e0:	ce 01       	movw	r24, r28
    27e2:	fc dd       	rcall	.-1032   	; 0x23dc <xmit_datablock>
    27e4:	89 2b       	or	r24, r25
    27e6:	21 f0       	breq	.+8      	; 0x27f0 <disk_write+0x90>
				buff += 512;
    27e8:	de 5f       	subi	r29, 0xFE	; 254
			} while (--count);
    27ea:	01 50       	subi	r16, 0x01	; 1
    27ec:	11 09       	sbc	r17, r1
    27ee:	b9 f7       	brne	.-18     	; 0x27de <disk_write+0x7e>
			if (!xmit_datablock(0, 0xFD))	/* STOP_TRAN token */
    27f0:	6d ef       	ldi	r22, 0xFD	; 253
    27f2:	80 e0       	ldi	r24, 0x00	; 0
    27f4:	90 e0       	ldi	r25, 0x00	; 0
    27f6:	f2 dd       	rcall	.-1052   	; 0x23dc <xmit_datablock>
    27f8:	89 2b       	or	r24, r25
    27fa:	11 f4       	brne	.+4      	; 0x2800 <disk_write+0xa0>
				count = 1;
    27fc:	01 e0       	ldi	r16, 0x01	; 1
    27fe:	10 e0       	ldi	r17, 0x00	; 0
		}
	}
	deselect();
    2800:	89 dd       	rcall	.-1262   	; 0x2314 <deselect>

	return count ? RES_ERROR : RES_OK;
    2802:	81 e0       	ldi	r24, 0x01	; 1
    2804:	01 2b       	or	r16, r17
    2806:	29 f4       	brne	.+10     	; 0x2812 <disk_write+0xb2>
    2808:	80 e0       	ldi	r24, 0x00	; 0
    280a:	03 c0       	rjmp	.+6      	; 0x2812 <disk_write+0xb2>
	const BYTE *buff,	/* Pointer to the data to be written */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Sector count (1..128) */
)
{
	if (disk_status(drv) & STA_NOINIT) return RES_NOTRDY;
    280c:	83 e0       	ldi	r24, 0x03	; 3
    280e:	01 c0       	rjmp	.+2      	; 0x2812 <disk_write+0xb2>
    2810:	83 e0       	ldi	r24, 0x03	; 3
		}
	}
	deselect();

	return count ? RES_ERROR : RES_OK;
}
    2812:	df 91       	pop	r29
    2814:	cf 91       	pop	r28
    2816:	1f 91       	pop	r17
    2818:	0f 91       	pop	r16
    281a:	ff 90       	pop	r15
    281c:	ef 90       	pop	r14
    281e:	df 90       	pop	r13
    2820:	cf 90       	pop	r12
    2822:	08 95       	ret

00002824 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE drv,		/* Physical drive nmuber (0) */
	BYTE ctrl,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
    2824:	0f 93       	push	r16
    2826:	1f 93       	push	r17
    2828:	cf 93       	push	r28
    282a:	df 93       	push	r29
    282c:	cd b7       	in	r28, 0x3d	; 61
    282e:	de b7       	in	r29, 0x3e	; 62
    2830:	60 97       	sbiw	r28, 0x10	; 16
    2832:	0f b6       	in	r0, 0x3f	; 63
    2834:	f8 94       	cli
    2836:	de bf       	out	0x3e, r29	; 62
    2838:	0f be       	out	0x3f, r0	; 63
    283a:	cd bf       	out	0x3d, r28	; 61

DSTATUS disk_status (
	BYTE drv			/* Drive number (always 0) */
)
{
	if (drv) return STA_NOINIT;
    283c:	81 11       	cpse	r24, r1
    283e:	98 c0       	rjmp	.+304    	; 0x2970 <disk_ioctl+0x14c>
	DRESULT res;
	BYTE n, csd[16];
	DWORD cs;


	if (disk_status(drv) & STA_NOINIT) return RES_NOTRDY;	/* Check if card is in the socket */
    2840:	80 91 00 02 	lds	r24, 0x0200
    2844:	80 fd       	sbrc	r24, 0
    2846:	96 c0       	rjmp	.+300    	; 0x2974 <disk_ioctl+0x150>
    2848:	8a 01       	movw	r16, r20

	res = RES_ERROR;
	switch (ctrl) {
    284a:	61 30       	cpi	r22, 0x01	; 1
    284c:	61 f0       	breq	.+24     	; 0x2866 <disk_ioctl+0x42>
    284e:	20 f0       	brcs	.+8      	; 0x2858 <disk_ioctl+0x34>
    2850:	63 30       	cpi	r22, 0x03	; 3
    2852:	09 f4       	brne	.+2      	; 0x2856 <disk_ioctl+0x32>
    2854:	7a c0       	rjmp	.+244    	; 0x294a <disk_ioctl+0x126>
    2856:	84 c0       	rjmp	.+264    	; 0x2960 <disk_ioctl+0x13c>
		case CTRL_SYNC :		/* Make sure that no pending write process */
			if (select()) res = RES_OK;
    2858:	6c dd       	rcall	.-1320   	; 0x2332 <select>
    285a:	11 e0       	ldi	r17, 0x01	; 1
    285c:	89 2b       	or	r24, r25
    285e:	09 f4       	brne	.+2      	; 0x2862 <disk_ioctl+0x3e>
    2860:	84 c0       	rjmp	.+264    	; 0x296a <disk_ioctl+0x146>
    2862:	10 e0       	ldi	r17, 0x00	; 0
    2864:	82 c0       	rjmp	.+260    	; 0x296a <disk_ioctl+0x146>
			break;

		case GET_SECTOR_COUNT :	/* Get number of sectors on the disk (DWORD) */
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
    2866:	40 e0       	ldi	r20, 0x00	; 0
    2868:	50 e0       	ldi	r21, 0x00	; 0
    286a:	ba 01       	movw	r22, r20
    286c:	89 e0       	ldi	r24, 0x09	; 9
    286e:	ee dd       	rcall	.-1060   	; 0x244c <send_cmd>
    2870:	81 11       	cpse	r24, r1
    2872:	78 c0       	rjmp	.+240    	; 0x2964 <disk_ioctl+0x140>
    2874:	60 e1       	ldi	r22, 0x10	; 16
    2876:	70 e0       	ldi	r23, 0x00	; 0
    2878:	ce 01       	movw	r24, r28
    287a:	01 96       	adiw	r24, 0x01	; 1
    287c:	76 dd       	rcall	.-1300   	; 0x236a <rcvr_datablock>
    287e:	89 2b       	or	r24, r25
    2880:	09 f4       	brne	.+2      	; 0x2884 <disk_ioctl+0x60>
    2882:	72 c0       	rjmp	.+228    	; 0x2968 <disk_ioctl+0x144>
				if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
    2884:	89 81       	ldd	r24, Y+1	; 0x01
    2886:	82 95       	swap	r24
    2888:	86 95       	lsr	r24
    288a:	86 95       	lsr	r24
    288c:	83 70       	andi	r24, 0x03	; 3
    288e:	81 30       	cpi	r24, 0x01	; 1
    2890:	31 f5       	brne	.+76     	; 0x28de <disk_ioctl+0xba>
					cs = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
    2892:	88 85       	ldd	r24, Y+8	; 0x08
    2894:	8f 73       	andi	r24, 0x3F	; 63
    2896:	90 e0       	ldi	r25, 0x00	; 0
    2898:	a0 e0       	ldi	r26, 0x00	; 0
    289a:	b0 e0       	ldi	r27, 0x00	; 0
    289c:	dc 01       	movw	r26, r24
    289e:	99 27       	eor	r25, r25
    28a0:	88 27       	eor	r24, r24
    28a2:	01 96       	adiw	r24, 0x01	; 1
    28a4:	a1 1d       	adc	r26, r1
    28a6:	b1 1d       	adc	r27, r1
    28a8:	29 85       	ldd	r18, Y+9	; 0x09
    28aa:	30 e0       	ldi	r19, 0x00	; 0
    28ac:	32 2f       	mov	r19, r18
    28ae:	22 27       	eor	r18, r18
    28b0:	4a 85       	ldd	r20, Y+10	; 0x0a
    28b2:	24 0f       	add	r18, r20
    28b4:	31 1d       	adc	r19, r1
    28b6:	82 0f       	add	r24, r18
    28b8:	93 1f       	adc	r25, r19
    28ba:	a1 1d       	adc	r26, r1
    28bc:	b1 1d       	adc	r27, r1
					*(DWORD*)buff = cs << 10;
    28be:	07 2e       	mov	r0, r23
    28c0:	7a e0       	ldi	r23, 0x0A	; 10
    28c2:	88 0f       	add	r24, r24
    28c4:	99 1f       	adc	r25, r25
    28c6:	aa 1f       	adc	r26, r26
    28c8:	bb 1f       	adc	r27, r27
    28ca:	7a 95       	dec	r23
    28cc:	d1 f7       	brne	.-12     	; 0x28c2 <disk_ioctl+0x9e>
    28ce:	70 2d       	mov	r23, r0
    28d0:	f8 01       	movw	r30, r16
    28d2:	80 83       	st	Z, r24
    28d4:	91 83       	std	Z+1, r25	; 0x01
    28d6:	a2 83       	std	Z+2, r26	; 0x02
    28d8:	b3 83       	std	Z+3, r27	; 0x03
				} else {					/* SDC ver 1.XX or MMC */
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
					cs = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
					*(DWORD*)buff = cs << (n - 9);
				}
				res = RES_OK;
    28da:	10 e0       	ldi	r17, 0x00	; 0
    28dc:	46 c0       	rjmp	.+140    	; 0x296a <disk_ioctl+0x146>
				if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
					cs = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
					*(DWORD*)buff = cs << 10;
				} else {					/* SDC ver 1.XX or MMC */
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
					cs = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
    28de:	89 85       	ldd	r24, Y+9	; 0x09
    28e0:	82 95       	swap	r24
    28e2:	86 95       	lsr	r24
    28e4:	86 95       	lsr	r24
    28e6:	83 70       	andi	r24, 0x03	; 3
    28e8:	28 85       	ldd	r18, Y+8	; 0x08
    28ea:	90 e0       	ldi	r25, 0x00	; 0
    28ec:	f4 e0       	ldi	r31, 0x04	; 4
    28ee:	2f 9f       	mul	r18, r31
    28f0:	80 0d       	add	r24, r0
    28f2:	91 1d       	adc	r25, r1
    28f4:	11 24       	eor	r1, r1
    28f6:	9c 01       	movw	r18, r24
    28f8:	2f 5f       	subi	r18, 0xFF	; 255
    28fa:	3f 4f       	sbci	r19, 0xFF	; 255
    28fc:	9f 81       	ldd	r25, Y+7	; 0x07
    28fe:	93 70       	andi	r25, 0x03	; 3
    2900:	89 2f       	mov	r24, r25
    2902:	90 e0       	ldi	r25, 0x00	; 0
    2904:	98 2f       	mov	r25, r24
    2906:	88 27       	eor	r24, r24
    2908:	99 0f       	add	r25, r25
    290a:	99 0f       	add	r25, r25
    290c:	82 0f       	add	r24, r18
    290e:	93 1f       	adc	r25, r19
    2910:	a0 e0       	ldi	r26, 0x00	; 0
    2912:	b0 e0       	ldi	r27, 0x00	; 0
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
				if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
					cs = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
					*(DWORD*)buff = cs << 10;
				} else {					/* SDC ver 1.XX or MMC */
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
    2914:	2e 81       	ldd	r18, Y+6	; 0x06
    2916:	32 2f       	mov	r19, r18
    2918:	3f 70       	andi	r19, 0x0F	; 15
    291a:	2b 85       	ldd	r18, Y+11	; 0x0b
    291c:	22 1f       	adc	r18, r18
    291e:	22 27       	eor	r18, r18
    2920:	22 1f       	adc	r18, r18
    2922:	23 0f       	add	r18, r19
    2924:	3a 85       	ldd	r19, Y+10	; 0x0a
    2926:	33 70       	andi	r19, 0x03	; 3
    2928:	33 0f       	add	r19, r19
    292a:	23 0f       	add	r18, r19
					cs = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
					*(DWORD*)buff = cs << (n - 9);
    292c:	27 50       	subi	r18, 0x07	; 7
    292e:	04 c0       	rjmp	.+8      	; 0x2938 <disk_ioctl+0x114>
    2930:	88 0f       	add	r24, r24
    2932:	99 1f       	adc	r25, r25
    2934:	aa 1f       	adc	r26, r26
    2936:	bb 1f       	adc	r27, r27
    2938:	2a 95       	dec	r18
    293a:	d2 f7       	brpl	.-12     	; 0x2930 <disk_ioctl+0x10c>
    293c:	f8 01       	movw	r30, r16
    293e:	80 83       	st	Z, r24
    2940:	91 83       	std	Z+1, r25	; 0x01
    2942:	a2 83       	std	Z+2, r26	; 0x02
    2944:	b3 83       	std	Z+3, r27	; 0x03
				}
				res = RES_OK;
    2946:	10 e0       	ldi	r17, 0x00	; 0
    2948:	10 c0       	rjmp	.+32     	; 0x296a <disk_ioctl+0x146>
			}
			break;

		case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
			*(DWORD*)buff = 128;
    294a:	80 e8       	ldi	r24, 0x80	; 128
    294c:	90 e0       	ldi	r25, 0x00	; 0
    294e:	a0 e0       	ldi	r26, 0x00	; 0
    2950:	b0 e0       	ldi	r27, 0x00	; 0
    2952:	fa 01       	movw	r30, r20
    2954:	80 83       	st	Z, r24
    2956:	91 83       	std	Z+1, r25	; 0x01
    2958:	a2 83       	std	Z+2, r26	; 0x02
    295a:	b3 83       	std	Z+3, r27	; 0x03
			res = RES_OK;
    295c:	10 e0       	ldi	r17, 0x00	; 0
			break;
    295e:	05 c0       	rjmp	.+10     	; 0x296a <disk_ioctl+0x146>

		default:
			res = RES_PARERR;
    2960:	14 e0       	ldi	r17, 0x04	; 4
    2962:	03 c0       	rjmp	.+6      	; 0x296a <disk_ioctl+0x146>
	DWORD cs;


	if (disk_status(drv) & STA_NOINIT) return RES_NOTRDY;	/* Check if card is in the socket */

	res = RES_ERROR;
    2964:	11 e0       	ldi	r17, 0x01	; 1
    2966:	01 c0       	rjmp	.+2      	; 0x296a <disk_ioctl+0x146>
    2968:	11 e0       	ldi	r17, 0x01	; 1

		default:
			res = RES_PARERR;
	}

	deselect();
    296a:	d4 dc       	rcall	.-1624   	; 0x2314 <deselect>

	return res;
    296c:	81 2f       	mov	r24, r17
    296e:	03 c0       	rjmp	.+6      	; 0x2976 <disk_ioctl+0x152>
	DRESULT res;
	BYTE n, csd[16];
	DWORD cs;


	if (disk_status(drv) & STA_NOINIT) return RES_NOTRDY;	/* Check if card is in the socket */
    2970:	83 e0       	ldi	r24, 0x03	; 3
    2972:	01 c0       	rjmp	.+2      	; 0x2976 <disk_ioctl+0x152>
    2974:	83 e0       	ldi	r24, 0x03	; 3
	}

	deselect();

	return res;
}
    2976:	60 96       	adiw	r28, 0x10	; 16
    2978:	0f b6       	in	r0, 0x3f	; 63
    297a:	f8 94       	cli
    297c:	de bf       	out	0x3e, r29	; 62
    297e:	0f be       	out	0x3f, r0	; 63
    2980:	cd bf       	out	0x3d, r28	; 61
    2982:	df 91       	pop	r29
    2984:	cf 91       	pop	r28
    2986:	1f 91       	pop	r17
    2988:	0f 91       	pop	r16
    298a:	08 95       	ret

0000298c <__udivmodsi4>:
    298c:	a1 e2       	ldi	r26, 0x21	; 33
    298e:	1a 2e       	mov	r1, r26
    2990:	aa 1b       	sub	r26, r26
    2992:	bb 1b       	sub	r27, r27
    2994:	fd 01       	movw	r30, r26
    2996:	0d c0       	rjmp	.+26     	; 0x29b2 <__udivmodsi4_ep>

00002998 <__udivmodsi4_loop>:
    2998:	aa 1f       	adc	r26, r26
    299a:	bb 1f       	adc	r27, r27
    299c:	ee 1f       	adc	r30, r30
    299e:	ff 1f       	adc	r31, r31
    29a0:	a2 17       	cp	r26, r18
    29a2:	b3 07       	cpc	r27, r19
    29a4:	e4 07       	cpc	r30, r20
    29a6:	f5 07       	cpc	r31, r21
    29a8:	20 f0       	brcs	.+8      	; 0x29b2 <__udivmodsi4_ep>
    29aa:	a2 1b       	sub	r26, r18
    29ac:	b3 0b       	sbc	r27, r19
    29ae:	e4 0b       	sbc	r30, r20
    29b0:	f5 0b       	sbc	r31, r21

000029b2 <__udivmodsi4_ep>:
    29b2:	66 1f       	adc	r22, r22
    29b4:	77 1f       	adc	r23, r23
    29b6:	88 1f       	adc	r24, r24
    29b8:	99 1f       	adc	r25, r25
    29ba:	1a 94       	dec	r1
    29bc:	69 f7       	brne	.-38     	; 0x2998 <__udivmodsi4_loop>
    29be:	60 95       	com	r22
    29c0:	70 95       	com	r23
    29c2:	80 95       	com	r24
    29c4:	90 95       	com	r25
    29c6:	9b 01       	movw	r18, r22
    29c8:	ac 01       	movw	r20, r24
    29ca:	bd 01       	movw	r22, r26
    29cc:	cf 01       	movw	r24, r30
    29ce:	08 95       	ret

000029d0 <__muluhisi3>:
    29d0:	09 d0       	rcall	.+18     	; 0x29e4 <__umulhisi3>
    29d2:	a5 9f       	mul	r26, r21
    29d4:	90 0d       	add	r25, r0
    29d6:	b4 9f       	mul	r27, r20
    29d8:	90 0d       	add	r25, r0
    29da:	a4 9f       	mul	r26, r20
    29dc:	80 0d       	add	r24, r0
    29de:	91 1d       	adc	r25, r1
    29e0:	11 24       	eor	r1, r1
    29e2:	08 95       	ret

000029e4 <__umulhisi3>:
    29e4:	a2 9f       	mul	r26, r18
    29e6:	b0 01       	movw	r22, r0
    29e8:	b3 9f       	mul	r27, r19
    29ea:	c0 01       	movw	r24, r0
    29ec:	a3 9f       	mul	r26, r19
    29ee:	70 0d       	add	r23, r0
    29f0:	81 1d       	adc	r24, r1
    29f2:	11 24       	eor	r1, r1
    29f4:	91 1d       	adc	r25, r1
    29f6:	b2 9f       	mul	r27, r18
    29f8:	70 0d       	add	r23, r0
    29fa:	81 1d       	adc	r24, r1
    29fc:	11 24       	eor	r1, r1
    29fe:	91 1d       	adc	r25, r1
    2a00:	08 95       	ret

00002a02 <_exit>:
    2a02:	f8 94       	cli

00002a04 <__stop_program>:
    2a04:	ff cf       	rjmp	.-2      	; 0x2a04 <__stop_program>
