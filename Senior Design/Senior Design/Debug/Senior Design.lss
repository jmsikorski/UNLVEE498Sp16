
Senior Design.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000064  00800200  000002da  0000036e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002da  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800264  00800264  000003d2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000003d2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000404  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000068  00000000  00000000  00000444  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000059d  00000000  00000000  000004ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000268  00000000  00000000  00000a49  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000482  00000000  00000000  00000cb1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001a8  00000000  00000000  00001134  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000024b  00000000  00000000  000012dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000008fe  00000000  00000000  00001527  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000058  00000000  00000000  00001e25  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	8e c0       	rjmp	.+284    	; 0x122 <__bad_interrupt>
   6:	00 00       	nop
   8:	8c c0       	rjmp	.+280    	; 0x122 <__bad_interrupt>
   a:	00 00       	nop
   c:	8a c0       	rjmp	.+276    	; 0x122 <__bad_interrupt>
   e:	00 00       	nop
  10:	88 c0       	rjmp	.+272    	; 0x122 <__bad_interrupt>
  12:	00 00       	nop
  14:	86 c0       	rjmp	.+268    	; 0x122 <__bad_interrupt>
  16:	00 00       	nop
  18:	84 c0       	rjmp	.+264    	; 0x122 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	82 c0       	rjmp	.+260    	; 0x122 <__bad_interrupt>
  1e:	00 00       	nop
  20:	80 c0       	rjmp	.+256    	; 0x122 <__bad_interrupt>
  22:	00 00       	nop
  24:	7e c0       	rjmp	.+252    	; 0x122 <__bad_interrupt>
  26:	00 00       	nop
  28:	7c c0       	rjmp	.+248    	; 0x122 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	7a c0       	rjmp	.+244    	; 0x122 <__bad_interrupt>
  2e:	00 00       	nop
  30:	78 c0       	rjmp	.+240    	; 0x122 <__bad_interrupt>
  32:	00 00       	nop
  34:	76 c0       	rjmp	.+236    	; 0x122 <__bad_interrupt>
  36:	00 00       	nop
  38:	74 c0       	rjmp	.+232    	; 0x122 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	72 c0       	rjmp	.+228    	; 0x122 <__bad_interrupt>
  3e:	00 00       	nop
  40:	70 c0       	rjmp	.+224    	; 0x122 <__bad_interrupt>
  42:	00 00       	nop
  44:	6e c0       	rjmp	.+220    	; 0x122 <__bad_interrupt>
  46:	00 00       	nop
  48:	6c c0       	rjmp	.+216    	; 0x122 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	6a c0       	rjmp	.+212    	; 0x122 <__bad_interrupt>
  4e:	00 00       	nop
  50:	68 c0       	rjmp	.+208    	; 0x122 <__bad_interrupt>
  52:	00 00       	nop
  54:	66 c0       	rjmp	.+204    	; 0x122 <__bad_interrupt>
  56:	00 00       	nop
  58:	64 c0       	rjmp	.+200    	; 0x122 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	62 c0       	rjmp	.+196    	; 0x122 <__bad_interrupt>
  5e:	00 00       	nop
  60:	60 c0       	rjmp	.+192    	; 0x122 <__bad_interrupt>
  62:	00 00       	nop
  64:	5f c0       	rjmp	.+190    	; 0x124 <__vector_25>
  66:	00 00       	nop
  68:	5c c0       	rjmp	.+184    	; 0x122 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	5a c0       	rjmp	.+180    	; 0x122 <__bad_interrupt>
  6e:	00 00       	nop
  70:	58 c0       	rjmp	.+176    	; 0x122 <__bad_interrupt>
  72:	00 00       	nop
  74:	56 c0       	rjmp	.+172    	; 0x122 <__bad_interrupt>
  76:	00 00       	nop
  78:	54 c0       	rjmp	.+168    	; 0x122 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	52 c0       	rjmp	.+164    	; 0x122 <__bad_interrupt>
  7e:	00 00       	nop
  80:	50 c0       	rjmp	.+160    	; 0x122 <__bad_interrupt>
  82:	00 00       	nop
  84:	4e c0       	rjmp	.+156    	; 0x122 <__bad_interrupt>
  86:	00 00       	nop
  88:	4c c0       	rjmp	.+152    	; 0x122 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	4a c0       	rjmp	.+148    	; 0x122 <__bad_interrupt>
  8e:	00 00       	nop
  90:	48 c0       	rjmp	.+144    	; 0x122 <__bad_interrupt>
  92:	00 00       	nop
  94:	46 c0       	rjmp	.+140    	; 0x122 <__bad_interrupt>
  96:	00 00       	nop
  98:	44 c0       	rjmp	.+136    	; 0x122 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	42 c0       	rjmp	.+132    	; 0x122 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	40 c0       	rjmp	.+128    	; 0x122 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	3e c0       	rjmp	.+124    	; 0x122 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	3c c0       	rjmp	.+120    	; 0x122 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	3a c0       	rjmp	.+116    	; 0x122 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	38 c0       	rjmp	.+112    	; 0x122 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	36 c0       	rjmp	.+108    	; 0x122 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	34 c0       	rjmp	.+104    	; 0x122 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	32 c0       	rjmp	.+100    	; 0x122 <__bad_interrupt>
  be:	00 00       	nop
  c0:	30 c0       	rjmp	.+96     	; 0x122 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	2e c0       	rjmp	.+92     	; 0x122 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	2c c0       	rjmp	.+88     	; 0x122 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	2a c0       	rjmp	.+84     	; 0x122 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	28 c0       	rjmp	.+80     	; 0x122 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	26 c0       	rjmp	.+76     	; 0x122 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	24 c0       	rjmp	.+72     	; 0x122 <__bad_interrupt>
  da:	00 00       	nop
  dc:	22 c0       	rjmp	.+68     	; 0x122 <__bad_interrupt>
  de:	00 00       	nop
  e0:	20 c0       	rjmp	.+64     	; 0x122 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	ea ed       	ldi	r30, 0xDA	; 218
  fc:	f2 e0       	ldi	r31, 0x02	; 2
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	a4 36       	cpi	r26, 0x64	; 100
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	22 e0       	ldi	r18, 0x02	; 2
 110:	a4 e6       	ldi	r26, 0x64	; 100
 112:	b2 e0       	ldi	r27, 0x02	; 2
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	a6 36       	cpi	r26, 0x66	; 102
 11a:	b2 07       	cpc	r27, r18
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	78 d0       	rcall	.+240    	; 0x210 <main>
 120:	da c0       	rjmp	.+436    	; 0x2d6 <_exit>

00000122 <__bad_interrupt>:
 122:	6e cf       	rjmp	.-292    	; 0x0 <__vectors>

00000124 <__vector_25>:
	else
	t = (y-b)/m;
	sprintf(buffer, "%d", (int)t);
	strcat(buffer, ",");
	return;
}
 124:	1f 92       	push	r1
 126:	0f 92       	push	r0
 128:	0f b6       	in	r0, 0x3f	; 63
 12a:	0f 92       	push	r0
 12c:	11 24       	eor	r1, r1
 12e:	8f 93       	push	r24
 130:	80 91 c6 00 	lds	r24, 0x00C6
 134:	80 93 65 02 	sts	0x0265, r24
 138:	81 e0       	ldi	r24, 0x01	; 1
 13a:	80 93 64 02 	sts	0x0264, r24
 13e:	8f 91       	pop	r24
 140:	0f 90       	pop	r0
 142:	0f be       	out	0x3f, r0	; 63
 144:	0f 90       	pop	r0
 146:	1f 90       	pop	r1
 148:	18 95       	reti

0000014a <usart_init>:

void usart_init(int n)
{
	switch(n)
 14a:	81 30       	cpi	r24, 0x01	; 1
 14c:	91 05       	cpc	r25, r1
 14e:	b9 f0       	breq	.+46     	; 0x17e <usart_init+0x34>
 150:	1c f4       	brge	.+6      	; 0x158 <usart_init+0xe>
 152:	89 2b       	or	r24, r25
 154:	39 f0       	breq	.+14     	; 0x164 <usart_init+0x1a>
 156:	08 95       	ret
 158:	82 30       	cpi	r24, 0x02	; 2
 15a:	91 05       	cpc	r25, r1
 15c:	e9 f0       	breq	.+58     	; 0x198 <usart_init+0x4e>
 15e:	03 97       	sbiw	r24, 0x03	; 3
 160:	41 f1       	breq	.+80     	; 0x1b2 <usart_init+0x68>
 162:	08 95       	ret
	{
		case 0:
			UCSR0B = (1<<TXEN0) | (1<<RXEN0) | (1<<RXCIE0); // TX Enable, RX Enable
 164:	88 e9       	ldi	r24, 0x98	; 152
 166:	80 93 c1 00 	sts	0x00C1, r24
			UCSR0C = (1<<UCSZ01) | (1<<UCSZ00); // 8 bit data segment
 16a:	86 e0       	ldi	r24, 0x06	; 6
 16c:	80 93 c2 00 	sts	0x00C2, r24
			UBRR0 = 0x33; // Baud rate
 170:	83 e3       	ldi	r24, 0x33	; 51
 172:	90 e0       	ldi	r25, 0x00	; 0
 174:	90 93 c5 00 	sts	0x00C5, r25
 178:	80 93 c4 00 	sts	0x00C4, r24
			break;
 17c:	08 95       	ret
		case 1:
			UCSR1B = (1<<TXEN1) | (1<<RXEN1); // TX Enable, RX Enable
 17e:	88 e1       	ldi	r24, 0x18	; 24
 180:	80 93 c9 00 	sts	0x00C9, r24
			UCSR1C = (1<<UCSZ11) | (1<<UCSZ10); // 8 bit data segment
 184:	86 e0       	ldi	r24, 0x06	; 6
 186:	80 93 ca 00 	sts	0x00CA, r24
			UBRR1 = 0x33; // Baud rate
 18a:	83 e3       	ldi	r24, 0x33	; 51
 18c:	90 e0       	ldi	r25, 0x00	; 0
 18e:	90 93 cd 00 	sts	0x00CD, r25
 192:	80 93 cc 00 	sts	0x00CC, r24
			break;
 196:	08 95       	ret
		case 2:
			UCSR2B = (1<<TXEN2) | (1<<RXEN2); // TX Enable, RX Enable
 198:	88 e1       	ldi	r24, 0x18	; 24
 19a:	80 93 d1 00 	sts	0x00D1, r24
			UCSR2C = (1<<UCSZ21) | (1<<UCSZ20); // 8 bit data segment
 19e:	86 e0       	ldi	r24, 0x06	; 6
 1a0:	80 93 d2 00 	sts	0x00D2, r24
			UBRR2 = 0x33; // Baud rate
 1a4:	83 e3       	ldi	r24, 0x33	; 51
 1a6:	90 e0       	ldi	r25, 0x00	; 0
 1a8:	90 93 d5 00 	sts	0x00D5, r25
 1ac:	80 93 d4 00 	sts	0x00D4, r24
			break;
 1b0:	08 95       	ret
		case 3:
			UCSR3B = (1<<TXEN3) | (1<<RXEN3); // TX Enable, RX Enable
 1b2:	88 e1       	ldi	r24, 0x18	; 24
 1b4:	80 93 31 01 	sts	0x0131, r24
			UCSR3C = (1<<UCSZ31) | (1<<UCSZ30); // 8 bit data segment
 1b8:	86 e0       	ldi	r24, 0x06	; 6
 1ba:	80 93 32 01 	sts	0x0132, r24
			UBRR3 = 0x33; // Baud rate
 1be:	83 e3       	ldi	r24, 0x33	; 51
 1c0:	90 e0       	ldi	r25, 0x00	; 0
 1c2:	90 93 35 01 	sts	0x0135, r25
 1c6:	80 93 34 01 	sts	0x0134, r24
 1ca:	08 95       	ret

000001cc <usart_send>:
		break;
	}
}

void usart_send (int n, char* data)
{
 1cc:	cf 93       	push	r28
 1ce:	df 93       	push	r29
 1d0:	eb 01       	movw	r28, r22
 1d2:	ab 01       	movw	r20, r22
	for(int i = 0; i < strlen(data); i++)
 1d4:	20 e0       	ldi	r18, 0x00	; 0
 1d6:	30 e0       	ldi	r19, 0x00	; 0
	{
		while (! (UCSR0A & (1<<UDRE0)));
 1d8:	e0 ec       	ldi	r30, 0xC0	; 192
 1da:	f0 e0       	ldi	r31, 0x00	; 0
		UDR0 = data[i];
 1dc:	66 ec       	ldi	r22, 0xC6	; 198
 1de:	70 e0       	ldi	r23, 0x00	; 0
	}
}

void usart_send (int n, char* data)
{
	for(int i = 0; i < strlen(data); i++)
 1e0:	0a c0       	rjmp	.+20     	; 0x1f6 <usart_send+0x2a>
	{
		while (! (UCSR0A & (1<<UDRE0)));
 1e2:	80 81       	ld	r24, Z
 1e4:	85 ff       	sbrs	r24, 5
 1e6:	fd cf       	rjmp	.-6      	; 0x1e2 <usart_send+0x16>
		UDR0 = data[i];
 1e8:	da 01       	movw	r26, r20
 1ea:	8d 91       	ld	r24, X+
 1ec:	ad 01       	movw	r20, r26
 1ee:	db 01       	movw	r26, r22
 1f0:	8c 93       	st	X, r24
	}
}

void usart_send (int n, char* data)
{
	for(int i = 0; i < strlen(data); i++)
 1f2:	2f 5f       	subi	r18, 0xFF	; 255
 1f4:	3f 4f       	sbci	r19, 0xFF	; 255
 1f6:	de 01       	movw	r26, r28
 1f8:	0d 90       	ld	r0, X+
 1fa:	00 20       	and	r0, r0
 1fc:	e9 f7       	brne	.-6      	; 0x1f8 <usart_send+0x2c>
 1fe:	11 97       	sbiw	r26, 0x01	; 1
 200:	ac 1b       	sub	r26, r28
 202:	bd 0b       	sbc	r27, r29
 204:	2a 17       	cp	r18, r26
 206:	3b 07       	cpc	r19, r27
 208:	60 f3       	brcs	.-40     	; 0x1e2 <usart_send+0x16>
	{
		while (! (UCSR0A & (1<<UDRE0)));
		UDR0 = data[i];
	}
	return;
}
 20a:	df 91       	pop	r29
 20c:	cf 91       	pop	r28
 20e:	08 95       	ret

00000210 <main>:
	rec = UDR0;
	rec_flag = 1;
}

int main(void)
{
 210:	cf 93       	push	r28
 212:	df 93       	push	r29
 214:	cd b7       	in	r28, 0x3d	; 61
 216:	de b7       	in	r29, 0x3e	; 62
 218:	ce 56       	subi	r28, 0x6E	; 110
 21a:	d1 09       	sbc	r29, r1
 21c:	0f b6       	in	r0, 0x3f	; 63
 21e:	f8 94       	cli
 220:	de bf       	out	0x3e, r29	; 62
 222:	0f be       	out	0x3f, r0	; 63
 224:	cd bf       	out	0x3d, r28	; 61
	DDRB = 0xFF;
 226:	8f ef       	ldi	r24, 0xFF	; 255
 228:	84 b9       	out	0x04, r24	; 4
	DDRC = 0xFF;
 22a:	87 b9       	out	0x07, r24	; 7
	DDRD = 0XFF;
 22c:	8a b9       	out	0x0a, r24	; 10
	DDRF = 0;
 22e:	10 ba       	out	0x10, r1	; 16
	DDRA = 0;
 230:	11 b8       	out	0x01, r1	; 1
	char buffer[100] = "hello - ";
 232:	89 e0       	ldi	r24, 0x09	; 9
 234:	e0 e0       	ldi	r30, 0x00	; 0
 236:	f2 e0       	ldi	r31, 0x02	; 2
 238:	de 01       	movw	r26, r28
 23a:	11 96       	adiw	r26, 0x01	; 1
 23c:	01 90       	ld	r0, Z+
 23e:	0d 92       	st	X+, r0
 240:	8a 95       	dec	r24
 242:	e1 f7       	brne	.-8      	; 0x23c <main+0x2c>
 244:	fe 01       	movw	r30, r28
 246:	3a 96       	adiw	r30, 0x0a	; 10
 248:	8b e5       	ldi	r24, 0x5B	; 91
 24a:	df 01       	movw	r26, r30
 24c:	1d 92       	st	X+, r1
 24e:	8a 95       	dec	r24
 250:	e9 f7       	brne	.-6      	; 0x24c <main+0x3c>
	char dylos[10];
//	char a = 0x00;
	usart_init(0);
 252:	80 e0       	ldi	r24, 0x00	; 0
 254:	90 e0       	ldi	r25, 0x00	; 0
 256:	79 df       	rcall	.-270    	; 0x14a <usart_init>
	sei();
 258:	78 94       	sei
	
    while (1) 
    {
		if(rec_flag)
		{
			dylos[strlen(dylos)] = rec;
 25a:	8e 01       	movw	r16, r28
 25c:	0b 59       	subi	r16, 0x9B	; 155
 25e:	1f 4f       	sbci	r17, 0xFF	; 255
	usart_init(0);
	sei();
	
    while (1) 
    {
		if(rec_flag)
 260:	80 91 64 02 	lds	r24, 0x0264
 264:	88 23       	and	r24, r24
 266:	39 f1       	breq	.+78     	; 0x2b6 <main+0xa6>
		{
			dylos[strlen(dylos)] = rec;
 268:	f8 01       	movw	r30, r16
 26a:	01 90       	ld	r0, Z+
 26c:	00 20       	and	r0, r0
 26e:	e9 f7       	brne	.-6      	; 0x26a <main+0x5a>
 270:	80 91 65 02 	lds	r24, 0x0265
 274:	31 97       	sbiw	r30, 0x01	; 1
 276:	80 83       	st	Z, r24
			rec_flag = 0;
 278:	10 92 64 02 	sts	0x0264, r1
			if(dylos[strlen(dylos)] == '\n')
 27c:	f8 01       	movw	r30, r16
 27e:	01 90       	ld	r0, Z+
 280:	00 20       	and	r0, r0
 282:	e9 f7       	brne	.-6      	; 0x27e <main+0x6e>
 284:	31 97       	sbiw	r30, 0x01	; 1
 286:	80 81       	ld	r24, Z
 288:	8a 30       	cpi	r24, 0x0A	; 10
 28a:	a9 f4       	brne	.+42     	; 0x2b6 <main+0xa6>
			{
				usart_send(0, dylos);
 28c:	b8 01       	movw	r22, r16
 28e:	80 e0       	ldi	r24, 0x00	; 0
 290:	90 e0       	ldi	r25, 0x00	; 0
 292:	9c df       	rcall	.-200    	; 0x1cc <usart_send>
				for(int i = strlen(dylos); i > 0; i--)
 294:	f8 01       	movw	r30, r16
 296:	01 90       	ld	r0, Z+
 298:	00 20       	and	r0, r0
 29a:	e9 f7       	brne	.-6      	; 0x296 <main+0x86>
 29c:	31 97       	sbiw	r30, 0x01	; 1
 29e:	e0 1b       	sub	r30, r16
 2a0:	f1 0b       	sbc	r31, r17
 2a2:	1e 16       	cp	r1, r30
 2a4:	1f 06       	cpc	r1, r31
 2a6:	3c f4       	brge	.+14     	; 0x2b6 <main+0xa6>
 2a8:	e0 0f       	add	r30, r16
 2aa:	f1 1f       	adc	r31, r17
 2ac:	c8 01       	movw	r24, r16
				{
					dylos[i-1] = 0;
 2ae:	12 92       	st	-Z, r1
			dylos[strlen(dylos)] = rec;
			rec_flag = 0;
			if(dylos[strlen(dylos)] == '\n')
			{
				usart_send(0, dylos);
				for(int i = strlen(dylos); i > 0; i--)
 2b0:	e8 17       	cp	r30, r24
 2b2:	f9 07       	cpc	r31, r25
 2b4:	e1 f7       	brne	.-8      	; 0x2ae <main+0x9e>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2b6:	bf ef       	ldi	r27, 0xFF	; 255
 2b8:	29 e6       	ldi	r18, 0x69	; 105
 2ba:	88 e1       	ldi	r24, 0x18	; 24
 2bc:	b1 50       	subi	r27, 0x01	; 1
 2be:	20 40       	sbci	r18, 0x00	; 0
 2c0:	80 40       	sbci	r24, 0x00	; 0
 2c2:	e1 f7       	brne	.-8      	; 0x2bc <main+0xac>
 2c4:	00 c0       	rjmp	.+0      	; 0x2c6 <main+0xb6>
 2c6:	00 00       	nop
					dylos[i-1] = 0;
				}
			}
		}
		_delay_ms(1000);
		usart_send(0,buffer);
 2c8:	be 01       	movw	r22, r28
 2ca:	6f 5f       	subi	r22, 0xFF	; 255
 2cc:	7f 4f       	sbci	r23, 0xFF	; 255
 2ce:	80 e0       	ldi	r24, 0x00	; 0
 2d0:	90 e0       	ldi	r25, 0x00	; 0
 2d2:	7c df       	rcall	.-264    	; 0x1cc <usart_send>
    }
 2d4:	c5 cf       	rjmp	.-118    	; 0x260 <main+0x50>

000002d6 <_exit>:
 2d6:	f8 94       	cli

000002d8 <__stop_program>:
 2d8:	ff cf       	rjmp	.-2      	; 0x2d8 <__stop_program>
