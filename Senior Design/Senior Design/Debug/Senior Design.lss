
Senior Design.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800200  00800200  00000310  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000029c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000b  00800200  00800200  00000310  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000310  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000340  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000068  00000000  00000000  00000380  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000594  00000000  00000000  000003e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000026a  00000000  00000000  0000097c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000004e5  00000000  00000000  00000be6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001b4  00000000  00000000  000010cc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000026a  00000000  00000000  00001280  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000934  00000000  00000000  000014ea  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000058  00000000  00000000  00001e1e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	8e c0       	rjmp	.+284    	; 0x122 <__bad_interrupt>
   6:	00 00       	nop
   8:	8c c0       	rjmp	.+280    	; 0x122 <__bad_interrupt>
   a:	00 00       	nop
   c:	8a c0       	rjmp	.+276    	; 0x122 <__bad_interrupt>
   e:	00 00       	nop
  10:	88 c0       	rjmp	.+272    	; 0x122 <__bad_interrupt>
  12:	00 00       	nop
  14:	86 c0       	rjmp	.+268    	; 0x122 <__bad_interrupt>
  16:	00 00       	nop
  18:	84 c0       	rjmp	.+264    	; 0x122 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	82 c0       	rjmp	.+260    	; 0x122 <__bad_interrupt>
  1e:	00 00       	nop
  20:	80 c0       	rjmp	.+256    	; 0x122 <__bad_interrupt>
  22:	00 00       	nop
  24:	7e c0       	rjmp	.+252    	; 0x122 <__bad_interrupt>
  26:	00 00       	nop
  28:	7c c0       	rjmp	.+248    	; 0x122 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	7a c0       	rjmp	.+244    	; 0x122 <__bad_interrupt>
  2e:	00 00       	nop
  30:	78 c0       	rjmp	.+240    	; 0x122 <__bad_interrupt>
  32:	00 00       	nop
  34:	76 c0       	rjmp	.+236    	; 0x122 <__bad_interrupt>
  36:	00 00       	nop
  38:	74 c0       	rjmp	.+232    	; 0x122 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	72 c0       	rjmp	.+228    	; 0x122 <__bad_interrupt>
  3e:	00 00       	nop
  40:	70 c0       	rjmp	.+224    	; 0x122 <__bad_interrupt>
  42:	00 00       	nop
  44:	6e c0       	rjmp	.+220    	; 0x122 <__bad_interrupt>
  46:	00 00       	nop
  48:	6c c0       	rjmp	.+216    	; 0x122 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	6a c0       	rjmp	.+212    	; 0x122 <__bad_interrupt>
  4e:	00 00       	nop
  50:	68 c0       	rjmp	.+208    	; 0x122 <__bad_interrupt>
  52:	00 00       	nop
  54:	66 c0       	rjmp	.+204    	; 0x122 <__bad_interrupt>
  56:	00 00       	nop
  58:	64 c0       	rjmp	.+200    	; 0x122 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	62 c0       	rjmp	.+196    	; 0x122 <__bad_interrupt>
  5e:	00 00       	nop
  60:	60 c0       	rjmp	.+192    	; 0x122 <__bad_interrupt>
  62:	00 00       	nop
  64:	5f c0       	rjmp	.+190    	; 0x124 <__vector_25>
  66:	00 00       	nop
  68:	5c c0       	rjmp	.+184    	; 0x122 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	5a c0       	rjmp	.+180    	; 0x122 <__bad_interrupt>
  6e:	00 00       	nop
  70:	58 c0       	rjmp	.+176    	; 0x122 <__bad_interrupt>
  72:	00 00       	nop
  74:	56 c0       	rjmp	.+172    	; 0x122 <__bad_interrupt>
  76:	00 00       	nop
  78:	54 c0       	rjmp	.+168    	; 0x122 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	52 c0       	rjmp	.+164    	; 0x122 <__bad_interrupt>
  7e:	00 00       	nop
  80:	50 c0       	rjmp	.+160    	; 0x122 <__bad_interrupt>
  82:	00 00       	nop
  84:	4e c0       	rjmp	.+156    	; 0x122 <__bad_interrupt>
  86:	00 00       	nop
  88:	4c c0       	rjmp	.+152    	; 0x122 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	4a c0       	rjmp	.+148    	; 0x122 <__bad_interrupt>
  8e:	00 00       	nop
  90:	48 c0       	rjmp	.+144    	; 0x122 <__bad_interrupt>
  92:	00 00       	nop
  94:	46 c0       	rjmp	.+140    	; 0x122 <__bad_interrupt>
  96:	00 00       	nop
  98:	44 c0       	rjmp	.+136    	; 0x122 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	42 c0       	rjmp	.+132    	; 0x122 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	40 c0       	rjmp	.+128    	; 0x122 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	3e c0       	rjmp	.+124    	; 0x122 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	3c c0       	rjmp	.+120    	; 0x122 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	3a c0       	rjmp	.+116    	; 0x122 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	38 c0       	rjmp	.+112    	; 0x122 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	36 c0       	rjmp	.+108    	; 0x122 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	34 c0       	rjmp	.+104    	; 0x122 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	32 c0       	rjmp	.+100    	; 0x122 <__bad_interrupt>
  be:	00 00       	nop
  c0:	30 c0       	rjmp	.+96     	; 0x122 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	2e c0       	rjmp	.+92     	; 0x122 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	2c c0       	rjmp	.+88     	; 0x122 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	2a c0       	rjmp	.+84     	; 0x122 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	28 c0       	rjmp	.+80     	; 0x122 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	26 c0       	rjmp	.+76     	; 0x122 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	24 c0       	rjmp	.+72     	; 0x122 <__bad_interrupt>
  da:	00 00       	nop
  dc:	22 c0       	rjmp	.+68     	; 0x122 <__bad_interrupt>
  de:	00 00       	nop
  e0:	20 c0       	rjmp	.+64     	; 0x122 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	ec e9       	ldi	r30, 0x9C	; 156
  fc:	f2 e0       	ldi	r31, 0x02	; 2
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	a0 30       	cpi	r26, 0x00	; 0
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	22 e0       	ldi	r18, 0x02	; 2
 110:	a0 e0       	ldi	r26, 0x00	; 0
 112:	b2 e0       	ldi	r27, 0x02	; 2
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	ab 30       	cpi	r26, 0x0B	; 11
 11a:	b2 07       	cpc	r27, r18
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	63 d0       	rcall	.+198    	; 0x1e6 <main>
 120:	bb c0       	rjmp	.+374    	; 0x298 <_exit>

00000122 <__bad_interrupt>:
 122:	6e cf       	rjmp	.-292    	; 0x0 <__vectors>

00000124 <__vector_25>:
	else
	t = (y-b)/m;
	sprintf(buffer, "%d", (int)t);
	strcat(buffer, ",");
	return;
}
 124:	1f 92       	push	r1
 126:	0f 92       	push	r0
 128:	0f b6       	in	r0, 0x3f	; 63
 12a:	0f 92       	push	r0
 12c:	11 24       	eor	r1, r1
 12e:	0b b6       	in	r0, 0x3b	; 59
 130:	0f 92       	push	r0
 132:	8f 93       	push	r24
 134:	ef 93       	push	r30
 136:	ff 93       	push	r31
 138:	e1 e0       	ldi	r30, 0x01	; 1
 13a:	f2 e0       	ldi	r31, 0x02	; 2
 13c:	01 90       	ld	r0, Z+
 13e:	00 20       	and	r0, r0
 140:	e9 f7       	brne	.-6      	; 0x13c <__vector_25+0x18>
 142:	80 91 c6 00 	lds	r24, 0x00C6
 146:	31 97       	sbiw	r30, 0x01	; 1
 148:	80 83       	st	Z, r24
 14a:	81 e0       	ldi	r24, 0x01	; 1
 14c:	80 93 00 02 	sts	0x0200, r24
 150:	ff 91       	pop	r31
 152:	ef 91       	pop	r30
 154:	8f 91       	pop	r24
 156:	0f 90       	pop	r0
 158:	0b be       	out	0x3b, r0	; 59
 15a:	0f 90       	pop	r0
 15c:	0f be       	out	0x3f, r0	; 63
 15e:	0f 90       	pop	r0
 160:	1f 90       	pop	r1
 162:	18 95       	reti

00000164 <usart_init>:

void usart_init(int n)
{
	switch(n)
 164:	81 30       	cpi	r24, 0x01	; 1
 166:	91 05       	cpc	r25, r1
 168:	b9 f0       	breq	.+46     	; 0x198 <usart_init+0x34>
 16a:	1c f4       	brge	.+6      	; 0x172 <usart_init+0xe>
 16c:	89 2b       	or	r24, r25
 16e:	39 f0       	breq	.+14     	; 0x17e <usart_init+0x1a>
 170:	08 95       	ret
 172:	82 30       	cpi	r24, 0x02	; 2
 174:	91 05       	cpc	r25, r1
 176:	e9 f0       	breq	.+58     	; 0x1b2 <usart_init+0x4e>
 178:	03 97       	sbiw	r24, 0x03	; 3
 17a:	41 f1       	breq	.+80     	; 0x1cc <usart_init+0x68>
 17c:	08 95       	ret
	{
		case 0:
			UCSR0B = (1<<TXEN0) | (1<<RXEN0) | (1<<RXCIE0); // TX Enable, RX Enable
 17e:	88 e9       	ldi	r24, 0x98	; 152
 180:	80 93 c1 00 	sts	0x00C1, r24
			UCSR0C = (1<<UCSZ01) | (1<<UCSZ00); // 8 bit data segment
 184:	86 e0       	ldi	r24, 0x06	; 6
 186:	80 93 c2 00 	sts	0x00C2, r24
			UBRR0 = 0x33; // Baud rate
 18a:	83 e3       	ldi	r24, 0x33	; 51
 18c:	90 e0       	ldi	r25, 0x00	; 0
 18e:	90 93 c5 00 	sts	0x00C5, r25
 192:	80 93 c4 00 	sts	0x00C4, r24
			break;
 196:	08 95       	ret
		case 1:
			UCSR1B = (1<<TXEN1) | (1<<RXEN1); // TX Enable, RX Enable
 198:	88 e1       	ldi	r24, 0x18	; 24
 19a:	80 93 c9 00 	sts	0x00C9, r24
			UCSR1C = (1<<UCSZ11) | (1<<UCSZ10); // 8 bit data segment
 19e:	86 e0       	ldi	r24, 0x06	; 6
 1a0:	80 93 ca 00 	sts	0x00CA, r24
			UBRR1 = 0x33; // Baud rate
 1a4:	83 e3       	ldi	r24, 0x33	; 51
 1a6:	90 e0       	ldi	r25, 0x00	; 0
 1a8:	90 93 cd 00 	sts	0x00CD, r25
 1ac:	80 93 cc 00 	sts	0x00CC, r24
			break;
 1b0:	08 95       	ret
		case 2:
			UCSR2B = (1<<TXEN2) | (1<<RXEN2); // TX Enable, RX Enable
 1b2:	88 e1       	ldi	r24, 0x18	; 24
 1b4:	80 93 d1 00 	sts	0x00D1, r24
			UCSR2C = (1<<UCSZ21) | (1<<UCSZ20); // 8 bit data segment
 1b8:	86 e0       	ldi	r24, 0x06	; 6
 1ba:	80 93 d2 00 	sts	0x00D2, r24
			UBRR2 = 0x33; // Baud rate
 1be:	83 e3       	ldi	r24, 0x33	; 51
 1c0:	90 e0       	ldi	r25, 0x00	; 0
 1c2:	90 93 d5 00 	sts	0x00D5, r25
 1c6:	80 93 d4 00 	sts	0x00D4, r24
			break;
 1ca:	08 95       	ret
		case 3:
			UCSR3B = (1<<TXEN3) | (1<<RXEN3); // TX Enable, RX Enable
 1cc:	88 e1       	ldi	r24, 0x18	; 24
 1ce:	80 93 31 01 	sts	0x0131, r24
			UCSR3C = (1<<UCSZ31) | (1<<UCSZ30); // 8 bit data segment
 1d2:	86 e0       	ldi	r24, 0x06	; 6
 1d4:	80 93 32 01 	sts	0x0132, r24
			UBRR3 = 0x33; // Baud rate
 1d8:	83 e3       	ldi	r24, 0x33	; 51
 1da:	90 e0       	ldi	r25, 0x00	; 0
 1dc:	90 93 35 01 	sts	0x0135, r25
 1e0:	80 93 34 01 	sts	0x0134, r24
 1e4:	08 95       	ret

000001e6 <main>:
	rec_dylos[strlen(rec_dylos)] = UDR0;
	rec_dylos_flag = 1;
}

int main(void)
{
 1e6:	cf 93       	push	r28
 1e8:	df 93       	push	r29
 1ea:	cd b7       	in	r28, 0x3d	; 61
 1ec:	de b7       	in	r29, 0x3e	; 62
 1ee:	2a 97       	sbiw	r28, 0x0a	; 10
 1f0:	0f b6       	in	r0, 0x3f	; 63
 1f2:	f8 94       	cli
 1f4:	de bf       	out	0x3e, r29	; 62
 1f6:	0f be       	out	0x3f, r0	; 63
 1f8:	cd bf       	out	0x3d, r28	; 61
	DDRB = 0xFF;
 1fa:	8f ef       	ldi	r24, 0xFF	; 255
 1fc:	84 b9       	out	0x04, r24	; 4
	DDRC = 0xFF;
 1fe:	87 b9       	out	0x07, r24	; 7
	DDRD = 0XFF;
 200:	8a b9       	out	0x0a, r24	; 10
	DDRF = 0;
 202:	10 ba       	out	0x10, r1	; 16
	DDRA = 0;
 204:	11 b8       	out	0x01, r1	; 1
	char buffer[10];
	char dylos[10];
	usart_init(0);
 206:	80 e0       	ldi	r24, 0x00	; 0
 208:	90 e0       	ldi	r25, 0x00	; 0
 20a:	ac df       	rcall	.-168    	; 0x164 <usart_init>
	sei();
 20c:	78 94       	sei
    {
		_delay_ms(1000);
		if(rec_dylos_flag == 1)
		{
			rec_dylos_flag = 0;
			if(rec_dylos[strlen(rec_dylos) - 1] == '\n')
 20e:	01 e0       	ldi	r16, 0x01	; 1
 210:	12 e0       	ldi	r17, 0x02	; 2
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 212:	2f ef       	ldi	r18, 0xFF	; 255
 214:	89 e6       	ldi	r24, 0x69	; 105
 216:	98 e1       	ldi	r25, 0x18	; 24
 218:	21 50       	subi	r18, 0x01	; 1
 21a:	80 40       	sbci	r24, 0x00	; 0
 21c:	90 40       	sbci	r25, 0x00	; 0
 21e:	e1 f7       	brne	.-8      	; 0x218 <main+0x32>
 220:	00 c0       	rjmp	.+0      	; 0x222 <main+0x3c>
 222:	00 00       	nop
	sei();
	
    while (1) 
    {
		_delay_ms(1000);
		if(rec_dylos_flag == 1)
 224:	80 91 00 02 	lds	r24, 0x0200
 228:	81 30       	cpi	r24, 0x01	; 1
 22a:	99 f7       	brne	.-26     	; 0x212 <main+0x2c>
		{
			rec_dylos_flag = 0;
 22c:	10 92 00 02 	sts	0x0200, r1
			if(rec_dylos[strlen(rec_dylos) - 1] == '\n')
 230:	f8 01       	movw	r30, r16
 232:	01 90       	ld	r0, Z+
 234:	00 20       	and	r0, r0
 236:	e9 f7       	brne	.-6      	; 0x232 <main+0x4c>
 238:	31 97       	sbiw	r30, 0x01	; 1
 23a:	af 01       	movw	r20, r30
 23c:	41 50       	subi	r20, 0x01	; 1
 23e:	52 40       	sbci	r21, 0x02	; 2
 240:	da 01       	movw	r26, r20
 242:	a0 50       	subi	r26, 0x00	; 0
 244:	be 4f       	sbci	r27, 0xFE	; 254
 246:	8c 91       	ld	r24, X
 248:	8a 30       	cpi	r24, 0x0A	; 10
 24a:	19 f7       	brne	.-58     	; 0x212 <main+0x2c>
			{
				strncpy(dylos, rec_dylos, strlen(rec_dylos));
 24c:	b8 01       	movw	r22, r16
 24e:	ce 01       	movw	r24, r28
 250:	01 96       	adiw	r24, 0x01	; 1
 252:	13 d0       	rcall	.+38     	; 0x27a <strncpy>
				for(int i = strlen(rec_dylos); i > 0; i--)
 254:	f8 01       	movw	r30, r16
 256:	01 90       	ld	r0, Z+
 258:	00 20       	and	r0, r0
 25a:	e9 f7       	brne	.-6      	; 0x256 <main+0x70>
 25c:	31 97       	sbiw	r30, 0x01	; 1
 25e:	cf 01       	movw	r24, r30
 260:	81 50       	subi	r24, 0x01	; 1
 262:	92 40       	sbci	r25, 0x02	; 2
 264:	18 16       	cp	r1, r24
 266:	19 06       	cpc	r1, r25
 268:	a4 f6       	brge	.-88     	; 0x212 <main+0x2c>
					rec_dylos[i-1] = 0;
 26a:	01 97       	sbiw	r24, 0x01	; 1
 26c:	fc 01       	movw	r30, r24
 26e:	ef 5f       	subi	r30, 0xFF	; 255
 270:	fd 4f       	sbci	r31, 0xFD	; 253
 272:	10 82       	st	Z, r1
		{
			rec_dylos_flag = 0;
			if(rec_dylos[strlen(rec_dylos) - 1] == '\n')
			{
				strncpy(dylos, rec_dylos, strlen(rec_dylos));
				for(int i = strlen(rec_dylos); i > 0; i--)
 274:	00 97       	sbiw	r24, 0x00	; 0
 276:	c9 f7       	brne	.-14     	; 0x26a <main+0x84>
 278:	cc cf       	rjmp	.-104    	; 0x212 <main+0x2c>

0000027a <strncpy>:
 27a:	fb 01       	movw	r30, r22
 27c:	dc 01       	movw	r26, r24
 27e:	41 50       	subi	r20, 0x01	; 1
 280:	50 40       	sbci	r21, 0x00	; 0
 282:	48 f0       	brcs	.+18     	; 0x296 <strncpy+0x1c>
 284:	01 90       	ld	r0, Z+
 286:	0d 92       	st	X+, r0
 288:	00 20       	and	r0, r0
 28a:	c9 f7       	brne	.-14     	; 0x27e <strncpy+0x4>
 28c:	01 c0       	rjmp	.+2      	; 0x290 <strncpy+0x16>
 28e:	1d 92       	st	X+, r1
 290:	41 50       	subi	r20, 0x01	; 1
 292:	50 40       	sbci	r21, 0x00	; 0
 294:	e0 f7       	brcc	.-8      	; 0x28e <strncpy+0x14>
 296:	08 95       	ret

00000298 <_exit>:
 298:	f8 94       	cli

0000029a <__stop_program>:
 29a:	ff cf       	rjmp	.-2      	; 0x29a <__stop_program>
