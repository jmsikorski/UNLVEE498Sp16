
Senior Design.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000006e  00800200  00000310  000003a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000310  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000a  0080026e  0080026e  00000412  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000412  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000444  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000068  00000000  00000000  00000484  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000005a3  00000000  00000000  000004ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000023f  00000000  00000000  00000a8f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000470  00000000  00000000  00000cce  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001e0  00000000  00000000  00001140  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000242  00000000  00000000  00001320  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000009aa  00000000  00000000  00001562  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000058  00000000  00000000  00001f0c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	8e c0       	rjmp	.+284    	; 0x122 <__bad_interrupt>
   6:	00 00       	nop
   8:	8c c0       	rjmp	.+280    	; 0x122 <__bad_interrupt>
   a:	00 00       	nop
   c:	8a c0       	rjmp	.+276    	; 0x122 <__bad_interrupt>
   e:	00 00       	nop
  10:	88 c0       	rjmp	.+272    	; 0x122 <__bad_interrupt>
  12:	00 00       	nop
  14:	86 c0       	rjmp	.+268    	; 0x122 <__bad_interrupt>
  16:	00 00       	nop
  18:	84 c0       	rjmp	.+264    	; 0x122 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	82 c0       	rjmp	.+260    	; 0x122 <__bad_interrupt>
  1e:	00 00       	nop
  20:	80 c0       	rjmp	.+256    	; 0x122 <__bad_interrupt>
  22:	00 00       	nop
  24:	7e c0       	rjmp	.+252    	; 0x122 <__bad_interrupt>
  26:	00 00       	nop
  28:	7c c0       	rjmp	.+248    	; 0x122 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	7a c0       	rjmp	.+244    	; 0x122 <__bad_interrupt>
  2e:	00 00       	nop
  30:	78 c0       	rjmp	.+240    	; 0x122 <__bad_interrupt>
  32:	00 00       	nop
  34:	76 c0       	rjmp	.+236    	; 0x122 <__bad_interrupt>
  36:	00 00       	nop
  38:	74 c0       	rjmp	.+232    	; 0x122 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	72 c0       	rjmp	.+228    	; 0x122 <__bad_interrupt>
  3e:	00 00       	nop
  40:	70 c0       	rjmp	.+224    	; 0x122 <__bad_interrupt>
  42:	00 00       	nop
  44:	6e c0       	rjmp	.+220    	; 0x122 <__bad_interrupt>
  46:	00 00       	nop
  48:	6c c0       	rjmp	.+216    	; 0x122 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	6a c0       	rjmp	.+212    	; 0x122 <__bad_interrupt>
  4e:	00 00       	nop
  50:	68 c0       	rjmp	.+208    	; 0x122 <__bad_interrupt>
  52:	00 00       	nop
  54:	66 c0       	rjmp	.+204    	; 0x122 <__bad_interrupt>
  56:	00 00       	nop
  58:	64 c0       	rjmp	.+200    	; 0x122 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	62 c0       	rjmp	.+196    	; 0x122 <__bad_interrupt>
  5e:	00 00       	nop
  60:	60 c0       	rjmp	.+192    	; 0x122 <__bad_interrupt>
  62:	00 00       	nop
  64:	c2 c0       	rjmp	.+388    	; 0x1ea <__vector_25>
  66:	00 00       	nop
  68:	5c c0       	rjmp	.+184    	; 0x122 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	5a c0       	rjmp	.+180    	; 0x122 <__bad_interrupt>
  6e:	00 00       	nop
  70:	58 c0       	rjmp	.+176    	; 0x122 <__bad_interrupt>
  72:	00 00       	nop
  74:	56 c0       	rjmp	.+172    	; 0x122 <__bad_interrupt>
  76:	00 00       	nop
  78:	54 c0       	rjmp	.+168    	; 0x122 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	52 c0       	rjmp	.+164    	; 0x122 <__bad_interrupt>
  7e:	00 00       	nop
  80:	50 c0       	rjmp	.+160    	; 0x122 <__bad_interrupt>
  82:	00 00       	nop
  84:	4e c0       	rjmp	.+156    	; 0x122 <__bad_interrupt>
  86:	00 00       	nop
  88:	4c c0       	rjmp	.+152    	; 0x122 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	4a c0       	rjmp	.+148    	; 0x122 <__bad_interrupt>
  8e:	00 00       	nop
  90:	48 c0       	rjmp	.+144    	; 0x122 <__bad_interrupt>
  92:	00 00       	nop
  94:	46 c0       	rjmp	.+140    	; 0x122 <__bad_interrupt>
  96:	00 00       	nop
  98:	44 c0       	rjmp	.+136    	; 0x122 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	42 c0       	rjmp	.+132    	; 0x122 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	40 c0       	rjmp	.+128    	; 0x122 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	3e c0       	rjmp	.+124    	; 0x122 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	3c c0       	rjmp	.+120    	; 0x122 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	3a c0       	rjmp	.+116    	; 0x122 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	38 c0       	rjmp	.+112    	; 0x122 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	36 c0       	rjmp	.+108    	; 0x122 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	34 c0       	rjmp	.+104    	; 0x122 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	32 c0       	rjmp	.+100    	; 0x122 <__bad_interrupt>
  be:	00 00       	nop
  c0:	30 c0       	rjmp	.+96     	; 0x122 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	2e c0       	rjmp	.+92     	; 0x122 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	2c c0       	rjmp	.+88     	; 0x122 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	2a c0       	rjmp	.+84     	; 0x122 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	28 c0       	rjmp	.+80     	; 0x122 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	26 c0       	rjmp	.+76     	; 0x122 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	24 c0       	rjmp	.+72     	; 0x122 <__bad_interrupt>
  da:	00 00       	nop
  dc:	22 c0       	rjmp	.+68     	; 0x122 <__bad_interrupt>
  de:	00 00       	nop
  e0:	20 c0       	rjmp	.+64     	; 0x122 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	e0 e1       	ldi	r30, 0x10	; 16
  fc:	f3 e0       	ldi	r31, 0x03	; 3
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	ae 36       	cpi	r26, 0x6E	; 110
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	22 e0       	ldi	r18, 0x02	; 2
 110:	ae e6       	ldi	r26, 0x6E	; 110
 112:	b2 e0       	ldi	r27, 0x02	; 2
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	a8 37       	cpi	r26, 0x78	; 120
 11a:	b2 07       	cpc	r27, r18
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	b2 d0       	rcall	.+356    	; 0x284 <main>
 120:	f5 c0       	rjmp	.+490    	; 0x30c <_exit>

00000122 <__bad_interrupt>:
 122:	6e cf       	rjmp	.-292    	; 0x0 <__vectors>

00000124 <usart_init>:
	return;
}

void usart_init(int n)
{
	switch(n)
 124:	81 30       	cpi	r24, 0x01	; 1
 126:	91 05       	cpc	r25, r1
 128:	b9 f0       	breq	.+46     	; 0x158 <usart_init+0x34>
 12a:	1c f4       	brge	.+6      	; 0x132 <usart_init+0xe>
 12c:	89 2b       	or	r24, r25
 12e:	39 f0       	breq	.+14     	; 0x13e <usart_init+0x1a>
 130:	08 95       	ret
 132:	82 30       	cpi	r24, 0x02	; 2
 134:	91 05       	cpc	r25, r1
 136:	e9 f0       	breq	.+58     	; 0x172 <usart_init+0x4e>
 138:	03 97       	sbiw	r24, 0x03	; 3
 13a:	41 f1       	breq	.+80     	; 0x18c <usart_init+0x68>
 13c:	08 95       	ret
	{
		case 0:
			UCSR0B = (1<<TXEN0) | (1<<RXEN0) | (1<<RXCIE0); // TX Enable, RX Enable
 13e:	88 e9       	ldi	r24, 0x98	; 152
 140:	80 93 c1 00 	sts	0x00C1, r24
			UCSR0C = (1<<UCSZ01) | (1<<UCSZ00); // 8 bit data segment
 144:	86 e0       	ldi	r24, 0x06	; 6
 146:	80 93 c2 00 	sts	0x00C2, r24
			UBRR0 = 0x33; // Baud rate
 14a:	83 e3       	ldi	r24, 0x33	; 51
 14c:	90 e0       	ldi	r25, 0x00	; 0
 14e:	90 93 c5 00 	sts	0x00C5, r25
 152:	80 93 c4 00 	sts	0x00C4, r24
			break;
 156:	08 95       	ret
		case 1:
			UCSR1B = (1<<TXEN1) | (1<<RXEN1); // TX Enable, RX Enable
 158:	88 e1       	ldi	r24, 0x18	; 24
 15a:	80 93 c9 00 	sts	0x00C9, r24
			UCSR1C = (1<<UCSZ11) | (1<<UCSZ10); // 8 bit data segment
 15e:	86 e0       	ldi	r24, 0x06	; 6
 160:	80 93 ca 00 	sts	0x00CA, r24
			UBRR1 = 0x33; // Baud rate
 164:	83 e3       	ldi	r24, 0x33	; 51
 166:	90 e0       	ldi	r25, 0x00	; 0
 168:	90 93 cd 00 	sts	0x00CD, r25
 16c:	80 93 cc 00 	sts	0x00CC, r24
			break;
 170:	08 95       	ret
		case 2:
			UCSR2B = (1<<TXEN2) | (1<<RXEN2); // TX Enable, RX Enable
 172:	88 e1       	ldi	r24, 0x18	; 24
 174:	80 93 d1 00 	sts	0x00D1, r24
			UCSR2C = (1<<UCSZ21) | (1<<UCSZ20); // 8 bit data segment
 178:	86 e0       	ldi	r24, 0x06	; 6
 17a:	80 93 d2 00 	sts	0x00D2, r24
			UBRR2 = 0x33; // Baud rate
 17e:	83 e3       	ldi	r24, 0x33	; 51
 180:	90 e0       	ldi	r25, 0x00	; 0
 182:	90 93 d5 00 	sts	0x00D5, r25
 186:	80 93 d4 00 	sts	0x00D4, r24
			break;
 18a:	08 95       	ret
		case 3:
			UCSR3B = (1<<TXEN3) | (1<<RXEN3); // TX Enable, RX Enable
 18c:	88 e1       	ldi	r24, 0x18	; 24
 18e:	80 93 31 01 	sts	0x0131, r24
			UCSR3C = (1<<UCSZ31) | (1<<UCSZ30); // 8 bit data segment
 192:	86 e0       	ldi	r24, 0x06	; 6
 194:	80 93 32 01 	sts	0x0132, r24
			UBRR3 = 0x33; // Baud rate
 198:	83 e3       	ldi	r24, 0x33	; 51
 19a:	90 e0       	ldi	r25, 0x00	; 0
 19c:	90 93 35 01 	sts	0x0135, r25
 1a0:	80 93 34 01 	sts	0x0134, r24
 1a4:	08 95       	ret

000001a6 <usart_send>:
		break;
	}
}

void usart_send (int n, char* data)
{
 1a6:	cf 93       	push	r28
 1a8:	df 93       	push	r29
 1aa:	eb 01       	movw	r28, r22
 1ac:	ab 01       	movw	r20, r22
	for(int i = 0; i < strlen(data); i++)
 1ae:	20 e0       	ldi	r18, 0x00	; 0
 1b0:	30 e0       	ldi	r19, 0x00	; 0
	{
		while (! (UCSR0A & (1<<UDRE0)));
 1b2:	e0 ec       	ldi	r30, 0xC0	; 192
 1b4:	f0 e0       	ldi	r31, 0x00	; 0
		UDR0 = data[i];
 1b6:	66 ec       	ldi	r22, 0xC6	; 198
 1b8:	70 e0       	ldi	r23, 0x00	; 0
	}
}

void usart_send (int n, char* data)
{
	for(int i = 0; i < strlen(data); i++)
 1ba:	0a c0       	rjmp	.+20     	; 0x1d0 <usart_send+0x2a>
	{
		while (! (UCSR0A & (1<<UDRE0)));
 1bc:	80 81       	ld	r24, Z
 1be:	85 ff       	sbrs	r24, 5
 1c0:	fd cf       	rjmp	.-6      	; 0x1bc <usart_send+0x16>
		UDR0 = data[i];
 1c2:	da 01       	movw	r26, r20
 1c4:	8d 91       	ld	r24, X+
 1c6:	ad 01       	movw	r20, r26
 1c8:	db 01       	movw	r26, r22
 1ca:	8c 93       	st	X, r24
	}
}

void usart_send (int n, char* data)
{
	for(int i = 0; i < strlen(data); i++)
 1cc:	2f 5f       	subi	r18, 0xFF	; 255
 1ce:	3f 4f       	sbci	r19, 0xFF	; 255
 1d0:	de 01       	movw	r26, r28
 1d2:	0d 90       	ld	r0, X+
 1d4:	00 20       	and	r0, r0
 1d6:	e9 f7       	brne	.-6      	; 0x1d2 <usart_send+0x2c>
 1d8:	11 97       	sbiw	r26, 0x01	; 1
 1da:	ac 1b       	sub	r26, r28
 1dc:	bd 0b       	sbc	r27, r29
 1de:	2a 17       	cp	r18, r26
 1e0:	3b 07       	cpc	r19, r27
 1e2:	60 f3       	brcs	.-40     	; 0x1bc <usart_send+0x16>
	{
		while (! (UCSR0A & (1<<UDRE0)));
		UDR0 = data[i];
	}
	return;
}
 1e4:	df 91       	pop	r29
 1e6:	cf 91       	pop	r28
 1e8:	08 95       	ret

000001ea <__vector_25>:
void usart_rec(int, char*);

char volatile dylos[10];

ISR(USART0_RX_vect)
{
 1ea:	1f 92       	push	r1
 1ec:	0f 92       	push	r0
 1ee:	0f b6       	in	r0, 0x3f	; 63
 1f0:	0f 92       	push	r0
 1f2:	11 24       	eor	r1, r1
 1f4:	0b b6       	in	r0, 0x3b	; 59
 1f6:	0f 92       	push	r0
 1f8:	2f 93       	push	r18
 1fa:	3f 93       	push	r19
 1fc:	4f 93       	push	r20
 1fe:	5f 93       	push	r21
 200:	6f 93       	push	r22
 202:	7f 93       	push	r23
 204:	8f 93       	push	r24
 206:	9f 93       	push	r25
 208:	af 93       	push	r26
 20a:	bf 93       	push	r27
 20c:	ef 93       	push	r30
 20e:	ff 93       	push	r31
	if(dylos[strlen(dylos)-1] == '\n')
 210:	ee e6       	ldi	r30, 0x6E	; 110
 212:	f2 e0       	ldi	r31, 0x02	; 2
 214:	01 90       	ld	r0, Z+
 216:	00 20       	and	r0, r0
 218:	e9 f7       	brne	.-6      	; 0x214 <__vector_25+0x2a>
 21a:	31 97       	sbiw	r30, 0x01	; 1
 21c:	ee 56       	subi	r30, 0x6E	; 110
 21e:	f2 40       	sbci	r31, 0x02	; 2
 220:	df 01       	movw	r26, r30
 222:	a3 59       	subi	r26, 0x93	; 147
 224:	bd 4f       	sbci	r27, 0xFD	; 253
 226:	8c 91       	ld	r24, X
 228:	8a 30       	cpi	r24, 0x0A	; 10
 22a:	59 f4       	brne	.+22     	; 0x242 <__vector_25+0x58>
	{
		for(int i = strlen(dylos); i > 0;i--)
 22c:	cf 01       	movw	r24, r30
 22e:	1e 16       	cp	r1, r30
 230:	1f 06       	cpc	r1, r31
 232:	3c f4       	brge	.+14     	; 0x242 <__vector_25+0x58>
		dylos[i-1] = 0;
 234:	01 97       	sbiw	r24, 0x01	; 1
 236:	fc 01       	movw	r30, r24
 238:	e2 59       	subi	r30, 0x92	; 146
 23a:	fd 4f       	sbci	r31, 0xFD	; 253
 23c:	10 82       	st	Z, r1

ISR(USART0_RX_vect)
{
	if(dylos[strlen(dylos)-1] == '\n')
	{
		for(int i = strlen(dylos); i > 0;i--)
 23e:	00 97       	sbiw	r24, 0x00	; 0
 240:	c9 f7       	brne	.-14     	; 0x234 <__vector_25+0x4a>
		dylos[i-1] = 0;
	}
	dylos[strlen(dylos)] = UDR0;
 242:	ee e6       	ldi	r30, 0x6E	; 110
 244:	f2 e0       	ldi	r31, 0x02	; 2
 246:	01 90       	ld	r0, Z+
 248:	00 20       	and	r0, r0
 24a:	e9 f7       	brne	.-6      	; 0x246 <__vector_25+0x5c>
 24c:	80 91 c6 00 	lds	r24, 0x00C6
 250:	31 97       	sbiw	r30, 0x01	; 1
 252:	80 83       	st	Z, r24
	usart_send(0,"READ\n");
 254:	67 e6       	ldi	r22, 0x67	; 103
 256:	72 e0       	ldi	r23, 0x02	; 2
 258:	80 e0       	ldi	r24, 0x00	; 0
 25a:	90 e0       	ldi	r25, 0x00	; 0
 25c:	a4 df       	rcall	.-184    	; 0x1a6 <usart_send>
}
 25e:	ff 91       	pop	r31
 260:	ef 91       	pop	r30
 262:	bf 91       	pop	r27
 264:	af 91       	pop	r26
 266:	9f 91       	pop	r25
 268:	8f 91       	pop	r24
 26a:	7f 91       	pop	r23
 26c:	6f 91       	pop	r22
 26e:	5f 91       	pop	r21
 270:	4f 91       	pop	r20
 272:	3f 91       	pop	r19
 274:	2f 91       	pop	r18
 276:	0f 90       	pop	r0
 278:	0b be       	out	0x3b, r0	; 59
 27a:	0f 90       	pop	r0
 27c:	0f be       	out	0x3f, r0	; 63
 27e:	0f 90       	pop	r0
 280:	1f 90       	pop	r1
 282:	18 95       	reti

00000284 <main>:

int main(void)
{
 284:	cf 93       	push	r28
 286:	df 93       	push	r29
 288:	cd b7       	in	r28, 0x3d	; 61
 28a:	de b7       	in	r29, 0x3e	; 62
 28c:	c4 56       	subi	r28, 0x64	; 100
 28e:	d1 09       	sbc	r29, r1
 290:	0f b6       	in	r0, 0x3f	; 63
 292:	f8 94       	cli
 294:	de bf       	out	0x3e, r29	; 62
 296:	0f be       	out	0x3f, r0	; 63
 298:	cd bf       	out	0x3d, r28	; 61
	DDRB = 0xFF;
 29a:	8f ef       	ldi	r24, 0xFF	; 255
 29c:	84 b9       	out	0x04, r24	; 4
	DDRC = 0xFF;
 29e:	87 b9       	out	0x07, r24	; 7
	DDRD = 0XFF;
 2a0:	8a b9       	out	0x0a, r24	; 10
	DDRF = 0;
 2a2:	10 ba       	out	0x10, r1	; 16
	DDRA = 0;
 2a4:	11 b8       	out	0x01, r1	; 1
	char buffer[100] = "hello - ";
 2a6:	89 e0       	ldi	r24, 0x09	; 9
 2a8:	e0 e0       	ldi	r30, 0x00	; 0
 2aa:	f2 e0       	ldi	r31, 0x02	; 2
 2ac:	de 01       	movw	r26, r28
 2ae:	11 96       	adiw	r26, 0x01	; 1
 2b0:	01 90       	ld	r0, Z+
 2b2:	0d 92       	st	X+, r0
 2b4:	8a 95       	dec	r24
 2b6:	e1 f7       	brne	.-8      	; 0x2b0 <main+0x2c>
 2b8:	fe 01       	movw	r30, r28
 2ba:	3a 96       	adiw	r30, 0x0a	; 10
 2bc:	8b e5       	ldi	r24, 0x5B	; 91
 2be:	df 01       	movw	r26, r30
 2c0:	1d 92       	st	X+, r1
 2c2:	8a 95       	dec	r24
 2c4:	e9 f7       	brne	.-6      	; 0x2c0 <main+0x3c>
//	char a = 0x00;
	usart_init(0);
 2c6:	80 e0       	ldi	r24, 0x00	; 0
 2c8:	90 e0       	ldi	r25, 0x00	; 0
 2ca:	2c df       	rcall	.-424    	; 0x124 <usart_init>
	sei();
 2cc:	78 94       	sei
			while(a != 0xFE)
				a = PINA;
		}
*/
	_delay_ms(1000);
	if(dylos[strlen(dylos)-1] == '\n')
 2ce:	0e e6       	ldi	r16, 0x6E	; 110
 2d0:	12 e0       	ldi	r17, 0x02	; 2
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2d2:	bf ef       	ldi	r27, 0xFF	; 255
 2d4:	29 e6       	ldi	r18, 0x69	; 105
 2d6:	88 e1       	ldi	r24, 0x18	; 24
 2d8:	b1 50       	subi	r27, 0x01	; 1
 2da:	20 40       	sbci	r18, 0x00	; 0
 2dc:	80 40       	sbci	r24, 0x00	; 0
 2de:	e1 f7       	brne	.-8      	; 0x2d8 <main+0x54>
 2e0:	00 c0       	rjmp	.+0      	; 0x2e2 <main+0x5e>
 2e2:	00 00       	nop
 2e4:	f8 01       	movw	r30, r16
 2e6:	01 90       	ld	r0, Z+
 2e8:	00 20       	and	r0, r0
 2ea:	e9 f7       	brne	.-6      	; 0x2e6 <main+0x62>
 2ec:	32 97       	sbiw	r30, 0x02	; 2
 2ee:	80 81       	ld	r24, Z
 2f0:	8a 30       	cpi	r24, 0x0A	; 10
 2f2:	29 f4       	brne	.+10     	; 0x2fe <main+0x7a>
		usart_send(0,dylos);
 2f4:	b8 01       	movw	r22, r16
 2f6:	80 e0       	ldi	r24, 0x00	; 0
 2f8:	90 e0       	ldi	r25, 0x00	; 0
 2fa:	55 df       	rcall	.-342    	; 0x1a6 <usart_send>
 2fc:	ea cf       	rjmp	.-44     	; 0x2d2 <main+0x4e>
	else
		usart_send(0,buffer);
 2fe:	be 01       	movw	r22, r28
 300:	6f 5f       	subi	r22, 0xFF	; 255
 302:	7f 4f       	sbci	r23, 0xFF	; 255
 304:	80 e0       	ldi	r24, 0x00	; 0
 306:	90 e0       	ldi	r25, 0x00	; 0
 308:	4e df       	rcall	.-356    	; 0x1a6 <usart_send>
 30a:	e3 cf       	rjmp	.-58     	; 0x2d2 <main+0x4e>

0000030c <_exit>:
 30c:	f8 94       	cli

0000030e <__stop_program>:
 30e:	ff cf       	rjmp	.-2      	; 0x30e <__stop_program>
